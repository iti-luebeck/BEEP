
BEEP_XMega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00001d86  00001e1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004b  00802000  00802000  00001e1a  2**0
                  ALLOC
  3 .stab         000022f8  00000000  00000000  00001e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009a7  00000000  00000000  00004114  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004abb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001b0  00000000  00000000  00004aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003ee9  00000000  00000000  00004c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000adc  00000000  00000000  00008b83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000c26  00000000  00000000  0000965f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000448  00000000  00000000  0000a288  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001fee  00000000  00000000  0000a6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000015a8  00000000  00000000  0000c6be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001a8  00000000  00000000  0000dc66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__ctors_end>
       4:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
       8:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
       c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      10:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      14:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      18:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      1c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      20:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      24:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      28:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      2c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      30:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      34:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      38:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      3c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      40:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      44:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      48:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      4c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      50:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      54:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      58:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      5c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      60:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      64:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      68:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      6c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      70:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      74:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      78:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      7c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      80:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      84:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      88:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      8c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      90:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      94:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      98:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      9c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      a0:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      a4:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      a8:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      ac:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      b0:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      b4:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      b8:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      bc:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__vector_47>
      c0:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      c4:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      c8:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      cc:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      d0:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      d4:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      d8:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      dc:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      e0:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      e4:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      e8:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      ec:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      f0:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      f4:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      f8:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
      fc:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     100:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     104:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     108:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     10c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     110:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     114:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     118:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     11c:	0c 94 66 09 	jmp	0x12cc	; 0x12cc <__vector_71>
     120:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     124:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     128:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     12c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     130:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     134:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__vector_77>
     138:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     13c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     140:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     144:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     148:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     14c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     150:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     154:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     158:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     15c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     160:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__vector_88>
     164:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__vector_89>
     168:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     16c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     170:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     174:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     178:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     17c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     180:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     184:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     188:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     18c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     190:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     194:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     198:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     19c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     1a0:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     1a4:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     1a8:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     1ac:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     1b0:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     1b4:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     1b8:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     1bc:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     1c0:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>
     1c4:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__bad_interrupt>

000001c8 <rgb_led_lut>:
     1c8:	00 20 10 30 08 28 18 38                             . .0.(.8

000001d0 <pwmtable_12>:
     1d0:	00 00 01 00 01 00 01 00 01 00 01 00 01 00 01 00     ................
     1e0:	01 00 01 00 01 00 01 00 02 00 02 00 02 00 02 00     ................
     1f0:	02 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00     ................
     200:	02 00 02 00 02 00 02 00 03 00 03 00 03 00 03 00     ................
     210:	03 00 03 00 03 00 03 00 03 00 03 00 04 00 04 00     ................
     220:	04 00 04 00 04 00 04 00 04 00 04 00 05 00 05 00     ................
     230:	05 00 05 00 05 00 05 00 06 00 06 00 06 00 06 00     ................
     240:	06 00 07 00 07 00 07 00 07 00 07 00 08 00 08 00     ................
     250:	08 00 09 00 09 00 09 00 09 00 0a 00 0a 00 0a 00     ................
     260:	0b 00 0b 00 0b 00 0c 00 0c 00 0d 00 0d 00 0d 00     ................
     270:	0e 00 0e 00 0f 00 0f 00 10 00 10 00 11 00 11 00     ................
     280:	12 00 13 00 13 00 14 00 15 00 15 00 16 00 17 00     ................
     290:	17 00 18 00 19 00 1a 00 1b 00 1b 00 1c 00 1d 00     ................
     2a0:	1e 00 1f 00 20 00 21 00 23 00 24 00 25 00 26 00     .... .!.#.$.%.&.
     2b0:	27 00 29 00 2a 00 2b 00 2d 00 2e 00 30 00 31 00     '.).*.+.-...0.1.
     2c0:	33 00 35 00 36 00 38 00 3a 00 3c 00 3e 00 40 00     3.5.6.8.:.<.>.@.
     2d0:	42 00 44 00 47 00 49 00 4b 00 4e 00 50 00 53 00     B.D.G.I.K.N.P.S.
     2e0:	56 00 59 00 5b 00 5f 00 62 00 65 00 68 00 6c 00     V.Y.[._.b.e.h.l.
     2f0:	6f 00 73 00 77 00 7b 00 7f 00 83 00 87 00 8c 00     o.s.w.{.........
     300:	90 00 95 00 9a 00 9f 00 a4 00 aa 00 af 00 b5 00     ................
     310:	bb 00 c1 00 c8 00 ce 00 d5 00 dc 00 e3 00 eb 00     ................
     320:	f2 00 fa 00 03 01 0b 01 14 01 1d 01 27 01 30 01     ............'.0.
     330:	3a 01 45 01 50 01 5b 01 66 01 72 01 7e 01 8b 01     :.E.P.[.f.r.~...
     340:	98 01 a5 01 b3 01 c2 01 d0 01 e0 01 f0 01 00 02     ................
     350:	11 02 22 02 34 02 47 02 5a 02 6e 02 83 02 98 02     ..".4.G.Z.n.....
     360:	ae 02 c4 02 dc 02 f4 02 0d 03 27 03 41 03 5d 03     ..........'.A.].
     370:	79 03 97 03 b5 03 d4 03 f5 03 16 04 39 04 5c 04     y...........9.\.
     380:	81 04 a7 04 cf 04 f7 04 21 05 4d 05 7a 05 a8 05     ........!.M.z...
     390:	d8 05 09 06 3c 06 71 06 a7 06 df 06 1a 07 56 07     ....<.q.......V.
     3a0:	94 07 d4 07 16 08 5a 08 a1 08 ea 08 35 09 83 09     ......Z.....5...
     3b0:	d3 09 26 0a 7c 0a d5 0a 30 0b 8f 0b f1 0b 56 0c     ..&.|...0.....V.
     3c0:	be 0c 2a 0d 99 0d 0c 0e 83 0e fd 0e 7c 0f ff 0f     ..*.........|...

000003d0 <ir_led_lut>:
     3d0:	00 01 02 03 05 06 07 04                             ........

000003d8 <scaleIRTable>:
     3d8:	00 00 17 25 2e 36 3c 41 46 49 4d 50 53 56 58 5b     ...%.6<AFIMPSVX[
     3e8:	5d 5f 61 62 64 66 67 69 6a 6c 6d 6e 6f 71 72 73     ]_abdfgijlmnoqrs
     3f8:	74 75 76 77 78 79 7a 7b 7b 7c 7d 7e 7f 7f 80 81     tuvwxyz{{|}~....
     408:	81 82 83 84 84 85 85 86 87 87 88 88 89 89 8a 8b     ................
     418:	8b 8c 8c 8d 8d 8e 8e 8f 8f 90 90 90 91 91 92 92     ................
     428:	93 93 93 94 94 95 95 95 96 96 97 97 97 98 98 98     ................
     438:	99 99 99 9a 9a 9a 9b 9b 9b 9c 9c 9c 9d 9d 9d 9e     ................
     448:	9e 9e 9e 9f 9f 9f a0 a0 a0 a0 a1 a1 a1 a1 a2 a2     ................
     458:	a2 a3 a3 a3 a3 a4 a4 a4 a4 a5 a5 a5 a5 a6 a6 a6     ................
     468:	a6 a6 a7 a7 a7 a7 a8 a8 a8 a8 a8 a9 a9 a9 a9 aa     ................
     478:	aa aa aa aa ab ab ab ab ab ac ac ac ac ac ad ad     ................
     488:	ad ad ad ad ae ae ae ae ae af af af af af af b0     ................
     498:	b0 b0 b0 b0 b1 b1 b1 b1 b1 b1 b2 b2 b2 b2 b2 b2     ................
     4a8:	b3 b3 b3 b3 b3 b3 b3 b4 b4 b4 b4 b4 b4 b5 b5 b5     ................
     4b8:	b5 b5 b5 b5 b6 b6 b6 b6 b6 b6 b6 b7 b7 b7 b7 b7     ................
     4c8:	b7 b7 b8 b8 b8 b8 b8 b8 b8 b9 b9 b9 b9 b9 b9 b9     ................
     4d8:	b9 ba ba ba ba ba ba ba ba bb bb bb bb bb bb bb     ................
     4e8:	bb bc bc bc bc bc bc bc bc bd bd bd bd bd bd bd     ................
     4f8:	bd be be be be be be be be be bf bf bf bf bf bf     ................
     508:	bf bf bf c0 c0 c0 c0 c0 c0 c0 c0 c0 c1 c1 c1 c1     ................
     518:	c1 c1 c1 c1 c1 c1 c2 c2 c2 c2 c2 c2 c2 c2 c2 c2     ................
     528:	c3 c3 c3 c3 c3 c3 c3 c3 c3 c3 c4 c4 c4 c4 c4 c4     ................
     538:	c4 c4 c4 c4 c4 c5 c5 c5 c5 c5 c5 c5 c5 c5 c5 c6     ................
     548:	c6 c6 c6 c6 c6 c6 c6 c6 c6 c6 c7 c7 c7 c7 c7 c7     ................
     558:	c7 c7 c7 c7 c7 c7 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8     ................
     568:	c8 c8 c9 c9 c9 c9 c9 c9 c9 c9 c9 c9 c9 c9 ca ca     ................
     578:	ca ca ca ca ca ca ca ca ca ca ca cb cb cb cb cb     ................
     588:	cb cb cb cb cb cb cb cc cc cc cc cc cc cc cc cc     ................
     598:	cc cc cc cc cc cd cd cd cd cd cd cd cd cd cd cd     ................
     5a8:	cd cd ce ce ce ce ce ce ce ce ce ce ce ce ce ce     ................
     5b8:	ce cf cf cf cf cf cf cf cf cf cf cf cf cf cf d0     ................
     5c8:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d1 d1     ................
     5d8:	d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d2 d2     ................
     5e8:	d2 d2 d2 d2 d2 d2 d2 d2 d2 d2 d2 d2 d2 d2 d3 d3     ................
     5f8:	d3 d3 d3 d3 d3 d3 d3 d3 d3 d3 d3 d3 d3 d3 d4 d4     ................
     608:	d4 d4 d4 d4 d4 d4 d4 d4 d4 d4 d4 d4 d4 d4 d4 d5     ................
     618:	d5 d5 d5 d5 d5 d5 d5 d5 d5 d5 d5 d5 d5 d5 d5 d5     ................
     628:	d6 d6 d6 d6 d6 d6 d6 d6 d6 d6 d6 d6 d6 d6 d6 d6     ................
     638:	d6 d6 d7 d7 d7 d7 d7 d7 d7 d7 d7 d7 d7 d7 d7 d7     ................
     648:	d7 d7 d7 d7 d7 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
     658:	d8 d8 d8 d8 d8 d8 d8 d8 d9 d9 d9 d9 d9 d9 d9 d9     ................
     668:	d9 d9 d9 d9 d9 d9 d9 d9 d9 d9 d9 d9 da da da da     ................
     678:	da da da da da da da da da da da da da da da da     ................
     688:	db db db db db db db db db db db db db db db db     ................
     698:	db db db db db dc dc dc dc dc dc dc dc dc dc dc     ................
     6a8:	dc dc dc dc dc dc dc dc dc dc dd dd dd dd dd dd     ................
     6b8:	dd dd dd dd dd dd dd dd dd dd dd dd dd dd dd dd     ................
     6c8:	de de de de de de de de de de de de de de de de     ................
     6d8:	de de de de de de de df df df df df df df df df     ................
     6e8:	df df df df df df df df df df df df df df df e0     ................
     6f8:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
     708:	e0 e0 e0 e0 e0 e0 e0 e1 e1 e1 e1 e1 e1 e1 e1 e1     ................
     718:	e1 e1 e1 e1 e1 e1 e1 e1 e1 e1 e1 e1 e1 e1 e1 e1     ................
     728:	e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2     ................
     738:	e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e3 e3 e3 e3 e3 e3     ................
     748:	e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3     ................
     758:	e3 e3 e3 e3 e4 e4 e4 e4 e4 e4 e4 e4 e4 e4 e4 e4     ................
     768:	e4 e4 e4 e4 e4 e4 e4 e4 e4 e4 e4 e4 e4 e4 e4 e5     ................
     778:	e5 e5 e5 e5 e5 e5 e5 e5 e5 e5 e5 e5 e5 e5 e5 e5     ................
     788:	e5 e5 e5 e5 e5 e5 e5 e5 e5 e5 e5 e5 e6 e6 e6 e6     ................
     798:	e6 e6 e6 e6 e6 e6 e6 e6 e6 e6 e6 e6 e6 e6 e6 e6     ................
     7a8:	e6 e6 e6 e6 e6 e6 e6 e6 e7 e7 e7 e7 e7 e7 e7 e7     ................
     7b8:	e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7     ................
     7c8:	e7 e7 e7 e7 e7 e7 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
     7d8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
     7e8:	e8 e8 e8 e8 e8 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9     ................
     7f8:	e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9     ................
     808:	e9 e9 e9 e9 e9 ea ea ea ea ea ea ea ea ea ea ea     ................
     818:	ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea     ................
     828:	ea ea ea ea ea eb eb eb eb eb eb eb eb eb eb eb     ................
     838:	eb eb eb eb eb eb eb eb eb eb eb eb eb eb eb eb     ................
     848:	eb eb eb eb eb eb eb ec ec ec ec ec ec ec ec ec     ................
     858:	ec ec ec ec ec ec ec ec ec ec ec ec ec ec ec ec     ................
     868:	ec ec ec ec ec ec ec ec ec ec ed ed ed ed ed ed     ................
     878:	ed ed ed ed ed ed ed ed ed ed ed ed ed ed ed ed     ................
     888:	ed ed ed ed ed ed ed ed ed ed ed ed ed ed ee ee     ................
     898:	ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee     ................
     8a8:	ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee     ................
     8b8:	ee ee ef ef ef ef ef ef ef ef ef ef ef ef ef ef     ................
     8c8:	ef ef ef ef ef ef ef ef ef ef ef ef ef ef ef ef     ................
     8d8:	ef ef ef ef ef ef ef ef f0 f0 f0 f0 f0 f0 f0 f0     ................
     8e8:	f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
     8f8:	f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f1     ................
     908:	f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1     ................
     918:	f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1     ................
     928:	f1 f1 f1 f1 f1 f1 f1 f1 f2 f2 f2 f2 f2 f2 f2 f2     ................
     938:	f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2     ................
     948:	f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2     ................
     958:	f2 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3     ................
     968:	f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3     ................
     978:	f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f4 f4 f4 f4     ................
     988:	f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4     ................
     998:	f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4     ................
     9a8:	f4 f4 f4 f4 f4 f4 f4 f4 f5 f5 f5 f5 f5 f5 f5 f5     ................
     9b8:	f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5     ................
     9c8:	f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5     ................
     9d8:	f5 f5 f5 f5 f5 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     9e8:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     9f8:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     a08:	f6 f6 f6 f6 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     a18:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     a28:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     a38:	f7 f7 f7 f7 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
     a48:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
     a58:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
     a68:	f8 f8 f8 f8 f8 f8 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9     ................
     a78:	f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9     ................
     a88:	f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9     ................
     a98:	f9 f9 f9 f9 f9 f9 f9 f9 f9 fa fa fa fa fa fa fa     ................
     aa8:	fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa     ................
     ab8:	fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa     ................
     ac8:	fa fa fa fa fa fa fa fa fa fa fa fa fa fa fb fb     ................
     ad8:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
     ae8:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
     af8:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
     b08:	fb fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc     ................
     b18:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc     ................
     b28:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc     ................
     b38:	fc fc fc fc fc fc fc fc fc fc fc fc fd fd fd fd     ................
     b48:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
     b58:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
     b68:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
     b78:	fd fd fd fd fd fd fe fe fe fe fe fe fe fe fe fe     ................
     b88:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
     b98:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
     ba8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
     bb8:	fe ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     bc8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

00000bd8 <__ctors_end>:
     bd8:	11 24       	eor	r1, r1
     bda:	1f be       	out	0x3f, r1	; 63
     bdc:	cf ef       	ldi	r28, 0xFF	; 255
     bde:	df e2       	ldi	r29, 0x2F	; 47
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	cd bf       	out	0x3d, r28	; 61

00000be4 <__do_clear_bss>:
     be4:	20 e2       	ldi	r18, 0x20	; 32
     be6:	a0 e0       	ldi	r26, 0x00	; 0
     be8:	b0 e2       	ldi	r27, 0x20	; 32
     bea:	01 c0       	rjmp	.+2      	; 0xbee <.do_clear_bss_start>

00000bec <.do_clear_bss_loop>:
     bec:	1d 92       	st	X+, r1

00000bee <.do_clear_bss_start>:
     bee:	ab 34       	cpi	r26, 0x4B	; 75
     bf0:	b2 07       	cpc	r27, r18
     bf2:	e1 f7       	brne	.-8      	; 0xbec <.do_clear_bss_loop>
     bf4:	0e 94 75 06 	call	0xcea	; 0xcea <main>
     bf8:	0c 94 c1 0e 	jmp	0x1d82	; 0x1d82 <_exit>

00000bfc <__bad_interrupt>:
     bfc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000c00 <init_enable_32mhz>:
	}Command_Buffer_t;



void init_enable_32mhz(void){
		OSC.CTRL |= OSC_RC32MEN_bm; //Enable 32 Mhz oscillator
     c00:	e0 e5       	ldi	r30, 0x50	; 80
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	82 60       	ori	r24, 0x02	; 2
     c08:	80 83       	st	Z, r24
		while(!(OSC.STATUS & OSC_RC32MRDY_bm)); //Wait until 32 Mhz oscillator is ready
     c0a:	81 81       	ldd	r24, Z+1	; 0x01
     c0c:	81 ff       	sbrs	r24, 1
     c0e:	fd cf       	rjmp	.-6      	; 0xc0a <init_enable_32mhz+0xa>
		CCP = CCP_IOREG_gc; //Disable configuration change protection for four cycles
     c10:	88 ed       	ldi	r24, 0xD8	; 216
     c12:	84 bf       	out	0x34, r24	; 52
		CLK.CTRL = CLK_SCLKSEL_RC32M_gc; //Set 32Mhz as main clock
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	80 93 40 00 	sts	0x0040, r24
		OSC.CTRL &= ~OSC_RC2MEN_bm; //Disable 2 Mhz oscillator
     c1a:	e0 e5       	ldi	r30, 0x50	; 80
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	8e 7f       	andi	r24, 0xFE	; 254
     c22:	80 83       	st	Z, r24
     c24:	08 95       	ret

00000c26 <init_usart>:
}

void init_usart(void){
	// Output TX
	PORTD.DIRSET = PIN3_bm;
     c26:	e0 e6       	ldi	r30, 0x60	; 96
     c28:	f6 e0       	ldi	r31, 0x06	; 6
     c2a:	88 e0       	ldi	r24, 0x08	; 8
     c2c:	81 83       	std	Z+1, r24	; 0x01
	// Input RX
	PORTD.DIRCLR = PIN2_bm;
     c2e:	84 e0       	ldi	r24, 0x04	; 4
     c30:	82 83       	std	Z+2, r24	; 0x02
	
	// init Buffers using USARTD0
	USART_InterruptDriver_Initialize(&USART_data, &USARTD0, USART_DREINTLVL_LO_gc);
     c32:	41 e0       	ldi	r20, 0x01	; 1
     c34:	60 ea       	ldi	r22, 0xA0	; 160
     c36:	79 e0       	ldi	r23, 0x09	; 9
     c38:	8f e1       	ldi	r24, 0x1F	; 31
     c3a:	90 e2       	ldi	r25, 0x20	; 32
     c3c:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <USART_InterruptDriver_Initialize>
	
	/* USARTD0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(USART_data.usart, USART_CHSIZE_8BIT_gc,
     c40:	e0 91 1f 20 	lds	r30, 0x201F
     c44:	f0 91 20 20 	lds	r31, 0x2020
     c48:	83 e0       	ldi	r24, 0x03	; 3
     c4a:	85 83       	std	Z+5, r24	; 0x05
                     USART_PMODE_DISABLED_gc, false);

	/* Enable RXC interrupt. */
	USART_RxdInterruptLevel_Set(USART_data.usart, USART_RXCINTLVL_LO_gc);
     c4c:	83 81       	ldd	r24, Z+3	; 0x03
     c4e:	8f 7c       	andi	r24, 0xCF	; 207
     c50:	80 61       	ori	r24, 0x10	; 16
     c52:	83 83       	std	Z+3, r24	; 0x03

	/* Set Baudrate to baudrate bps:
	 * Do not use the baudrate scale factor (factor = 0)
	 * Baudrate ((I/O clock frequency)/(2^(ScaleFactor)*16*Baudrate))-1
	 */	
	USART_Baudrate_Set(&USARTD0, ((F_CPU/(16*USART_BAUDRATE))-1) , 0);
     c54:	a0 ea       	ldi	r26, 0xA0	; 160
     c56:	b9 e0       	ldi	r27, 0x09	; 9
     c58:	83 e3       	ldi	r24, 0x33	; 51
     c5a:	16 96       	adiw	r26, 0x06	; 6
     c5c:	8c 93       	st	X, r24
     c5e:	16 97       	sbiw	r26, 0x06	; 6
     c60:	17 96       	adiw	r26, 0x07	; 7
     c62:	1c 92       	st	X, r1
	
	//USART_Baudrate_Set(&USARTD0, 1/(16*((F_CPU/baudrate)-1)) , 0);

	/* Enable both RX and TX. */
	USART_Rx_Enable(USART_data.usart);
     c64:	84 81       	ldd	r24, Z+4	; 0x04
     c66:	80 61       	ori	r24, 0x10	; 16
     c68:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_data.usart);
     c6a:	84 81       	ldd	r24, Z+4	; 0x04
     c6c:	88 60       	ori	r24, 0x08	; 8
     c6e:	84 83       	std	Z+4, r24	; 0x04
     c70:	08 95       	ret

00000c72 <init_rgb_led>:
}


void init_rgb_led(void){
	PORTF.DIRSET = PIN3_bm | PIN4_bm | PIN5_bm; //LED multiplexer Pins as output
     c72:	88 e3       	ldi	r24, 0x38	; 56
     c74:	e0 ea       	ldi	r30, 0xA0	; 160
     c76:	f6 e0       	ldi	r31, 0x06	; 6
     c78:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm; //Set LED PWM as output
     c7a:	87 e0       	ldi	r24, 0x07	; 7
     c7c:	e0 e8       	ldi	r30, 0x80	; 128
     c7e:	f6 e0       	ldi	r31, 0x06	; 6
     c80:	81 83       	std	Z+1, r24	; 0x01
	//only for inverted driver
	//PORTE.PIN0CTRL = PORT_INVEN_bm;
	//PORTE.PIN1CTRL = PORT_INVEN_bm;
	//PORTE.PIN2CTRL = PORT_INVEN_bm;

	TCE0.CTRLB = PWM_RED_ENABLE_gc|PWM_GREEN_ENABLE_gc|PWM_BLUE_ENABLE_gc| TC_WGMODE_SS_gc; //enable pwm output, Single slope pwm
     c82:	e0 e0       	ldi	r30, 0x00	; 0
     c84:	fa e0       	ldi	r31, 0x0A	; 10
     c86:	83 e7       	ldi	r24, 0x73	; 115
     c88:	81 83       	std	Z+1, r24	; 0x01
	
	TCE0.PER = 0xfff; //12 Bit resolution per period
     c8a:	8f ef       	ldi	r24, 0xFF	; 255
     c8c:	9f e0       	ldi	r25, 0x0F	; 15
     c8e:	86 a3       	std	Z+38, r24	; 0x26
     c90:	97 a3       	std	Z+39, r25	; 0x27
	
	//Enable overflow interrupt for Timer 0 on Port C to swich rgb LED
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	86 83       	std	Z+6, r24	; 0x06
     c96:	08 95       	ret

00000c98 <set_beepmotor_speed>:
*	
*	\param motor motor that shall receive ne speed value
*	\param speed speed for the motor. (-128 to 127)
*/

void set_beepmotor_speed(motor_t motor, int8_t speed){
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	c8 2f       	mov	r28, r24
     c9e:	d6 2f       	mov	r29, r22
	motor_op_mode_t op = motor_stop;
	// calculate rotation direction
	if (speed<0){
     ca0:	66 23       	and	r22, r22
     ca2:	5c f4       	brge	.+22     	; 0xcba <set_beepmotor_speed+0x22>
		if(speed == INT8_MIN){
     ca4:	60 38       	cpi	r22, 0x80	; 128
     ca6:	11 f0       	breq	.+4      	; 0xcac <set_beepmotor_speed+0x14>
			speed = INT8_MAX;
		}else{
			speed = -speed;
     ca8:	d1 95       	neg	r29
     caa:	01 c0       	rjmp	.+2      	; 0xcae <set_beepmotor_speed+0x16>
void set_beepmotor_speed(motor_t motor, int8_t speed){
	motor_op_mode_t op = motor_stop;
	// calculate rotation direction
	if (speed<0){
		if(speed == INT8_MIN){
			speed = INT8_MAX;
     cac:	df e7       	ldi	r29, 0x7F	; 127
		}else{
			speed = -speed;
		}		
		if(motor == motor_l){
     cae:	c4 30       	cpi	r28, 0x04	; 4
     cb0:	51 f0       	breq	.+20     	; 0xcc6 <set_beepmotor_speed+0x2e>
			op = motor_cw;
		}else if(motor == motor_r){
     cb2:	c6 30       	cpi	r28, 0x06	; 6
     cb4:	51 f0       	breq	.+20     	; 0xcca <set_beepmotor_speed+0x32>
*	\param motor motor that shall receive ne speed value
*	\param speed speed for the motor. (-128 to 127)
*/

void set_beepmotor_speed(motor_t motor, int8_t speed){
	motor_op_mode_t op = motor_stop;
     cb6:	63 e0       	ldi	r22, 0x03	; 3
     cb8:	0d c0       	rjmp	.+26     	; 0xcd4 <set_beepmotor_speed+0x3c>
			op = motor_cw;
		}else if(motor == motor_r){
			op = motor_ccw;
		}
	}else{
		if(motor == motor_l){
     cba:	84 30       	cpi	r24, 0x04	; 4
     cbc:	41 f0       	breq	.+16     	; 0xcce <set_beepmotor_speed+0x36>
			op = motor_ccw;
		}else if(motor == motor_r){
     cbe:	86 30       	cpi	r24, 0x06	; 6
     cc0:	41 f0       	breq	.+16     	; 0xcd2 <set_beepmotor_speed+0x3a>
*	\param motor motor that shall receive ne speed value
*	\param speed speed for the motor. (-128 to 127)
*/

void set_beepmotor_speed(motor_t motor, int8_t speed){
	motor_op_mode_t op = motor_stop;
     cc2:	63 e0       	ldi	r22, 0x03	; 3
     cc4:	07 c0       	rjmp	.+14     	; 0xcd4 <set_beepmotor_speed+0x3c>
			speed = INT8_MAX;
		}else{
			speed = -speed;
		}		
		if(motor == motor_l){
			op = motor_cw;
     cc6:	61 e0       	ldi	r22, 0x01	; 1
     cc8:	05 c0       	rjmp	.+10     	; 0xcd4 <set_beepmotor_speed+0x3c>
		}else if(motor == motor_r){
			op = motor_ccw;
     cca:	62 e0       	ldi	r22, 0x02	; 2
     ccc:	03 c0       	rjmp	.+6      	; 0xcd4 <set_beepmotor_speed+0x3c>
		}
	}else{
		if(motor == motor_l){
			op = motor_ccw;
     cce:	62 e0       	ldi	r22, 0x02	; 2
     cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <set_beepmotor_speed+0x3c>
		}else if(motor == motor_r){
			op = motor_cw;
     cd2:	61 e0       	ldi	r22, 0x01	; 1
		}
	}
	//scale to uint8 value
	uint8_t new_speed = speed * (UINT8_MAX / INT8_MAX);
	//activate motor
	set_motor_operation_mode(motor, op);
     cd4:	8c 2f       	mov	r24, r28
     cd6:	0e 94 91 0b 	call	0x1722	; 0x1722 <set_motor_operation_mode>
		}else if(motor == motor_r){
			op = motor_cw;
		}
	}
	//scale to uint8 value
	uint8_t new_speed = speed * (UINT8_MAX / INT8_MAX);
     cda:	6d 2f       	mov	r22, r29
     cdc:	66 0f       	add	r22, r22
	//activate motor
	set_motor_operation_mode(motor, op);
	set_motor_speed(motor, new_speed);
     cde:	8c 2f       	mov	r24, r28
     ce0:	0e 94 bc 0b 	call	0x1778	; 0x1778 <set_motor_speed>
	
}
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	08 95       	ret

00000cea <main>:
	} else{
		return (int) in;
	}
}

int main(void){
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	65 97       	sbiw	r28, 0x15	; 21
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	de bf       	out	0x3e, r29	; 62
	
	init_enable_32mhz();
     cf8:	0e 94 00 06 	call	0xc00	; 0xc00 <init_enable_32mhz>
	init_usart();
     cfc:	0e 94 13 06 	call	0xc26	; 0xc26 <init_usart>
	init_motor();
     d00:	0e 94 a5 0b 	call	0x174a	; 0x174a <init_motor>
	init_ir_driver();
     d04:	0e 94 66 0a 	call	0x14cc	; 0x14cc <init_ir_driver>
	
	init_rgb_led();
     d08:	0e 94 39 06 	call	0xc72	; 0xc72 <init_rgb_led>

inline void enable_rgb_leds(bool enable);
void enable_rgb_leds(bool enable){
	if (enable){
		//reset counter
		TCE0.CNT = 0x00;
     d0c:	e0 e0       	ldi	r30, 0x00	; 0
     d0e:	fa e0       	ldi	r31, 0x0A	; 10
     d10:	10 a2       	std	Z+32, r1	; 0x20
     d12:	11 a2       	std	Z+33, r1	; 0x21
		//restart counter
		TCE0.CTRLA = TC_CLKSEL_DIV1_gc;
     d14:	11 e0       	ldi	r17, 0x01	; 1
     d16:	10 83       	st	Z, r17
	
	init_rgb_led();
	enable_rgb_leds(true);

	/* Enable PMIC interrupt level low. */
	PMIC.CTRL |= PMIC_LOLVLEX_bm;
     d18:	e0 ea       	ldi	r30, 0xA0	; 160
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	82 81       	ldd	r24, Z+2	; 0x02
     d1e:	81 60       	ori	r24, 0x01	; 1
     d20:	82 83       	std	Z+2, r24	; 0x02

	/* Enable global interrupts. */
	sei();
     d22:	78 94       	sei

	// set some colors
	myColors[0].red = 0xff;
     d24:	8f ef       	ldi	r24, 0xFF	; 255
     d26:	80 93 07 20 	sts	0x2007, r24
	myColors[0].green = 0x00;
     d2a:	10 92 08 20 	sts	0x2008, r1
	myColors[0].blue = 0x00;
     d2e:	10 92 09 20 	sts	0x2009, r1
	
	myColors[1].red = 0xFF;
     d32:	80 93 0a 20 	sts	0x200A, r24
	myColors[1].green = 0xFF;
     d36:	80 93 0b 20 	sts	0x200B, r24
	myColors[1].blue = 0xFF;	
     d3a:	80 93 0c 20 	sts	0x200C, r24
	
	myColors[2].red = 0x7F;
     d3e:	9f e7       	ldi	r25, 0x7F	; 127
     d40:	90 93 0d 20 	sts	0x200D, r25
	myColors[2].green = 0x7F;
     d44:	90 93 0e 20 	sts	0x200E, r25
	myColors[2].blue = 0x00;
     d48:	10 92 0f 20 	sts	0x200F, r1
	
	myColors[3].red = 0x00;
     d4c:	10 92 10 20 	sts	0x2010, r1
	myColors[3].green = 0x00;
     d50:	10 92 11 20 	sts	0x2011, r1
	myColors[3].blue = 0xFF;
     d54:	80 93 12 20 	sts	0x2012, r24
	
	myColors[4].red = 0x00;
     d58:	10 92 13 20 	sts	0x2013, r1
	myColors[4].green = 0x00;
     d5c:	10 92 14 20 	sts	0x2014, r1
	myColors[4].blue = 0x00;
     d60:	10 92 15 20 	sts	0x2015, r1
	
	myColors[5].red = 0x00;
     d64:	10 92 16 20 	sts	0x2016, r1
	myColors[5].green = 0x00;
     d68:	10 92 17 20 	sts	0x2017, r1
	myColors[5].blue = 0x00;
     d6c:	10 92 18 20 	sts	0x2018, r1
	
	myColors[6].red = 0x00;
     d70:	10 92 19 20 	sts	0x2019, r1
	myColors[6].green = 0x00;
     d74:	10 92 1a 20 	sts	0x201A, r1
	myColors[6].blue = 0x00;
     d78:	10 92 1b 20 	sts	0x201B, r1
	
	myColors[7].red = 0x00;
     d7c:	10 92 1c 20 	sts	0x201C, r1
	myColors[7].green = 0x00;
     d80:	10 92 1d 20 	sts	0x201D, r1
	myColors[7].blue = 0x00;
     d84:	10 92 1e 20 	sts	0x201E, r1
	
		
	int8_t led_swich_workaround = 0;
	
	
	set_motor_on(true);
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	0e 94 cf 0b 	call	0x179e	; 0x179e <set_motor_on>
	next_command.data_missing =- 1;
	next_command.head = 0;
	next_command.command = 0;
	next_command.device = 0;
	
	set_motor_on(true);
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	0e 94 cf 0b 	call	0x179e	; 0x179e <set_motor_on>
	set_beepmotor_speed(motor_l, 0);
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	84 e0       	ldi	r24, 0x04	; 4
     d98:	0e 94 4c 06 	call	0xc98	; 0xc98 <set_beepmotor_speed>
	set_beepmotor_speed(motor_r, 0);	
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	86 e0       	ldi	r24, 0x06	; 6
     da0:	0e 94 4c 06 	call	0xc98	; 0xc98 <set_beepmotor_speed>
	
	//set IO for color sensors
	PORTD.DIRSET = PIN1_bm|PIN4_bm|PIN5_bm|PIN6_bm|PIN7_bm;
     da4:	e0 e6       	ldi	r30, 0x60	; 96
     da6:	f6 e0       	ldi	r31, 0x06	; 6
     da8:	82 ef       	ldi	r24, 0xF2	; 242
     daa:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN0_bm;
     dac:	12 83       	std	Z+2, r17	; 0x02
	PORTE.DIRSET = PIN3_bm;
     dae:	e0 e8       	ldi	r30, 0x80	; 128
     db0:	f6 e0       	ldi	r31, 0x06	; 6
     db2:	88 e0       	ldi	r24, 0x08	; 8
     db4:	81 83       	std	Z+1, r24	; 0x01
	PORTE.OUTSET = PIN3_bm;
     db6:	85 83       	std	Z+5, r24	; 0x05

	
	xmega_freq_cntr_init();				// Initializes XMEGA timer/counters and Event System
     db8:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <xmega_freq_cntr_init>
	xmega_tcca_clk_freq_sel(TC_CLKSEL_DIV8_gc);
     dbc:	84 e0       	ldi	r24, 0x04	; 4
     dbe:	0e 94 4d 0c 	call	0x189a	; 0x189a <xmega_tcca_clk_freq_sel>

	Command_Buffer_t next_command;
	next_command.data_missing =- 1;
	next_command.head = 0;
	next_command.command = 0;
	next_command.device = 0;
     dc2:	1d 8a       	std	Y+21, r1	; 0x15
	set_motor_on(true);

	Command_Buffer_t next_command;
	next_command.data_missing =- 1;
	next_command.head = 0;
	next_command.command = 0;
     dc4:	1b 8a       	std	Y+19, r1	; 0x13
	
	set_motor_on(true);

	Command_Buffer_t next_command;
	next_command.data_missing =- 1;
	next_command.head = 0;
     dc6:	1c 8a       	std	Y+20, r1	; 0x14
	
	
	set_motor_on(true);

	Command_Buffer_t next_command;
	next_command.data_missing =- 1;
     dc8:	2f ef       	ldi	r18, 0xFF	; 255
     dca:	2a 8b       	std	Y+18, r18	; 0x12


    while(1){
		//temp
		//enable audio amplifier
		PORTF.DIRSET = PIN6_bm;
     dcc:	00 e4       	ldi	r16, 0x40	; 64
			{ 0.0970121,  -0.0324089,  -0.0426333},
			{-0.0618194,   0.3345633,  -0.1681146},
			{-0.0088497,  -0.2017551,   0.3783317}};

		//red
		PORTD.OUTCLR = PIN5_bm | PIN6_bm;
     dce:	0f 2e       	mov	r0, r31
     dd0:	f0 e6       	ldi	r31, 0x60	; 96
     dd2:	2f 2e       	mov	r2, r31
     dd4:	f6 e0       	ldi	r31, 0x06	; 6
     dd6:	3f 2e       	mov	r3, r31
     dd8:	f0 2d       	mov	r31, r0
     dda:	10 e6       	ldi	r17, 0x60	; 96
     ddc:	19 8b       	std	Y+17, r17	; 0x11
     dde:	17 c0       	rjmp	.+46     	; 0xe0e <main+0x124>
					next_command.device = data & beep_dev_mask;
					next_command.command = data & beep_command_mask;
					//get number of missing data to execute command
					if(next_command.device == BEEP_DEV_MOTORS){
						if(next_command.command == BEEP_COM_LEFT_MOTOR){
							next_command.data_missing = 1;
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	8a 8b       	std	Y+18, r24	; 0x12
     de4:	14 c0       	rjmp	.+40     	; 0xe0e <main+0x124>
						}else if (next_command.command == BEEP_COM_RIGHT_MOTOR){
							next_command.data_missing = 1;
     de6:	91 e0       	ldi	r25, 0x01	; 1
     de8:	9a 8b       	std	Y+18, r25	; 0x12
     dea:	11 c0       	rjmp	.+34     	; 0xe0e <main+0x124>
						}else if (next_command.command == BEEP_COM_BOTH_MOTORS){
							next_command.data_missing = 2;
     dec:	e2 e0       	ldi	r30, 0x02	; 2
     dee:	ea 8b       	std	Y+18, r30	; 0x12
     df0:	0e c0       	rjmp	.+28     	; 0xe0e <main+0x124>
						if(next_command.command == BEEP_COM_LEDS_OFF){
							enable_rgb_leds(false);
						}else if(next_command.command == BEEP_COM_LEDS_ON){
							enable_rgb_leds(true);
						}else if(next_command.command < 8){
							next_command.data_missing = 3;
     df2:	f3 e0       	ldi	r31, 0x03	; 3
     df4:	fa 8b       	std	Y+18, r31	; 0x12
     df6:	0b c0       	rjmp	.+22     	; 0xe0e <main+0x124>
								myColors[next_command.command].blue = next_command.data[2];
							}
						}
					
						//command executed, prepare for new command
						next_command.head = 0;
     df8:	1c 8a       	std	Y+20, r1	; 0x14
						next_command.data_missing =- 1;
     dfa:	2f ef       	ldi	r18, 0xFF	; 255
     dfc:	2a 8b       	std	Y+18, r18	; 0x12
     dfe:	07 c0       	rjmp	.+14     	; 0xe0e <main+0x124>
								myColors[next_command.command].blue = next_command.data[2];
							}
						}
					
						//command executed, prepare for new command
						next_command.head = 0;
     e00:	1c 8a       	std	Y+20, r1	; 0x14
						next_command.data_missing =- 1;
     e02:	8f ef       	ldi	r24, 0xFF	; 255
     e04:	8a 8b       	std	Y+18, r24	; 0x12
     e06:	03 c0       	rjmp	.+6      	; 0xe0e <main+0x124>
								myColors[next_command.command].blue = next_command.data[2];
							}
						}
					
						//command executed, prepare for new command
						next_command.head = 0;
     e08:	1c 8a       	std	Y+20, r1	; 0x14
						next_command.data_missing =- 1;
     e0a:	9f ef       	ldi	r25, 0xFF	; 255
     e0c:	9a 8b       	std	Y+18, r25	; 0x12


    while(1){
		//temp
		//enable audio amplifier
		PORTF.DIRSET = PIN6_bm;
     e0e:	00 93 a1 06 	sts	0x06A1, r16
		PORTF.OUTCLR = PIN6_bm;
     e12:	00 93 a6 06 	sts	0x06A6, r16
			{ 0.0970121,  -0.0324089,  -0.0426333},
			{-0.0618194,   0.3345633,  -0.1681146},
			{-0.0088497,  -0.2017551,   0.3783317}};

		//red
		PORTD.OUTCLR = PIN5_bm | PIN6_bm;
     e16:	29 89       	ldd	r18, Y+17	; 0x11
     e18:	f1 01       	movw	r30, r2
     e1a:	26 83       	std	Z+6, r18	; 0x06
		PORTD.OUTSET = 0;
     e1c:	15 82       	std	Z+5, r1	; 0x05
		xmega_freq_cntr_start_meas();
     e1e:	0e 94 5f 0c 	call	0x18be	; 0x18be <xmega_freq_cntr_start_meas>
		while(xmega_get_result() ==0){}
     e22:	0e 94 85 0c 	call	0x190a	; 0x190a <xmega_get_result>
     e26:	89 2b       	or	r24, r25
     e28:	e1 f3       	breq	.-8      	; 0xe22 <main+0x138>
		uint16_t red_raw = xmega_get_result(); // result available here
     e2a:	0e 94 85 0c 	call	0x190a	; 0x190a <xmega_get_result>
     e2e:	6c 01       	movw	r12, r24
		xmega_freq_cntr_clr_result();// clears result coming from driver
     e30:	0e 94 8a 0c 	call	0x1914	; 0x1914 <xmega_freq_cntr_clr_result>

		//green
		PORTD.OUTCLR = PIN5_bm | PIN6_bm;
     e34:	f1 01       	movw	r30, r2
     e36:	16 83       	std	Z+6, r17	; 0x06
		PORTD.OUTSET = PIN5_bm | PIN6_bm;
     e38:	15 83       	std	Z+5, r17	; 0x05
		xmega_freq_cntr_start_meas();
     e3a:	0e 94 5f 0c 	call	0x18be	; 0x18be <xmega_freq_cntr_start_meas>
		while(xmega_get_result() ==0){}
     e3e:	0e 94 85 0c 	call	0x190a	; 0x190a <xmega_get_result>
     e42:	89 2b       	or	r24, r25
     e44:	e1 f3       	breq	.-8      	; 0xe3e <main+0x154>
		uint16_t green_raw = xmega_get_result(); // result available here
     e46:	0e 94 85 0c 	call	0x190a	; 0x190a <xmega_get_result>
     e4a:	7c 01       	movw	r14, r24
		xmega_freq_cntr_clr_result();// clears result coming from driver
     e4c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <xmega_freq_cntr_clr_result>

		//blue
		PORTD.OUTCLR = PIN5_bm | PIN6_bm;
     e50:	f1 01       	movw	r30, r2
     e52:	16 83       	std	Z+6, r17	; 0x06
		PORTD.OUTSET = PIN6_bm;
     e54:	20 e4       	ldi	r18, 0x40	; 64
     e56:	25 83       	std	Z+5, r18	; 0x05
		xmega_freq_cntr_start_meas();
     e58:	0e 94 5f 0c 	call	0x18be	; 0x18be <xmega_freq_cntr_start_meas>
		while(xmega_get_result() ==0){}
     e5c:	0e 94 85 0c 	call	0x190a	; 0x190a <xmega_get_result>
     e60:	89 2b       	or	r24, r25
     e62:	e1 f3       	breq	.-8      	; 0xe5c <main+0x172>
		uint16_t blue_raw = xmega_get_result(); // result available here
     e64:	0e 94 85 0c 	call	0x190a	; 0x190a <xmega_get_result>
     e68:	3c 01       	movw	r6, r24
		xmega_freq_cntr_clr_result();// clears result coming from driver
     e6a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <xmega_freq_cntr_clr_result>

		//apply color correction matrix
		float fred = round(
			red_raw*color_correction_matrix[0][0]+
     e6e:	b6 01       	movw	r22, r12
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <__floatunsisf>
     e78:	4b 01       	movw	r8, r22
     e7a:	5c 01       	movw	r10, r24
			green_raw*color_correction_matrix[1][0]+
     e7c:	b7 01       	movw	r22, r14
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <__floatunsisf>
     e86:	6b 01       	movw	r12, r22
     e88:	7c 01       	movw	r14, r24
			blue_raw*color_correction_matrix[2][0]);
     e8a:	b3 01       	movw	r22, r6
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <__floatunsisf>
     e94:	69 87       	std	Y+9, r22	; 0x09
     e96:	7a 87       	std	Y+10, r23	; 0x0a
     e98:	8b 87       	std	Y+11, r24	; 0x0b
     e9a:	9c 87       	std	Y+12, r25	; 0x0c
		uint16_t blue_raw = xmega_get_result(); // result available here
		xmega_freq_cntr_clr_result();// clears result coming from driver

		//apply color correction matrix
		float fred = round(
			red_raw*color_correction_matrix[0][0]+
     e9c:	28 e4       	ldi	r18, 0x48	; 72
     e9e:	3e ea       	ldi	r19, 0xAE	; 174
     ea0:	46 ec       	ldi	r20, 0xC6	; 198
     ea2:	5d e3       	ldi	r21, 0x3D	; 61
     ea4:	c5 01       	movw	r24, r10
     ea6:	b4 01       	movw	r22, r8
     ea8:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     eac:	2b 01       	movw	r4, r22
     eae:	3c 01       	movw	r6, r24
			green_raw*color_correction_matrix[1][0]+
     eb0:	27 e5       	ldi	r18, 0x57	; 87
     eb2:	36 e3       	ldi	r19, 0x36	; 54
     eb4:	4d e7       	ldi	r20, 0x7D	; 125
     eb6:	5d eb       	ldi	r21, 0xBD	; 189
     eb8:	c7 01       	movw	r24, r14
     eba:	b6 01       	movw	r22, r12
     ebc:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     ec0:	9b 01       	movw	r18, r22
     ec2:	ac 01       	movw	r20, r24
		uint16_t blue_raw = xmega_get_result(); // result available here
		xmega_freq_cntr_clr_result();// clears result coming from driver

		//apply color correction matrix
		float fred = round(
			red_raw*color_correction_matrix[0][0]+
     ec4:	c3 01       	movw	r24, r6
     ec6:	b2 01       	movw	r22, r4
     ec8:	0e 94 c6 0c 	call	0x198c	; 0x198c <__addsf3>
     ecc:	2b 01       	movw	r4, r22
     ece:	3c 01       	movw	r6, r24
			green_raw*color_correction_matrix[1][0]+
			blue_raw*color_correction_matrix[2][0]);
     ed0:	25 e5       	ldi	r18, 0x55	; 85
     ed2:	3e ef       	ldi	r19, 0xFE	; 254
     ed4:	40 e1       	ldi	r20, 0x10	; 16
     ed6:	5c eb       	ldi	r21, 0xBC	; 188
     ed8:	69 85       	ldd	r22, Y+9	; 0x09
     eda:	7a 85       	ldd	r23, Y+10	; 0x0a
     edc:	8b 85       	ldd	r24, Y+11	; 0x0b
     ede:	9c 85       	ldd	r25, Y+12	; 0x0c
     ee0:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     ee4:	9b 01       	movw	r18, r22
     ee6:	ac 01       	movw	r20, r24
		xmega_freq_cntr_clr_result();// clears result coming from driver

		//apply color correction matrix
		float fred = round(
			red_raw*color_correction_matrix[0][0]+
			green_raw*color_correction_matrix[1][0]+
     ee8:	c3 01       	movw	r24, r6
     eea:	b2 01       	movw	r22, r4
     eec:	0e 94 c6 0c 	call	0x198c	; 0x198c <__addsf3>
		while(xmega_get_result() ==0){}
		uint16_t blue_raw = xmega_get_result(); // result available here
		xmega_freq_cntr_clr_result();// clears result coming from driver

		//apply color correction matrix
		float fred = round(
     ef0:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <round>
     ef4:	6d 87       	std	Y+13, r22	; 0x0d
     ef6:	7e 87       	std	Y+14, r23	; 0x0e
     ef8:	8f 87       	std	Y+15, r24	; 0x0f
     efa:	98 8b       	std	Y+16, r25	; 0x10
			red_raw*color_correction_matrix[0][0]+
			green_raw*color_correction_matrix[1][0]+
			blue_raw*color_correction_matrix[2][0]);
		float fgreen = round(
			red_raw*color_correction_matrix[0][1]+
     efc:	22 e3       	ldi	r18, 0x32	; 50
     efe:	3f eb       	ldi	r19, 0xBF	; 191
     f00:	44 e0       	ldi	r20, 0x04	; 4
     f02:	5d eb       	ldi	r21, 0xBD	; 189
     f04:	c5 01       	movw	r24, r10
     f06:	b4 01       	movw	r22, r8
     f08:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     f0c:	2b 01       	movw	r4, r22
     f0e:	3c 01       	movw	r6, r24
			green_raw*color_correction_matrix[1][1]+
     f10:	21 ee       	ldi	r18, 0xE1	; 225
     f12:	3b e4       	ldi	r19, 0x4B	; 75
     f14:	4b ea       	ldi	r20, 0xAB	; 171
     f16:	5e e3       	ldi	r21, 0x3E	; 62
     f18:	c7 01       	movw	r24, r14
     f1a:	b6 01       	movw	r22, r12
     f1c:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     f20:	9b 01       	movw	r18, r22
     f22:	ac 01       	movw	r20, r24
		float fred = round(
			red_raw*color_correction_matrix[0][0]+
			green_raw*color_correction_matrix[1][0]+
			blue_raw*color_correction_matrix[2][0]);
		float fgreen = round(
			red_raw*color_correction_matrix[0][1]+
     f24:	c3 01       	movw	r24, r6
     f26:	b2 01       	movw	r22, r4
     f28:	0e 94 c6 0c 	call	0x198c	; 0x198c <__addsf3>
     f2c:	2b 01       	movw	r4, r22
     f2e:	3c 01       	movw	r6, r24
			green_raw*color_correction_matrix[1][1]+
			blue_raw*color_correction_matrix[2][1]);
     f30:	24 ee       	ldi	r18, 0xE4	; 228
     f32:	38 e9       	ldi	r19, 0x98	; 152
     f34:	4e e4       	ldi	r20, 0x4E	; 78
     f36:	5e eb       	ldi	r21, 0xBE	; 190
     f38:	69 85       	ldd	r22, Y+9	; 0x09
     f3a:	7a 85       	ldd	r23, Y+10	; 0x0a
     f3c:	8b 85       	ldd	r24, Y+11	; 0x0b
     f3e:	9c 85       	ldd	r25, Y+12	; 0x0c
     f40:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     f44:	9b 01       	movw	r18, r22
     f46:	ac 01       	movw	r20, r24
			red_raw*color_correction_matrix[0][0]+
			green_raw*color_correction_matrix[1][0]+
			blue_raw*color_correction_matrix[2][0]);
		float fgreen = round(
			red_raw*color_correction_matrix[0][1]+
			green_raw*color_correction_matrix[1][1]+
     f48:	c3 01       	movw	r24, r6
     f4a:	b2 01       	movw	r22, r4
     f4c:	0e 94 c6 0c 	call	0x198c	; 0x198c <__addsf3>
		//apply color correction matrix
		float fred = round(
			red_raw*color_correction_matrix[0][0]+
			green_raw*color_correction_matrix[1][0]+
			blue_raw*color_correction_matrix[2][0]);
		float fgreen = round(
     f50:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <round>
     f54:	2b 01       	movw	r4, r22
     f56:	3c 01       	movw	r6, r24
			red_raw*color_correction_matrix[0][1]+
			green_raw*color_correction_matrix[1][1]+
			blue_raw*color_correction_matrix[2][1]);
		float fblue = round(
			red_raw*color_correction_matrix[0][2]+
     f58:	21 e4       	ldi	r18, 0x41	; 65
     f5a:	30 ea       	ldi	r19, 0xA0	; 160
     f5c:	4e e2       	ldi	r20, 0x2E	; 46
     f5e:	5d eb       	ldi	r21, 0xBD	; 189
     f60:	c5 01       	movw	r24, r10
     f62:	b4 01       	movw	r22, r8
     f64:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     f68:	4b 01       	movw	r8, r22
     f6a:	5c 01       	movw	r10, r24
			green_raw*color_correction_matrix[1][2]+
     f6c:	2c e3       	ldi	r18, 0x3C	; 60
     f6e:	36 e2       	ldi	r19, 0x26	; 38
     f70:	4c e2       	ldi	r20, 0x2C	; 44
     f72:	5e eb       	ldi	r21, 0xBE	; 190
     f74:	c7 01       	movw	r24, r14
     f76:	b6 01       	movw	r22, r12
     f78:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     f7c:	9b 01       	movw	r18, r22
     f7e:	ac 01       	movw	r20, r24
		float fgreen = round(
			red_raw*color_correction_matrix[0][1]+
			green_raw*color_correction_matrix[1][1]+
			blue_raw*color_correction_matrix[2][1]);
		float fblue = round(
			red_raw*color_correction_matrix[0][2]+
     f80:	c5 01       	movw	r24, r10
     f82:	b4 01       	movw	r22, r8
     f84:	0e 94 c6 0c 	call	0x198c	; 0x198c <__addsf3>
     f88:	6b 01       	movw	r12, r22
     f8a:	7c 01       	movw	r14, r24
			green_raw*color_correction_matrix[1][2]+
			blue_raw*color_correction_matrix[2][2]);
     f8c:	21 eb       	ldi	r18, 0xB1	; 177
     f8e:	34 eb       	ldi	r19, 0xB4	; 180
     f90:	41 ec       	ldi	r20, 0xC1	; 193
     f92:	5e e3       	ldi	r21, 0x3E	; 62
     f94:	69 85       	ldd	r22, Y+9	; 0x09
     f96:	7a 85       	ldd	r23, Y+10	; 0x0a
     f98:	8b 85       	ldd	r24, Y+11	; 0x0b
     f9a:	9c 85       	ldd	r25, Y+12	; 0x0c
     f9c:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__mulsf3>
     fa0:	9b 01       	movw	r18, r22
     fa2:	ac 01       	movw	r20, r24
			red_raw*color_correction_matrix[0][1]+
			green_raw*color_correction_matrix[1][1]+
			blue_raw*color_correction_matrix[2][1]);
		float fblue = round(
			red_raw*color_correction_matrix[0][2]+
			green_raw*color_correction_matrix[1][2]+
     fa4:	c7 01       	movw	r24, r14
     fa6:	b6 01       	movw	r22, r12
     fa8:	0e 94 c6 0c 	call	0x198c	; 0x198c <__addsf3>
			blue_raw*color_correction_matrix[2][0]);
		float fgreen = round(
			red_raw*color_correction_matrix[0][1]+
			green_raw*color_correction_matrix[1][1]+
			blue_raw*color_correction_matrix[2][1]);
		float fblue = round(
     fac:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <round>
     fb0:	6b 01       	movw	r12, r22
     fb2:	7c 01       	movw	r14, r24
	
}

inline uint8_t sconvert_to_uint8_t(float in);
inline uint8_t sconvert_to_uint8_t(float in){
	if(in > UINT8_MAX){
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	4f e7       	ldi	r20, 0x7F	; 127
     fba:	53 e4       	ldi	r21, 0x43	; 67
     fbc:	6d 85       	ldd	r22, Y+13	; 0x0d
     fbe:	7e 85       	ldd	r23, Y+14	; 0x0e
     fc0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc2:	98 89       	ldd	r25, Y+16	; 0x10
     fc4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__gesf2>
     fc8:	18 16       	cp	r1, r24
     fca:	9c f0       	brlt	.+38     	; 0xff2 <main+0x308>
		return UINT8_MAX;
	}else if(in < 0){
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	a9 01       	movw	r20, r18
     fd2:	6d 85       	ldd	r22, Y+13	; 0x0d
     fd4:	7e 85       	ldd	r23, Y+14	; 0x0e
     fd6:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd8:	98 89       	ldd	r25, Y+16	; 0x10
     fda:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__cmpsf2>
     fde:	88 23       	and	r24, r24
     fe0:	5c f0       	brlt	.+22     	; 0xff8 <main+0x30e>
		return 0;
	} else{
		return (int) in;
     fe2:	6d 85       	ldd	r22, Y+13	; 0x0d
     fe4:	7e 85       	ldd	r23, Y+14	; 0x0e
     fe6:	8f 85       	ldd	r24, Y+15	; 0x0f
     fe8:	98 89       	ldd	r25, Y+16	; 0x10
     fea:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__fixsfsi>
     fee:	a6 2e       	mov	r10, r22
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <main+0x310>
}

inline uint8_t sconvert_to_uint8_t(float in);
inline uint8_t sconvert_to_uint8_t(float in){
	if(in > UINT8_MAX){
		return UINT8_MAX;
     ff2:	aa 24       	eor	r10, r10
     ff4:	aa 94       	dec	r10
     ff6:	01 c0       	rjmp	.+2      	; 0xffa <main+0x310>
	}else if(in < 0){
		return 0;
     ff8:	a1 2c       	mov	r10, r1
	
}

inline uint8_t sconvert_to_uint8_t(float in);
inline uint8_t sconvert_to_uint8_t(float in){
	if(in > UINT8_MAX){
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	4f e7       	ldi	r20, 0x7F	; 127
    1000:	53 e4       	ldi	r21, 0x43	; 67
    1002:	c3 01       	movw	r24, r6
    1004:	b2 01       	movw	r22, r4
    1006:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__gesf2>
    100a:	18 16       	cp	r1, r24
    100c:	7c f0       	brlt	.+30     	; 0x102c <main+0x342>
		return UINT8_MAX;
	}else if(in < 0){
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	a9 01       	movw	r20, r18
    1014:	c3 01       	movw	r24, r6
    1016:	b2 01       	movw	r22, r4
    1018:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__cmpsf2>
    101c:	88 23       	and	r24, r24
    101e:	4c f0       	brlt	.+18     	; 0x1032 <main+0x348>
		return 0;
	} else{
		return (int) in;
    1020:	c3 01       	movw	r24, r6
    1022:	b2 01       	movw	r22, r4
    1024:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__fixsfsi>
    1028:	b6 2e       	mov	r11, r22
    102a:	04 c0       	rjmp	.+8      	; 0x1034 <main+0x34a>
}

inline uint8_t sconvert_to_uint8_t(float in);
inline uint8_t sconvert_to_uint8_t(float in){
	if(in > UINT8_MAX){
		return UINT8_MAX;
    102c:	bb 24       	eor	r11, r11
    102e:	ba 94       	dec	r11
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <main+0x34a>
	}else if(in < 0){
		return 0;
    1032:	b1 2c       	mov	r11, r1
	
}

inline uint8_t sconvert_to_uint8_t(float in);
inline uint8_t sconvert_to_uint8_t(float in){
	if(in > UINT8_MAX){
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	4f e7       	ldi	r20, 0x7F	; 127
    103a:	53 e4       	ldi	r21, 0x43	; 67
    103c:	c7 01       	movw	r24, r14
    103e:	b6 01       	movw	r22, r12
    1040:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__gesf2>
    1044:	18 16       	cp	r1, r24
    1046:	74 f0       	brlt	.+28     	; 0x1064 <main+0x37a>
		return UINT8_MAX;
	}else if(in < 0){
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	a9 01       	movw	r20, r18
    104e:	c7 01       	movw	r24, r14
    1050:	b6 01       	movw	r22, r12
    1052:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__cmpsf2>
    1056:	88 23       	and	r24, r24
    1058:	3c f0       	brlt	.+14     	; 0x1068 <main+0x37e>
		return 0;
	} else{
		return (int) in;
    105a:	c7 01       	movw	r24, r14
    105c:	b6 01       	movw	r22, r12
    105e:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__fixsfsi>
    1062:	03 c0       	rjmp	.+6      	; 0x106a <main+0x380>
}

inline uint8_t sconvert_to_uint8_t(float in);
inline uint8_t sconvert_to_uint8_t(float in){
	if(in > UINT8_MAX){
		return UINT8_MAX;
    1064:	6f ef       	ldi	r22, 0xFF	; 255
    1066:	01 c0       	rjmp	.+2      	; 0x106a <main+0x380>
	}else if(in < 0){
		return 0;
    1068:	60 e0       	ldi	r22, 0x00	; 0

		uint8_t red = sconvert_to_uint8_t(fred);
		uint8_t green = sconvert_to_uint8_t(fgreen);
		uint8_t blue = sconvert_to_uint8_t(fblue);
		
 		myColors[1].red = red;
    106a:	ea e0       	ldi	r30, 0x0A	; 10
    106c:	f0 e2       	ldi	r31, 0x20	; 32
    106e:	a0 82       	st	Z, r10
 		myColors[1].green = green;
    1070:	eb e0       	ldi	r30, 0x0B	; 11
    1072:	f0 e2       	ldi	r31, 0x20	; 32
    1074:	b0 82       	st	Z, r11
 		myColors[1].blue = blue;
    1076:	ec e0       	ldi	r30, 0x0C	; 12
    1078:	f0 e2       	ldi	r31, 0x20	; 32
    107a:	60 83       	st	Z, r22
		//temp end
		
		
		if(ir_driver_is_measuring() == false){
    107c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <ir_driver_is_measuring>
    1080:	81 11       	cpse	r24, r1
    1082:	c5 ce       	rjmp	.-630    	; 0xe0e <main+0x124>
			//TODO delet workaround when hardware fixed
			led_swich_workaround++;
			led_swich_workaround &= 8;
			
			ir_led_enable(led_swich_workaround);
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 76 0a 	call	0x14ec	; 0x14ec <ir_led_enable>
			
			if(USART_RXBufferData_Available(&USART_data)){
    108c:	8f e1       	ldi	r24, 0x1F	; 31
    108e:	90 e2       	ldi	r25, 0x20	; 32
    1090:	0e 94 0a 0c 	call	0x1814	; 0x1814 <USART_RXBufferData_Available>
    1094:	88 23       	and	r24, r24
    1096:	09 f4       	brne	.+2      	; 0x109a <main+0x3b0>
    1098:	ba ce       	rjmp	.-652    	; 0xe0e <main+0x124>
				uint8_t data = USART_RXBuffer_GetByte(&USART_data);
    109a:	8f e1       	ldi	r24, 0x1F	; 31
    109c:	90 e2       	ldi	r25, 0x20	; 32
    109e:	0e 94 12 0c 	call	0x1824	; 0x1824 <USART_RXBuffer_GetByte>
				if(next_command.data_missing == -1){
    10a2:	fa 89       	ldd	r31, Y+18	; 0x12
    10a4:	ff 3f       	cpi	r31, 0xFF	; 255
    10a6:	09 f0       	breq	.+2      	; 0x10aa <main+0x3c0>
    10a8:	68 c0       	rjmp	.+208    	; 0x117a <main+0x490>
					next_command.device = data & beep_dev_mask;
    10aa:	28 2f       	mov	r18, r24
    10ac:	20 7f       	andi	r18, 0xF0	; 240
    10ae:	2d 8b       	std	Y+21, r18	; 0x15
					next_command.command = data & beep_command_mask;
    10b0:	8f 70       	andi	r24, 0x0F	; 15
    10b2:	8b 8b       	std	Y+19, r24	; 0x13
					//get number of missing data to execute command
					if(next_command.device == BEEP_DEV_MOTORS){
    10b4:	20 34       	cpi	r18, 0x40	; 64
    10b6:	b9 f4       	brne	.+46     	; 0x10e6 <main+0x3fc>
						if(next_command.command == BEEP_COM_LEFT_MOTOR){
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	09 f4       	brne	.+2      	; 0x10be <main+0x3d4>
    10bc:	91 ce       	rjmp	.-734    	; 0xde0 <main+0xf6>
							next_command.data_missing = 1;
						}else if (next_command.command == BEEP_COM_RIGHT_MOTOR){
    10be:	82 30       	cpi	r24, 0x02	; 2
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <main+0x3da>
    10c2:	91 ce       	rjmp	.-734    	; 0xde6 <main+0xfc>
							next_command.data_missing = 1;
						}else if (next_command.command == BEEP_COM_BOTH_MOTORS){
    10c4:	83 30       	cpi	r24, 0x03	; 3
    10c6:	09 f4       	brne	.+2      	; 0x10ca <main+0x3e0>
    10c8:	91 ce       	rjmp	.-734    	; 0xdec <main+0x102>
							next_command.data_missing = 2;
						}else if (next_command.command == beep_com_motor_enable){
    10ca:	8e 30       	cpi	r24, 0x0E	; 14
    10cc:	21 f4       	brne	.+8      	; 0x10d6 <main+0x3ec>
							set_motor_on(true);
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	0e 94 cf 0b 	call	0x179e	; 0x179e <set_motor_on>
    10d4:	9c ce       	rjmp	.-712    	; 0xe0e <main+0x124>
							//next_command.data_missing = -1;
						}else if (next_command.command == beep_com_motor_shutdown){
    10d6:	8b 89       	ldd	r24, Y+19	; 0x13
    10d8:	8f 30       	cpi	r24, 0x0F	; 15
    10da:	09 f0       	breq	.+2      	; 0x10de <main+0x3f4>
    10dc:	98 ce       	rjmp	.-720    	; 0xe0e <main+0x124>
							set_motor_on(false);
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	0e 94 cf 0b 	call	0x179e	; 0x179e <set_motor_on>
    10e4:	94 ce       	rjmp	.-728    	; 0xe0e <main+0x124>
							//next_command.data_missing = -1;
						}
					}else if(next_command.device == BEEP_DEV_IR){			
    10e6:	9d 89       	ldd	r25, Y+21	; 0x15
    10e8:	91 11       	cpse	r25, r1
    10ea:	13 c0       	rjmp	.+38     	; 0x1112 <main+0x428>
						if(next_command.command <= 7){
    10ec:	eb 89       	ldd	r30, Y+19	; 0x13
    10ee:	e8 30       	cpi	r30, 0x08	; 8
    10f0:	30 f4       	brcc	.+12     	; 0x10fe <main+0x414>
							measure_ir_distances(next_command.command, 1, false);
    10f2:	40 e0       	ldi	r20, 0x00	; 0
    10f4:	61 e0       	ldi	r22, 0x01	; 1
    10f6:	8e 2f       	mov	r24, r30
    10f8:	0e 94 9b 0a 	call	0x1536	; 0x1536 <measure_ir_distances>
    10fc:	88 ce       	rjmp	.-752    	; 0xe0e <main+0x124>
						}else if (next_command.command == BEEP_COM_IR_ALL){							
    10fe:	fb 89       	ldd	r31, Y+19	; 0x13
    1100:	ff 30       	cpi	r31, 0x0F	; 15
    1102:	09 f0       	breq	.+2      	; 0x1106 <main+0x41c>
    1104:	84 ce       	rjmp	.-760    	; 0xe0e <main+0x124>
							measure_ir_distances(0, 8, false);
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	68 e0       	ldi	r22, 0x08	; 8
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	0e 94 9b 0a 	call	0x1536	; 0x1536 <measure_ir_distances>
    1110:	7e ce       	rjmp	.-772    	; 0xe0e <main+0x124>
						}
						//next_command.data_missing = -1;
					}else if(next_command.device == BEEP_DEV_IR_FILTERED){
    1112:	2d 89       	ldd	r18, Y+21	; 0x15
    1114:	20 31       	cpi	r18, 0x10	; 16
    1116:	91 f4       	brne	.+36     	; 0x113c <main+0x452>
						if(next_command.command <= 7){
    1118:	8b 89       	ldd	r24, Y+19	; 0x13
    111a:	88 30       	cpi	r24, 0x08	; 8
    111c:	28 f4       	brcc	.+10     	; 0x1128 <main+0x43e>
							measure_ir_distances(next_command.command, 1, true);
    111e:	41 e0       	ldi	r20, 0x01	; 1
    1120:	61 e0       	ldi	r22, 0x01	; 1
    1122:	0e 94 9b 0a 	call	0x1536	; 0x1536 <measure_ir_distances>
    1126:	73 ce       	rjmp	.-794    	; 0xe0e <main+0x124>
						}else if (next_command.command == BEEP_COM_IR_ALL){
    1128:	9b 89       	ldd	r25, Y+19	; 0x13
    112a:	9f 30       	cpi	r25, 0x0F	; 15
    112c:	09 f0       	breq	.+2      	; 0x1130 <main+0x446>
    112e:	6f ce       	rjmp	.-802    	; 0xe0e <main+0x124>
							measure_ir_distances(0, 8, true);
    1130:	41 e0       	ldi	r20, 0x01	; 1
    1132:	68 e0       	ldi	r22, 0x08	; 8
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	0e 94 9b 0a 	call	0x1536	; 0x1536 <measure_ir_distances>
    113a:	69 ce       	rjmp	.-814    	; 0xe0e <main+0x124>
						}
					}else if(next_command.device == BEEP_DEV_RGB_LED){
    113c:	ed 89       	ldd	r30, Y+21	; 0x15
    113e:	e0 35       	cpi	r30, 0x50	; 80
    1140:	09 f0       	breq	.+2      	; 0x1144 <main+0x45a>
    1142:	65 ce       	rjmp	.-822    	; 0xe0e <main+0x124>
						if(next_command.command == BEEP_COM_LEDS_OFF){
    1144:	fb 89       	ldd	r31, Y+19	; 0x13
    1146:	ff 30       	cpi	r31, 0x0F	; 15
    1148:	39 f4       	brne	.+14     	; 0x1158 <main+0x46e>
		//reset counter
		TCE0.CNT = 0x00;
		//restart counter
		TCE0.CTRLA = TC_CLKSEL_DIV1_gc;
	}else{
		TCE0.CTRLA = 0; // disable pwm output
    114a:	e0 e0       	ldi	r30, 0x00	; 0
    114c:	fa e0       	ldi	r31, 0x0A	; 10
    114e:	10 82       	st	Z, r1
		PORTE.OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm; // clear outputs
    1150:	87 e0       	ldi	r24, 0x07	; 7
    1152:	80 93 86 06 	sts	0x0686, r24
    1156:	5b ce       	rjmp	.-842    	; 0xe0e <main+0x124>
							measure_ir_distances(0, 8, true);
						}
					}else if(next_command.device == BEEP_DEV_RGB_LED){
						if(next_command.command == BEEP_COM_LEDS_OFF){
							enable_rgb_leds(false);
						}else if(next_command.command == BEEP_COM_LEDS_ON){
    1158:	fb 89       	ldd	r31, Y+19	; 0x13
    115a:	fe 30       	cpi	r31, 0x0E	; 14
    115c:	49 f4       	brne	.+18     	; 0x1170 <main+0x486>

inline void enable_rgb_leds(bool enable);
void enable_rgb_leds(bool enable){
	if (enable){
		//reset counter
		TCE0.CNT = 0x00;
    115e:	10 92 20 0a 	sts	0x0A20, r1
    1162:	10 92 21 0a 	sts	0x0A21, r1
		//restart counter
		TCE0.CTRLA = TC_CLKSEL_DIV1_gc;
    1166:	21 e0       	ldi	r18, 0x01	; 1
    1168:	e0 e0       	ldi	r30, 0x00	; 0
    116a:	fa e0       	ldi	r31, 0x0A	; 10
    116c:	20 83       	st	Z, r18
    116e:	4f ce       	rjmp	.-866    	; 0xe0e <main+0x124>
					}else if(next_command.device == BEEP_DEV_RGB_LED){
						if(next_command.command == BEEP_COM_LEDS_OFF){
							enable_rgb_leds(false);
						}else if(next_command.command == BEEP_COM_LEDS_ON){
							enable_rgb_leds(true);
						}else if(next_command.command < 8){
    1170:	8b 89       	ldd	r24, Y+19	; 0x13
    1172:	88 30       	cpi	r24, 0x08	; 8
    1174:	08 f4       	brcc	.+2      	; 0x1178 <main+0x48e>
    1176:	3d ce       	rjmp	.-902    	; 0xdf2 <main+0x108>
    1178:	4a ce       	rjmp	.-876    	; 0xe0e <main+0x124>
							next_command.data_missing = 3;
						}
					}
				}else{
					next_command.data[next_command.head] = data;
    117a:	e4 e0       	ldi	r30, 0x04	; 4
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	ec 0f       	add	r30, r28
    1180:	fd 1f       	adc	r31, r29
    1182:	9c 89       	ldd	r25, Y+20	; 0x14
    1184:	e9 0f       	add	r30, r25
    1186:	f1 1d       	adc	r31, r1
    1188:	80 83       	st	Z, r24
					next_command.head += 1;
					next_command.data_missing -= 1;
    118a:	ea 89       	ldd	r30, Y+18	; 0x12
    118c:	e1 50       	subi	r30, 0x01	; 1
    118e:	ea 8b       	std	Y+18, r30	; 0x12
					if (next_command.data_missing == 0){					
    1190:	ee 23       	and	r30, r30
    1192:	19 f0       	breq	.+6      	; 0x119a <main+0x4b0>
							next_command.data_missing = 3;
						}
					}
				}else{
					next_command.data[next_command.head] = data;
					next_command.head += 1;
    1194:	9f 5f       	subi	r25, 0xFF	; 255
    1196:	9c 8b       	std	Y+20, r25	; 0x14
    1198:	3a ce       	rjmp	.-908    	; 0xe0e <main+0x124>
					next_command.data_missing -= 1;
					if (next_command.data_missing == 0){					
						if(next_command.device==BEEP_DEV_MOTORS){
    119a:	fd 89       	ldd	r31, Y+21	; 0x15
    119c:	f0 34       	cpi	r31, 0x40	; 64
    119e:	31 f5       	brne	.+76     	; 0x11ec <main+0x502>
							if(next_command.command == BEEP_COM_LEFT_MOTOR){
    11a0:	2b 89       	ldd	r18, Y+19	; 0x13
    11a2:	21 30       	cpi	r18, 0x01	; 1
    11a4:	41 f4       	brne	.+16     	; 0x11b6 <main+0x4cc>
								set_beepmotor_speed(motor_l, next_command.data[0]);
    11a6:	6c 81       	ldd	r22, Y+4	; 0x04
    11a8:	84 e0       	ldi	r24, 0x04	; 4
    11aa:	0e 94 4c 06 	call	0xc98	; 0xc98 <set_beepmotor_speed>
								myColors[next_command.command].blue = next_command.data[2];
							}
						}
					
						//command executed, prepare for new command
						next_command.head = 0;
    11ae:	1c 8a       	std	Y+20, r1	; 0x14
						next_command.data_missing =- 1;
    11b0:	8f ef       	ldi	r24, 0xFF	; 255
    11b2:	8a 8b       	std	Y+18, r24	; 0x12
    11b4:	2c ce       	rjmp	.-936    	; 0xe0e <main+0x124>
					next_command.data_missing -= 1;
					if (next_command.data_missing == 0){					
						if(next_command.device==BEEP_DEV_MOTORS){
							if(next_command.command == BEEP_COM_LEFT_MOTOR){
								set_beepmotor_speed(motor_l, next_command.data[0]);
							}else if(next_command.command == BEEP_COM_RIGHT_MOTOR){
    11b6:	9b 89       	ldd	r25, Y+19	; 0x13
    11b8:	92 30       	cpi	r25, 0x02	; 2
    11ba:	41 f4       	brne	.+16     	; 0x11cc <main+0x4e2>
								set_beepmotor_speed(motor_r, next_command.data[0]);
    11bc:	6c 81       	ldd	r22, Y+4	; 0x04
    11be:	86 e0       	ldi	r24, 0x06	; 6
    11c0:	0e 94 4c 06 	call	0xc98	; 0xc98 <set_beepmotor_speed>
								myColors[next_command.command].blue = next_command.data[2];
							}
						}
					
						//command executed, prepare for new command
						next_command.head = 0;
    11c4:	1c 8a       	std	Y+20, r1	; 0x14
						next_command.data_missing =- 1;
    11c6:	ef ef       	ldi	r30, 0xFF	; 255
    11c8:	ea 8b       	std	Y+18, r30	; 0x12
    11ca:	21 ce       	rjmp	.-958    	; 0xe0e <main+0x124>
						if(next_command.device==BEEP_DEV_MOTORS){
							if(next_command.command == BEEP_COM_LEFT_MOTOR){
								set_beepmotor_speed(motor_l, next_command.data[0]);
							}else if(next_command.command == BEEP_COM_RIGHT_MOTOR){
								set_beepmotor_speed(motor_r, next_command.data[0]);
							}else if(next_command.command == BEEP_COM_BOTH_MOTORS){
    11cc:	fb 89       	ldd	r31, Y+19	; 0x13
    11ce:	f3 30       	cpi	r31, 0x03	; 3
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <main+0x4ea>
    11d2:	12 ce       	rjmp	.-988    	; 0xdf8 <main+0x10e>
								set_beepmotor_speed(motor_l, next_command.data[0]);
    11d4:	6c 81       	ldd	r22, Y+4	; 0x04
    11d6:	84 e0       	ldi	r24, 0x04	; 4
    11d8:	0e 94 4c 06 	call	0xc98	; 0xc98 <set_beepmotor_speed>
								set_beepmotor_speed(motor_r, next_command.data[1]);
    11dc:	6d 81       	ldd	r22, Y+5	; 0x05
    11de:	86 e0       	ldi	r24, 0x06	; 6
    11e0:	0e 94 4c 06 	call	0xc98	; 0xc98 <set_beepmotor_speed>
								myColors[next_command.command].blue = next_command.data[2];
							}
						}
					
						//command executed, prepare for new command
						next_command.head = 0;
    11e4:	1c 8a       	std	Y+20, r1	; 0x14
						next_command.data_missing =- 1;
    11e6:	2f ef       	ldi	r18, 0xFF	; 255
    11e8:	2a 8b       	std	Y+18, r18	; 0x12
    11ea:	11 ce       	rjmp	.-990    	; 0xe0e <main+0x124>
								set_beepmotor_speed(motor_r, next_command.data[0]);
							}else if(next_command.command == BEEP_COM_BOTH_MOTORS){
								set_beepmotor_speed(motor_l, next_command.data[0]);
								set_beepmotor_speed(motor_r, next_command.data[1]);
							}
						}else if(next_command.device == BEEP_DEV_RGB_LED){
    11ec:	8d 89       	ldd	r24, Y+21	; 0x15
    11ee:	80 35       	cpi	r24, 0x50	; 80
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <main+0x50a>
    11f2:	06 ce       	rjmp	.-1012   	; 0xe00 <main+0x116>
							if (next_command.command < 8){
    11f4:	9b 89       	ldd	r25, Y+19	; 0x13
    11f6:	98 30       	cpi	r25, 0x08	; 8
    11f8:	08 f0       	brcs	.+2      	; 0x11fc <main+0x512>
    11fa:	06 ce       	rjmp	.-1012   	; 0xe08 <main+0x11e>
								myColors[next_command.command].red = next_command.data[0];
    11fc:	89 2f       	mov	r24, r25
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	4c 81       	ldd	r20, Y+4	; 0x04
    1202:	9c 01       	movw	r18, r24
    1204:	22 0f       	add	r18, r18
    1206:	33 1f       	adc	r19, r19
    1208:	82 0f       	add	r24, r18
    120a:	93 1f       	adc	r25, r19
    120c:	fc 01       	movw	r30, r24
    120e:	e9 5f       	subi	r30, 0xF9	; 249
    1210:	ff 4d       	sbci	r31, 0xDF	; 223
    1212:	40 83       	st	Z, r20
								myColors[next_command.command].green = next_command.data[1];
    1214:	8d 81       	ldd	r24, Y+5	; 0x05
    1216:	81 83       	std	Z+1, r24	; 0x01
								myColors[next_command.command].blue = next_command.data[2];
    1218:	8e 81       	ldd	r24, Y+6	; 0x06
    121a:	82 83       	std	Z+2, r24	; 0x02
							}
						}
					
						//command executed, prepare for new command
						next_command.head = 0;
    121c:	1c 8a       	std	Y+20, r1	; 0x14
						next_command.data_missing =- 1;
    121e:	ef ef       	ldi	r30, 0xFF	; 255
    1220:	ea 8b       	std	Y+18, r30	; 0x12
    1222:	f5 cd       	rjmp	.-1046   	; 0xe0e <main+0x124>

00001224 <__vector_88>:
		}
    }
}


ISR(USARTD0_RXC_vect){
    1224:	1f 92       	push	r1
    1226:	0f 92       	push	r0
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	0f 92       	push	r0
    122c:	11 24       	eor	r1, r1
    122e:	0b b6       	in	r0, 0x3b	; 59
    1230:	0f 92       	push	r0
    1232:	2f 93       	push	r18
    1234:	3f 93       	push	r19
    1236:	4f 93       	push	r20
    1238:	5f 93       	push	r21
    123a:	6f 93       	push	r22
    123c:	7f 93       	push	r23
    123e:	8f 93       	push	r24
    1240:	9f 93       	push	r25
    1242:	af 93       	push	r26
    1244:	bf 93       	push	r27
    1246:	ef 93       	push	r30
    1248:	ff 93       	push	r31
	USART_RXComplete(&USART_data);
    124a:	8f e1       	ldi	r24, 0x1F	; 31
    124c:	90 e2       	ldi	r25, 0x20	; 32
    124e:	0e 94 1e 0c 	call	0x183c	; 0x183c <USART_RXComplete>
}
    1252:	ff 91       	pop	r31
    1254:	ef 91       	pop	r30
    1256:	bf 91       	pop	r27
    1258:	af 91       	pop	r26
    125a:	9f 91       	pop	r25
    125c:	8f 91       	pop	r24
    125e:	7f 91       	pop	r23
    1260:	6f 91       	pop	r22
    1262:	5f 91       	pop	r21
    1264:	4f 91       	pop	r20
    1266:	3f 91       	pop	r19
    1268:	2f 91       	pop	r18
    126a:	0f 90       	pop	r0
    126c:	0b be       	out	0x3b, r0	; 59
    126e:	0f 90       	pop	r0
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	0f 90       	pop	r0
    1274:	1f 90       	pop	r1
    1276:	18 95       	reti

00001278 <__vector_89>:


ISR(USARTD0_DRE_vect){
    1278:	1f 92       	push	r1
    127a:	0f 92       	push	r0
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	0f 92       	push	r0
    1280:	11 24       	eor	r1, r1
    1282:	0b b6       	in	r0, 0x3b	; 59
    1284:	0f 92       	push	r0
    1286:	2f 93       	push	r18
    1288:	3f 93       	push	r19
    128a:	4f 93       	push	r20
    128c:	5f 93       	push	r21
    128e:	6f 93       	push	r22
    1290:	7f 93       	push	r23
    1292:	8f 93       	push	r24
    1294:	9f 93       	push	r25
    1296:	af 93       	push	r26
    1298:	bf 93       	push	r27
    129a:	ef 93       	push	r30
    129c:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_data);
    129e:	8f e1       	ldi	r24, 0x1F	; 31
    12a0:	90 e2       	ldi	r25, 0x20	; 32
    12a2:	0e 94 33 0c 	call	0x1866	; 0x1866 <USART_DataRegEmpty>
}
    12a6:	ff 91       	pop	r31
    12a8:	ef 91       	pop	r30
    12aa:	bf 91       	pop	r27
    12ac:	af 91       	pop	r26
    12ae:	9f 91       	pop	r25
    12b0:	8f 91       	pop	r24
    12b2:	7f 91       	pop	r23
    12b4:	6f 91       	pop	r22
    12b6:	5f 91       	pop	r21
    12b8:	4f 91       	pop	r20
    12ba:	3f 91       	pop	r19
    12bc:	2f 91       	pop	r18
    12be:	0f 90       	pop	r0
    12c0:	0b be       	out	0x3b, r0	; 59
    12c2:	0f 90       	pop	r0
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	0f 90       	pop	r0
    12c8:	1f 90       	pop	r1
    12ca:	18 95       	reti

000012cc <__vector_71>:


ISR(ADCA_CH0_vect){
    12cc:	1f 92       	push	r1
    12ce:	0f 92       	push	r0
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	0f 92       	push	r0
    12d4:	11 24       	eor	r1, r1
    12d6:	0b b6       	in	r0, 0x3b	; 59
    12d8:	0f 92       	push	r0
    12da:	2f 93       	push	r18
    12dc:	3f 93       	push	r19
    12de:	4f 93       	push	r20
    12e0:	5f 93       	push	r21
    12e2:	6f 93       	push	r22
    12e4:	7f 93       	push	r23
    12e6:	8f 93       	push	r24
    12e8:	9f 93       	push	r25
    12ea:	af 93       	push	r26
    12ec:	bf 93       	push	r27
    12ee:	ef 93       	push	r30
    12f0:	ff 93       	push	r31
		
	ISR_adc_ir_driver();
    12f2:	0e 94 ef 0a 	call	0x15de	; 0x15de <ISR_adc_ir_driver>
	
}
    12f6:	ff 91       	pop	r31
    12f8:	ef 91       	pop	r30
    12fa:	bf 91       	pop	r27
    12fc:	af 91       	pop	r26
    12fe:	9f 91       	pop	r25
    1300:	8f 91       	pop	r24
    1302:	7f 91       	pop	r23
    1304:	6f 91       	pop	r22
    1306:	5f 91       	pop	r21
    1308:	4f 91       	pop	r20
    130a:	3f 91       	pop	r19
    130c:	2f 91       	pop	r18
    130e:	0f 90       	pop	r0
    1310:	0b be       	out	0x3b, r0	; 59
    1312:	0f 90       	pop	r0
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	0f 90       	pop	r0
    1318:	1f 90       	pop	r1
    131a:	18 95       	reti

0000131c <__vector_47>:

//RGB LED multiplexing
ISR(TCE0_OVF_vect){
    131c:	1f 92       	push	r1
    131e:	0f 92       	push	r0
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	0f 92       	push	r0
    1324:	11 24       	eor	r1, r1
    1326:	0b b6       	in	r0, 0x3b	; 59
    1328:	0f 92       	push	r0
    132a:	2f 93       	push	r18
    132c:	3f 93       	push	r19
    132e:	8f 93       	push	r24
    1330:	9f 93       	push	r25
    1332:	af 93       	push	r26
    1334:	bf 93       	push	r27
    1336:	ef 93       	push	r30
    1338:	ff 93       	push	r31
	static uint8_t led_multiplex_counter = 0; //software prescale
	static uint8_t led = 0; //next led number
	if(led_multiplex_counter++ > 0x5){
    133a:	80 91 00 20 	lds	r24, 0x2000
    133e:	86 30       	cpi	r24, 0x06	; 6
    1340:	20 f4       	brcc	.+8      	; 0x134a <__vector_47+0x2e>
    1342:	8f 5f       	subi	r24, 0xFF	; 255
    1344:	80 93 00 20 	sts	0x2000, r24
    1348:	a2 c0       	rjmp	.+324    	; 0x148e <__vector_47+0x172>
		led_multiplex_counter=0;
    134a:	10 92 00 20 	sts	0x2000, r1
		//disable LED OUTPUT
		TCE0.CTRLB = TC_WGMODE_SS_gc; //disable pwm output, leave Single slope on
    134e:	e0 e0       	ldi	r30, 0x00	; 0
    1350:	fa e0       	ldi	r31, 0x0A	; 10
    1352:	83 e0       	ldi	r24, 0x03	; 3
    1354:	81 83       	std	Z+1, r24	; 0x01
		PORTE.OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm; // clear outputs
    1356:	a0 e8       	ldi	r26, 0x80	; 128
    1358:	b6 e0       	ldi	r27, 0x06	; 6
    135a:	87 e0       	ldi	r24, 0x07	; 7
    135c:	16 96       	adiw	r26, 0x06	; 6
    135e:	8c 93       	st	X, r24
    1360:	16 97       	sbiw	r26, 0x06	; 6
		TCE0.CTRLA = 0; // disable counter
    1362:	10 82       	st	Z, r1
		//reset counter
		TCE0.CNT = 0x00;
		//restart counter
		TCE0.CTRLA = TC_CLKSEL_DIV1_gc;
	}else{
		TCE0.CTRLA = 0; // disable pwm output
    1364:	10 82       	st	Z, r1
		PORTE.OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm; // clear outputs
    1366:	16 96       	adiw	r26, 0x06	; 6
    1368:	8c 93       	st	X, r24


		enable_rgb_leds(false);
		
		//choose LED on multiplexer
		PORTF.OUTCLR = (0b111 << 3);
    136a:	a0 ea       	ldi	r26, 0xA0	; 160
    136c:	b6 e0       	ldi	r27, 0x06	; 6
    136e:	88 e3       	ldi	r24, 0x38	; 56
    1370:	16 96       	adiw	r26, 0x06	; 6
    1372:	8c 93       	st	X, r24
    1374:	16 97       	sbiw	r26, 0x06	; 6
		PORTF.OUTSET = (pgm_read_word (&rgb_led_lut[led]));
    1376:	80 91 01 20 	lds	r24, 0x2001
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	fc 01       	movw	r30, r24
    137e:	e8 53       	subi	r30, 0x38	; 56
    1380:	fe 4f       	sbci	r31, 0xFE	; 254
    1382:	25 91       	lpm	r18, Z+
    1384:	34 91       	lpm	r19, Z
    1386:	15 96       	adiw	r26, 0x05	; 5
    1388:	2c 93       	st	X, r18
		
		//set pwm values
		if(pgm_read_word (&pwmtable_12[myColors[led].red])){
    138a:	fc 01       	movw	r30, r24
    138c:	ee 0f       	add	r30, r30
    138e:	ff 1f       	adc	r31, r31
    1390:	e8 0f       	add	r30, r24
    1392:	f9 1f       	adc	r31, r25
    1394:	e9 5f       	subi	r30, 0xF9	; 249
    1396:	ff 4d       	sbci	r31, 0xDF	; 223
    1398:	e0 81       	ld	r30, Z
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	ee 0f       	add	r30, r30
    139e:	ff 1f       	adc	r31, r31
    13a0:	e0 53       	subi	r30, 0x30	; 48
    13a2:	fe 4f       	sbci	r31, 0xFE	; 254
    13a4:	25 91       	lpm	r18, Z+
    13a6:	34 91       	lpm	r19, Z
    13a8:	23 2b       	or	r18, r19
    13aa:	b1 f0       	breq	.+44     	; 0x13d8 <__vector_47+0xbc>
			PWM_RED = pgm_read_word (&pwmtable_12[myColors[led].red]);
    13ac:	fc 01       	movw	r30, r24
    13ae:	ee 0f       	add	r30, r30
    13b0:	ff 1f       	adc	r31, r31
    13b2:	e8 0f       	add	r30, r24
    13b4:	f9 1f       	adc	r31, r25
    13b6:	e9 5f       	subi	r30, 0xF9	; 249
    13b8:	ff 4d       	sbci	r31, 0xDF	; 223
    13ba:	e0 81       	ld	r30, Z
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	ee 0f       	add	r30, r30
    13c0:	ff 1f       	adc	r31, r31
    13c2:	e0 53       	subi	r30, 0x30	; 48
    13c4:	fe 4f       	sbci	r31, 0xFE	; 254
    13c6:	25 91       	lpm	r18, Z+
    13c8:	34 91       	lpm	r19, Z
    13ca:	e0 e0       	ldi	r30, 0x00	; 0
    13cc:	fa e0       	ldi	r31, 0x0A	; 10
    13ce:	24 a7       	std	Z+44, r18	; 0x2c
    13d0:	35 a7       	std	Z+45, r19	; 0x2d
			TCE0.CTRLB |= PWM_RED_ENABLE_gc;
    13d2:	21 81       	ldd	r18, Z+1	; 0x01
    13d4:	20 64       	ori	r18, 0x40	; 64
    13d6:	21 83       	std	Z+1, r18	; 0x01
		}
		
		if(pgm_read_word(&pwmtable_12[myColors[led].blue])){
    13d8:	fc 01       	movw	r30, r24
    13da:	ee 0f       	add	r30, r30
    13dc:	ff 1f       	adc	r31, r31
    13de:	e8 0f       	add	r30, r24
    13e0:	f9 1f       	adc	r31, r25
    13e2:	e9 5f       	subi	r30, 0xF9	; 249
    13e4:	ff 4d       	sbci	r31, 0xDF	; 223
    13e6:	e2 81       	ldd	r30, Z+2	; 0x02
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	ee 0f       	add	r30, r30
    13ec:	ff 1f       	adc	r31, r31
    13ee:	e0 53       	subi	r30, 0x30	; 48
    13f0:	fe 4f       	sbci	r31, 0xFE	; 254
    13f2:	25 91       	lpm	r18, Z+
    13f4:	34 91       	lpm	r19, Z
    13f6:	23 2b       	or	r18, r19
    13f8:	b1 f0       	breq	.+44     	; 0x1426 <__vector_47+0x10a>
			PWM_BLUE = pgm_read_word(&pwmtable_12[myColors[led].blue]);
    13fa:	fc 01       	movw	r30, r24
    13fc:	ee 0f       	add	r30, r30
    13fe:	ff 1f       	adc	r31, r31
    1400:	e8 0f       	add	r30, r24
    1402:	f9 1f       	adc	r31, r25
    1404:	e9 5f       	subi	r30, 0xF9	; 249
    1406:	ff 4d       	sbci	r31, 0xDF	; 223
    1408:	e2 81       	ldd	r30, Z+2	; 0x02
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	ee 0f       	add	r30, r30
    140e:	ff 1f       	adc	r31, r31
    1410:	e0 53       	subi	r30, 0x30	; 48
    1412:	fe 4f       	sbci	r31, 0xFE	; 254
    1414:	25 91       	lpm	r18, Z+
    1416:	34 91       	lpm	r19, Z
    1418:	e0 e0       	ldi	r30, 0x00	; 0
    141a:	fa e0       	ldi	r31, 0x0A	; 10
    141c:	22 a7       	std	Z+42, r18	; 0x2a
    141e:	33 a7       	std	Z+43, r19	; 0x2b
			TCE0.CTRLB |= PWM_BLUE_ENABLE_gc;
    1420:	21 81       	ldd	r18, Z+1	; 0x01
    1422:	20 62       	ori	r18, 0x20	; 32
    1424:	21 83       	std	Z+1, r18	; 0x01
		}
		
		if(pgm_read_word (&pwmtable_12[myColors[led].green])){
    1426:	fc 01       	movw	r30, r24
    1428:	ee 0f       	add	r30, r30
    142a:	ff 1f       	adc	r31, r31
    142c:	e8 0f       	add	r30, r24
    142e:	f9 1f       	adc	r31, r25
    1430:	e9 5f       	subi	r30, 0xF9	; 249
    1432:	ff 4d       	sbci	r31, 0xDF	; 223
    1434:	e1 81       	ldd	r30, Z+1	; 0x01
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	ee 0f       	add	r30, r30
    143a:	ff 1f       	adc	r31, r31
    143c:	e0 53       	subi	r30, 0x30	; 48
    143e:	fe 4f       	sbci	r31, 0xFE	; 254
    1440:	25 91       	lpm	r18, Z+
    1442:	34 91       	lpm	r19, Z
    1444:	23 2b       	or	r18, r19
    1446:	b9 f0       	breq	.+46     	; 0x1476 <__vector_47+0x15a>
			PWM_GREEN = pgm_read_word (&pwmtable_12[myColors[led].green]);
    1448:	fc 01       	movw	r30, r24
    144a:	ee 0f       	add	r30, r30
    144c:	ff 1f       	adc	r31, r31
    144e:	8e 0f       	add	r24, r30
    1450:	9f 1f       	adc	r25, r31
    1452:	fc 01       	movw	r30, r24
    1454:	e9 5f       	subi	r30, 0xF9	; 249
    1456:	ff 4d       	sbci	r31, 0xDF	; 223
    1458:	e1 81       	ldd	r30, Z+1	; 0x01
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	ee 0f       	add	r30, r30
    145e:	ff 1f       	adc	r31, r31
    1460:	e0 53       	subi	r30, 0x30	; 48
    1462:	fe 4f       	sbci	r31, 0xFE	; 254
    1464:	85 91       	lpm	r24, Z+
    1466:	94 91       	lpm	r25, Z
    1468:	e0 e0       	ldi	r30, 0x00	; 0
    146a:	fa e0       	ldi	r31, 0x0A	; 10
    146c:	80 a7       	std	Z+40, r24	; 0x28
    146e:	91 a7       	std	Z+41, r25	; 0x29
			TCE0.CTRLB |= PWM_GREEN_ENABLE_gc;
    1470:	81 81       	ldd	r24, Z+1	; 0x01
    1472:	80 61       	ori	r24, 0x10	; 16
    1474:	81 83       	std	Z+1, r24	; 0x01
		}


		TCE0.CNT = 0x00;
    1476:	e0 e0       	ldi	r30, 0x00	; 0
    1478:	fa e0       	ldi	r31, 0x0A	; 10
    147a:	10 a2       	std	Z+32, r1	; 0x20
    147c:	11 a2       	std	Z+33, r1	; 0x21
		TCE0.CTRLA = TC_CLKSEL_DIV1_gc;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	80 83       	st	Z, r24
		
		//select next LED
		led++;
    1482:	80 91 01 20 	lds	r24, 0x2001
    1486:	8f 5f       	subi	r24, 0xFF	; 255
		led &= 0b111;
    1488:	87 70       	andi	r24, 0x07	; 7
    148a:	80 93 01 20 	sts	0x2001, r24
	}
    148e:	ff 91       	pop	r31
    1490:	ef 91       	pop	r30
    1492:	bf 91       	pop	r27
    1494:	af 91       	pop	r26
    1496:	9f 91       	pop	r25
    1498:	8f 91       	pop	r24
    149a:	3f 91       	pop	r19
    149c:	2f 91       	pop	r18
    149e:	0f 90       	pop	r0
    14a0:	0b be       	out	0x3b, r0	; 59
    14a2:	0f 90       	pop	r0
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	0f 90       	pop	r0
    14a8:	1f 90       	pop	r1
    14aa:	18 95       	reti

000014ac <init_adc>:
extern const uint8_t ir_led_lut[8] PROGMEM;
	

/*! \brief ADC enabled, signed mode, 12 bit resolution, 512 clock divider, interupts enabled*/
void init_adc(void){
	ADCA.CTRLA = ADC_ENABLE_bm; //enable adc
    14ac:	e0 e0       	ldi	r30, 0x00	; 0
    14ae:	f2 e0       	ldi	r31, 0x02	; 2
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	80 83       	st	Z, r24
	ADCA.CTRLB = ADC_CONMODE_bm | ADC_RESOLUTION_12BIT_gc; //signed mode, no current limit, no freerun, 12 bit resolution (max value: 2047)
    14b4:	90 e1       	ldi	r25, 0x10	; 16
    14b6:	91 83       	std	Z+1, r25	; 0x01
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc; //Set 512 clock divider
    14b8:	97 e0       	ldi	r25, 0x07	; 7
    14ba:	94 83       	std	Z+4, r25	; 0x04
	ADCA.REFCTRL = ADC_REFSEL_INT1V_gc; // use internal 1V ref
    14bc:	12 82       	std	Z+2, r1	; 0x02
	
	ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc|ADC_CH_INTLVL_LO_gc; //low priority interrupt on conv complete
    14be:	82 a3       	std	Z+34, r24	; 0x22
    14c0:	08 95       	ret

000014c2 <init_ir_led>:
}

/*! \brief init ir leds (set multiplex chanels as outputs)*/
void init_ir_led(void){
	PORTF.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm;
    14c2:	87 e0       	ldi	r24, 0x07	; 7
    14c4:	e0 ea       	ldi	r30, 0xA0	; 160
    14c6:	f6 e0       	ldi	r31, 0x06	; 6
    14c8:	81 83       	std	Z+1, r24	; 0x01
    14ca:	08 95       	ret

000014cc <init_ir_driver>:
}

void init_ir_driver(void){
	init_adc();
    14cc:	0e 94 56 0a 	call	0x14ac	; 0x14ac <init_adc>
	init_ir_led();
    14d0:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <init_ir_led>
    14d4:	08 95       	ret

000014d6 <start_adc>:
/*! \brief starts adc-conversion on the inputpin input.
*	\param input pin to measure voltage. (values: 0 to 15)
*/
void start_adc(uint8_t input){
	//input between 0 and 15
	ADCA.CH0.MUXCTRL = (input<<3) | ADC_CH_MUXNEG_PIN1_gc; //setup mux: input channel | refference voltage
    14d6:	28 e0       	ldi	r18, 0x08	; 8
    14d8:	82 9f       	mul	r24, r18
    14da:	c0 01       	movw	r24, r0
    14dc:	11 24       	eor	r1, r1
    14de:	81 60       	ori	r24, 0x01	; 1
    14e0:	e0 e0       	ldi	r30, 0x00	; 0
    14e2:	f2 e0       	ldi	r31, 0x02	; 2
    14e4:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH0.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc; //start conv with 1x gain, diff mode
    14e6:	82 e8       	ldi	r24, 0x82	; 130
    14e8:	80 a3       	std	Z+32, r24	; 0x20
    14ea:	08 95       	ret

000014ec <ir_led_enable>:

/*! \brief enable led of ir distance sensor
*	\param led index of led
*/
void ir_led_enable(uint8_t led){
	PORTF.OUTCLR = 0b111;
    14ec:	a0 ea       	ldi	r26, 0xA0	; 160
    14ee:	b6 e0       	ldi	r27, 0x06	; 6
    14f0:	97 e0       	ldi	r25, 0x07	; 7
    14f2:	16 96       	adiw	r26, 0x06	; 6
    14f4:	9c 93       	st	X, r25
    14f6:	16 97       	sbiw	r26, 0x06	; 6
	PORTF.OUTSET = pgm_read_word(&ir_led_lut[led]);
    14f8:	e8 2f       	mov	r30, r24
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	e0 53       	subi	r30, 0x30	; 48
    14fe:	fc 4f       	sbci	r31, 0xFC	; 252
    1500:	85 91       	lpm	r24, Z+
    1502:	94 91       	lpm	r25, Z
    1504:	15 96       	adiw	r26, 0x05	; 5
    1506:	8c 93       	st	X, r24
    1508:	08 95       	ret

0000150a <measure_ir_distance>:

/*! \brief Measures distance
*	Starts measurement of ir distance.
*	led can be turned on or off (off: different led is turned on. WORKAROUND)
*/
void measure_ir_distance(uint8_t ir_led, bool led_enabled){
    150a:	cf 93       	push	r28
    150c:	c8 2f       	mov	r28, r24
	if (led_enabled){
    150e:	66 23       	and	r22, r22
    1510:	19 f0       	breq	.+6      	; 0x1518 <measure_ir_distance+0xe>
		ir_led_enable(ir_led);
    1512:	0e 94 76 0a 	call	0x14ec	; 0x14ec <ir_led_enable>
    1516:	09 c0       	rjmp	.+18     	; 0x152a <measure_ir_distance+0x20>
		}else{
		ir_led_enable((ir_led + 1) % 8);
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	2f 5f       	subi	r18, 0xFF	; 255
    151e:	3f 4f       	sbci	r19, 0xFF	; 255
    1520:	c9 01       	movw	r24, r18
    1522:	87 70       	andi	r24, 0x07	; 7
    1524:	90 78       	andi	r25, 0x80	; 128
    1526:	0e 94 76 0a 	call	0x14ec	; 0x14ec <ir_led_enable>
	}
	start_adc(ir_led + 8);
    152a:	8c 2f       	mov	r24, r28
    152c:	88 5f       	subi	r24, 0xF8	; 248
    152e:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <start_adc>
}
    1532:	cf 91       	pop	r28
    1534:	08 95       	ret

00001536 <measure_ir_distances>:


void measure_ir_distances(uint8_t start_led, uint8_t count, bool filtered){
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
    153a:	c8 2f       	mov	r28, r24
    153c:	d6 2f       	mov	r29, r22
	if (count == 1 && filtered){
    153e:	61 30       	cpi	r22, 0x01	; 1
    1540:	e9 f4       	brne	.+58     	; 0x157c <measure_ir_distances+0x46>
    1542:	44 23       	and	r20, r20
    1544:	91 f0       	breq	.+36     	; 0x156a <measure_ir_distances+0x34>
		adc_task = ADC_TASK_IR_FILTERED_ONCE;
    1546:	83 e0       	ldi	r24, 0x03	; 3
    1548:	80 93 3e 20 	sts	0x203E, r24
		ir_raw_stored = false;
    154c:	10 92 03 20 	sts	0x2003, r1
		ir_led_enable((start_led + 1) % 8); //Enable different LED (Workaround)
    1550:	2c 2f       	mov	r18, r28
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	2f 5f       	subi	r18, 0xFF	; 255
    1556:	3f 4f       	sbci	r19, 0xFF	; 255
    1558:	c9 01       	movw	r24, r18
    155a:	87 70       	andi	r24, 0x07	; 7
    155c:	90 78       	andi	r25, 0x80	; 128
    155e:	0e 94 76 0a 	call	0x14ec	; 0x14ec <ir_led_enable>
		conv_left = count * 2 * BUFFER_SIZE;
    1562:	80 e1       	ldi	r24, 0x10	; 16
    1564:	80 93 02 20 	sts	0x2002, r24
    1568:	28 c0       	rjmp	.+80     	; 0x15ba <measure_ir_distances+0x84>
		
		}else if(count == 1 && ~filtered){
		adc_task = ADC_TASK_IR_ONCE;
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	80 93 3e 20 	sts	0x203E, r24
		conv_left = count;
    1570:	80 93 02 20 	sts	0x2002, r24
		ir_led_enable(start_led);
    1574:	8c 2f       	mov	r24, r28
    1576:	0e 94 76 0a 	call	0x14ec	; 0x14ec <ir_led_enable>
    157a:	1f c0       	rjmp	.+62     	; 0x15ba <measure_ir_distances+0x84>
		
		}else if(count > 1 && filtered){
    157c:	62 30       	cpi	r22, 0x02	; 2
    157e:	e8 f0       	brcs	.+58     	; 0x15ba <measure_ir_distances+0x84>
    1580:	44 23       	and	r20, r20
    1582:	99 f0       	breq	.+38     	; 0x15aa <measure_ir_distances+0x74>
		adc_task = ADC_TASK_IR_FILTERED_CONTINUES;
    1584:	84 e0       	ldi	r24, 0x04	; 4
    1586:	80 93 3e 20 	sts	0x203E, r24
		ir_raw_stored = false;
    158a:	10 92 03 20 	sts	0x2003, r1
		ir_led_enable((start_led + 1) % 8); //Enable different LED (Workaround)
    158e:	2c 2f       	mov	r18, r28
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	2f 5f       	subi	r18, 0xFF	; 255
    1594:	3f 4f       	sbci	r19, 0xFF	; 255
    1596:	c9 01       	movw	r24, r18
    1598:	87 70       	andi	r24, 0x07	; 7
    159a:	90 78       	andi	r25, 0x80	; 128
    159c:	0e 94 76 0a 	call	0x14ec	; 0x14ec <ir_led_enable>
		conv_left = count * 2 * BUFFER_SIZE; //  for each ir sensor measure once with enabled and once with disabled led
    15a0:	d2 95       	swap	r29
    15a2:	d0 7f       	andi	r29, 0xF0	; 240
    15a4:	d0 93 02 20 	sts	0x2002, r29
    15a8:	08 c0       	rjmp	.+16     	; 0x15ba <measure_ir_distances+0x84>
		
		}else if(count > 1 && ~filtered){
		adc_task = ADC_TASK_IR_CONTINUES;
    15aa:	82 e0       	ldi	r24, 0x02	; 2
    15ac:	80 93 3e 20 	sts	0x203E, r24
		ir_led_enable(start_led);
    15b0:	8c 2f       	mov	r24, r28
    15b2:	0e 94 76 0a 	call	0x14ec	; 0x14ec <ir_led_enable>
		conv_left = count; //  for each ir sensor measure once with enabled led
    15b6:	d0 93 02 20 	sts	0x2002, r29
	}
	ir_data_buffer.head = 0;
    15ba:	10 92 47 20 	sts	0x2047, r1
	cur_ir_led = start_led;
    15be:	c0 93 4a 20 	sts	0x204A, r28
	start_adc(start_led + 8);
    15c2:	8c 2f       	mov	r24, r28
    15c4:	88 5f       	subi	r24, 0xF8	; 248
    15c6:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <start_adc>
}
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	08 95       	ret

000015d0 <ir_driver_is_measuring>:

bool ir_driver_is_measuring(void){
	return conv_left > 0;
    15d0:	90 91 02 20 	lds	r25, 0x2002
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	91 11       	cpse	r25, r1
    15d8:	01 c0       	rjmp	.+2      	; 0x15dc <ir_driver_is_measuring+0xc>
    15da:	80 e0       	ldi	r24, 0x00	; 0
}
    15dc:	08 95       	ret

000015de <ISR_adc_ir_driver>:


void ISR_adc_ir_driver()
{
	conv_left -= 1;
    15de:	80 91 02 20 	lds	r24, 0x2002
    15e2:	81 50       	subi	r24, 0x01	; 1
    15e4:	80 93 02 20 	sts	0x2002, r24
	
	if (adc_task == ADC_TASK_IR_CONTINUES || adc_task == ADC_TASK_IR_ONCE){
    15e8:	80 91 3e 20 	lds	r24, 0x203E
    15ec:	82 30       	cpi	r24, 0x02	; 2
    15ee:	21 f0       	breq	.+8      	; 0x15f8 <ISR_adc_ir_driver+0x1a>
    15f0:	80 91 3e 20 	lds	r24, 0x203E
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	f1 f4       	brne	.+60     	; 0x1634 <ISR_adc_ir_driver+0x56>
		// no filter, transmit result without any manipulation (except scaling to uint8)
		USART_TXBuffer_PutByte(&USART_data, ADCA.CH0.RES / (2047 / 255));
    15f8:	e0 e0       	ldi	r30, 0x00	; 0
    15fa:	f2 e0       	ldi	r31, 0x02	; 2
    15fc:	64 a1       	ldd	r22, Z+36	; 0x24
    15fe:	75 a1       	ldd	r23, Z+37	; 0x25
    1600:	76 95       	lsr	r23
    1602:	67 95       	ror	r22
    1604:	76 95       	lsr	r23
    1606:	67 95       	ror	r22
    1608:	76 95       	lsr	r23
    160a:	67 95       	ror	r22
    160c:	8f e1       	ldi	r24, 0x1F	; 31
    160e:	90 e2       	ldi	r25, 0x20	; 32
    1610:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <USART_TXBuffer_PutByte>
		cur_ir_led += 1;
    1614:	80 91 4a 20 	lds	r24, 0x204A
    1618:	8f 5f       	subi	r24, 0xFF	; 255
    161a:	80 93 4a 20 	sts	0x204A, r24
		if (conv_left>0){
    161e:	80 91 02 20 	lds	r24, 0x2002
    1622:	88 23       	and	r24, r24
    1624:	09 f4       	brne	.+2      	; 0x1628 <ISR_adc_ir_driver+0x4a>
    1626:	7c c0       	rjmp	.+248    	; 0x1720 <ISR_adc_ir_driver+0x142>
			measure_ir_distance(cur_ir_led, true);
    1628:	80 91 4a 20 	lds	r24, 0x204A
    162c:	61 e0       	ldi	r22, 0x01	; 1
    162e:	0e 94 85 0a 	call	0x150a	; 0x150a <measure_ir_distance>
    1632:	08 95       	ret
		}
		
		}else if(adc_task == ADC_TASK_IR_FILTERED_CONTINUES || adc_task == ADC_TASK_IR_FILTERED_ONCE){
    1634:	80 91 3e 20 	lds	r24, 0x203E
    1638:	84 30       	cpi	r24, 0x04	; 4
    163a:	29 f0       	breq	.+10     	; 0x1646 <ISR_adc_ir_driver+0x68>
    163c:	80 91 3e 20 	lds	r24, 0x203E
    1640:	83 30       	cpi	r24, 0x03	; 3
    1642:	09 f0       	breq	.+2      	; 0x1646 <ISR_adc_ir_driver+0x68>
    1644:	6d c0       	rjmp	.+218    	; 0x1720 <ISR_adc_ir_driver+0x142>
		// filter activated
		if (ir_raw_stored){
    1646:	80 91 03 20 	lds	r24, 0x2003
    164a:	88 23       	and	r24, r24
    164c:	09 f4       	brne	.+2      	; 0x1650 <ISR_adc_ir_driver+0x72>
    164e:	58 c0       	rjmp	.+176    	; 0x1700 <ISR_adc_ir_driver+0x122>
			if (ADCA.CH0.RES < last_adc){
    1650:	e0 e0       	ldi	r30, 0x00	; 0
    1652:	f2 e0       	ldi	r31, 0x02	; 2
    1654:	24 a1       	ldd	r18, Z+36	; 0x24
    1656:	35 a1       	ldd	r19, Z+37	; 0x25
    1658:	80 91 48 20 	lds	r24, 0x2048
    165c:	90 91 49 20 	lds	r25, 0x2049
    1660:	28 17       	cp	r18, r24
    1662:	39 07       	cpc	r19, r25
    1664:	38 f4       	brcc	.+14     	; 0x1674 <ISR_adc_ir_driver+0x96>
				ir_data_buffer.data[ir_data_buffer.head] = 0;
    1666:	e0 91 47 20 	lds	r30, 0x2047
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	e1 5c       	subi	r30, 0xC1	; 193
    166e:	ff 4d       	sbci	r31, 0xDF	; 223
    1670:	10 82       	st	Z, r1
    1672:	15 c0       	rjmp	.+42     	; 0x169e <ISR_adc_ir_driver+0xc0>
				}else{
				ir_data_buffer.data[ir_data_buffer.head] = pgm_read_word (&scaleIRTable[ADCA.CH0.RES - last_adc]);
    1674:	e0 e0       	ldi	r30, 0x00	; 0
    1676:	f2 e0       	ldi	r31, 0x02	; 2
    1678:	04 a0       	ldd	r0, Z+36	; 0x24
    167a:	f5 a1       	ldd	r31, Z+37	; 0x25
    167c:	e0 2d       	mov	r30, r0
    167e:	80 91 48 20 	lds	r24, 0x2048
    1682:	90 91 49 20 	lds	r25, 0x2049
    1686:	e8 1b       	sub	r30, r24
    1688:	f9 0b       	sbc	r31, r25
    168a:	e8 52       	subi	r30, 0x28	; 40
    168c:	fc 4f       	sbci	r31, 0xFC	; 252
    168e:	85 91       	lpm	r24, Z+
    1690:	94 91       	lpm	r25, Z
    1692:	e0 91 47 20 	lds	r30, 0x2047
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	e1 5c       	subi	r30, 0xC1	; 193
    169a:	ff 4d       	sbci	r31, 0xDF	; 223
    169c:	80 83       	st	Z, r24
			}
			ir_data_buffer.head += 1;
    169e:	80 91 47 20 	lds	r24, 0x2047
    16a2:	8f 5f       	subi	r24, 0xFF	; 255
			
			if (ir_data_buffer.head == BUFFER_SIZE){
    16a4:	88 30       	cpi	r24, 0x08	; 8
    16a6:	19 f0       	breq	.+6      	; 0x16ae <ISR_adc_ir_driver+0xd0>
			if (ADCA.CH0.RES < last_adc){
				ir_data_buffer.data[ir_data_buffer.head] = 0;
				}else{
				ir_data_buffer.data[ir_data_buffer.head] = pgm_read_word (&scaleIRTable[ADCA.CH0.RES - last_adc]);
			}
			ir_data_buffer.head += 1;
    16a8:	80 93 47 20 	sts	0x2047, r24
    16ac:	1d c0       	rjmp	.+58     	; 0x16e8 <ISR_adc_ir_driver+0x10a>
			
			if (ir_data_buffer.head == BUFFER_SIZE){
				// enough measurements stored, calculate average
				ir_data_buffer.head = 0;
    16ae:	10 92 47 20 	sts	0x2047, r1
    16b2:	ef e3       	ldi	r30, 0x3F	; 63
    16b4:	f0 e2       	ldi	r31, 0x20	; 32
bool ir_driver_is_measuring(void){
	return conv_left > 0;
}


void ISR_adc_ir_driver()
    16b6:	87 e4       	ldi	r24, 0x47	; 71
    16b8:	90 e2       	ldi	r25, 0x20	; 32
			ir_data_buffer.head += 1;
			
			if (ir_data_buffer.head == BUFFER_SIZE){
				// enough measurements stored, calculate average
				ir_data_buffer.head = 0;
				uint16_t avr_ir = 0;
    16ba:	60 e0       	ldi	r22, 0x00	; 0
    16bc:	70 e0       	ldi	r23, 0x00	; 0
				for (uint8_t i = 0;  i < BUFFER_SIZE; i++){
					avr_ir += ir_data_buffer.data[i];
    16be:	21 91       	ld	r18, Z+
    16c0:	62 0f       	add	r22, r18
    16c2:	71 1d       	adc	r23, r1
			
			if (ir_data_buffer.head == BUFFER_SIZE){
				// enough measurements stored, calculate average
				ir_data_buffer.head = 0;
				uint16_t avr_ir = 0;
				for (uint8_t i = 0;  i < BUFFER_SIZE; i++){
    16c4:	e8 17       	cp	r30, r24
    16c6:	f9 07       	cpc	r31, r25
    16c8:	d1 f7       	brne	.-12     	; 0x16be <ISR_adc_ir_driver+0xe0>
					avr_ir += ir_data_buffer.data[i];
				}
				avr_ir /= BUFFER_SIZE;
    16ca:	76 95       	lsr	r23
    16cc:	67 95       	ror	r22
    16ce:	76 95       	lsr	r23
    16d0:	67 95       	ror	r22
    16d2:	76 95       	lsr	r23
    16d4:	67 95       	ror	r22
				USART_TXBuffer_PutByte(&USART_data, avr_ir);
    16d6:	8f e1       	ldi	r24, 0x1F	; 31
    16d8:	90 e2       	ldi	r25, 0x20	; 32
    16da:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <USART_TXBuffer_PutByte>
				cur_ir_led += 1;
    16de:	80 91 4a 20 	lds	r24, 0x204A
    16e2:	8f 5f       	subi	r24, 0xFF	; 255
    16e4:	80 93 4a 20 	sts	0x204A, r24
			}
			ir_raw_stored = false;
    16e8:	10 92 03 20 	sts	0x2003, r1
			if (conv_left>0){
    16ec:	80 91 02 20 	lds	r24, 0x2002
    16f0:	88 23       	and	r24, r24
    16f2:	b1 f0       	breq	.+44     	; 0x1720 <ISR_adc_ir_driver+0x142>
				measure_ir_distance(cur_ir_led, false);
    16f4:	80 91 4a 20 	lds	r24, 0x204A
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	0e 94 85 0a 	call	0x150a	; 0x150a <measure_ir_distance>
    16fe:	08 95       	ret
			}
			}else{
			//store daylight value and measure value with turned on led again
			ir_raw_stored = true;
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	80 93 03 20 	sts	0x2003, r24
			last_adc = ADCA.CH0.RES;
    1706:	e0 e0       	ldi	r30, 0x00	; 0
    1708:	f2 e0       	ldi	r31, 0x02	; 2
    170a:	84 a1       	ldd	r24, Z+36	; 0x24
    170c:	95 a1       	ldd	r25, Z+37	; 0x25
    170e:	80 93 48 20 	sts	0x2048, r24
    1712:	90 93 49 20 	sts	0x2049, r25
			measure_ir_distance(cur_ir_led, true);
    1716:	80 91 4a 20 	lds	r24, 0x204A
    171a:	61 e0       	ldi	r22, 0x01	; 1
    171c:	0e 94 85 0a 	call	0x150a	; 0x150a <measure_ir_distance>
    1720:	08 95       	ret

00001722 <set_motor_operation_mode>:
#include "motor_driver.h"

void set_motor_operation_mode(motor_t motor, motor_op_mode_t op){
	PORTE.OUTCLR = 0b11 << motor;
    1722:	23 e0       	ldi	r18, 0x03	; 3
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	08 2e       	mov	r0, r24
    1728:	02 c0       	rjmp	.+4      	; 0x172e <set_motor_operation_mode+0xc>
    172a:	22 0f       	add	r18, r18
    172c:	33 1f       	adc	r19, r19
    172e:	0a 94       	dec	r0
    1730:	e2 f7       	brpl	.-8      	; 0x172a <set_motor_operation_mode+0x8>
    1732:	e0 e8       	ldi	r30, 0x80	; 128
    1734:	f6 e0       	ldi	r31, 0x06	; 6
    1736:	26 83       	std	Z+6, r18	; 0x06
	PORTE.OUTSET = op << motor;
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	9b 01       	movw	r18, r22
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <set_motor_operation_mode+0x20>
    173e:	22 0f       	add	r18, r18
    1740:	33 1f       	adc	r19, r19
    1742:	8a 95       	dec	r24
    1744:	e2 f7       	brpl	.-8      	; 0x173e <set_motor_operation_mode+0x1c>
    1746:	25 83       	std	Z+5, r18	; 0x05
    1748:	08 95       	ret

0000174a <init_motor>:
}

void init_motor(void){
 	PORTE.DIRSET = PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm; //Set Motor control as output
    174a:	80 ef       	ldi	r24, 0xF0	; 240
    174c:	e0 e8       	ldi	r30, 0x80	; 128
    174e:	f6 e0       	ldi	r31, 0x06	; 6
    1750:	81 83       	std	Z+1, r24	; 0x01
 	PORTA.DIRSET = PIN6_bm; // Standby as output
    1752:	80 e4       	ldi	r24, 0x40	; 64
    1754:	e0 e0       	ldi	r30, 0x00	; 0
    1756:	f6 e0       	ldi	r31, 0x06	; 6
    1758:	81 83       	std	Z+1, r24	; 0x01
 	PORTC.DIRSET = PIN2_bm | PIN3_bm; //PWM as output
    175a:	8c e0       	ldi	r24, 0x0C	; 12
    175c:	e0 e4       	ldi	r30, 0x40	; 64
    175e:	f6 e0       	ldi	r31, 0x06	; 6
    1760:	81 83       	std	Z+1, r24	; 0x01
 	
 	TCC0.CTRLA = TC_CLKSEL_DIV1_gc; //prescaler: Clk/1
    1762:	e0 e0       	ldi	r30, 0x00	; 0
    1764:	f8 e0       	ldi	r31, 0x08	; 8
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	80 83       	st	Z, r24
 	TCC0.CTRLB = TC0_CCCEN_bm|TC0_CCDEN_bm| TC_WGMODE_SS_gc; //enable pwm output, Single slope pwm
    176a:	83 ec       	ldi	r24, 0xC3	; 195
    176c:	81 83       	std	Z+1, r24	; 0x01
 	
 	TCC0.PER = 0xff;
    176e:	8f ef       	ldi	r24, 0xFF	; 255
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	86 a3       	std	Z+38, r24	; 0x26
    1774:	97 a3       	std	Z+39, r25	; 0x27
    1776:	08 95       	ret

00001778 <set_motor_speed>:
	

}

void set_motor_speed(motor_t motor, uint8_t speed){
    1778:	6b 3a       	cpi	r22, 0xAB	; 171
    177a:	08 f0       	brcs	.+2      	; 0x177e <set_motor_speed+0x6>
    177c:	6a ea       	ldi	r22, 0xAA	; 170
	if(speed > 0xaa){//ensure 5V average
		speed = 0xaa;
	}
	
	if(motor == motor_l){
    177e:	84 30       	cpi	r24, 0x04	; 4
    1780:	31 f4       	brne	.+12     	; 0x178e <set_motor_speed+0x16>
		TCC0.CCD = speed;
    1782:	70 e0       	ldi	r23, 0x00	; 0
    1784:	e0 e0       	ldi	r30, 0x00	; 0
    1786:	f8 e0       	ldi	r31, 0x08	; 8
    1788:	66 a7       	std	Z+46, r22	; 0x2e
    178a:	77 a7       	std	Z+47, r23	; 0x2f
    178c:	08 95       	ret
	} else if(motor == motor_r){
    178e:	86 30       	cpi	r24, 0x06	; 6
    1790:	29 f4       	brne	.+10     	; 0x179c <set_motor_speed+0x24>
		TCC0.CCC = speed;
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	e0 e0       	ldi	r30, 0x00	; 0
    1796:	f8 e0       	ldi	r31, 0x08	; 8
    1798:	64 a7       	std	Z+44, r22	; 0x2c
    179a:	75 a7       	std	Z+45, r23	; 0x2d
    179c:	08 95       	ret

0000179e <set_motor_on>:
	}
}

void set_motor_on(bool b){
	if(b){
    179e:	88 23       	and	r24, r24
    17a0:	29 f0       	breq	.+10     	; 0x17ac <set_motor_on+0xe>
		PORTA.OUTSET = PIN6_bm;
    17a2:	80 e4       	ldi	r24, 0x40	; 64
    17a4:	e0 e0       	ldi	r30, 0x00	; 0
    17a6:	f6 e0       	ldi	r31, 0x06	; 6
    17a8:	85 83       	std	Z+5, r24	; 0x05
    17aa:	08 95       	ret
		}else{
		PORTA.OUTCLR = PIN6_bm;
    17ac:	80 e4       	ldi	r24, 0x40	; 64
    17ae:	e0 e0       	ldi	r30, 0x00	; 0
    17b0:	f6 e0       	ldi	r31, 0x06	; 6
    17b2:	86 83       	std	Z+6, r24	; 0x06
    17b4:	08 95       	ret

000017b6 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
    17b6:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
    17b8:	60 83       	st	Z, r22
    17ba:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
    17bc:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
    17be:	14 8e       	std	Z+28, r1	; 0x1c
	usart_data->buffer.RX_Head = 0;
    17c0:	13 8e       	std	Z+27, r1	; 0x1b
	usart_data->buffer.TX_Tail = 0;
    17c2:	16 8e       	std	Z+30, r1	; 0x1e
	usart_data->buffer.TX_Head = 0;
    17c4:	15 8e       	std	Z+29, r1	; 0x1d
    17c6:	08 95       	ret

000017c8 <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
    17c8:	fc 01       	movw	r30, r24
    17ca:	25 8d       	ldd	r18, Z+29	; 0x1d
	uint8_t tempTail = usart_data->buffer.TX_Tail;
    17cc:	96 8d       	ldd	r25, Z+30	; 0x1e
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
    17ce:	2f 5f       	subi	r18, 0xFF	; 255
    17d0:	27 70       	andi	r18, 0x07	; 7
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	29 13       	cpse	r18, r25
    17d6:	01 c0       	rjmp	.+2      	; 0x17da <USART_TXBuffer_FreeSpace+0x12>
    17d8:	80 e0       	ldi	r24, 0x00	; 0
}
    17da:	08 95       	ret

000017dc <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
    17dc:	1f 93       	push	r17
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	ec 01       	movw	r28, r24
    17e4:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
    17e6:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
    17ea:	88 23       	and	r24, r24
    17ec:	79 f0       	breq	.+30     	; 0x180c <USART_TXBuffer_PutByte+0x30>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
    17ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
	  	TXbufPtr->TX[tempTX_Head]= data;
    17f0:	fe 01       	movw	r30, r28
    17f2:	e9 0f       	add	r30, r25
    17f4:	f1 1d       	adc	r31, r1
    17f6:	13 8b       	std	Z+19, r17	; 0x13
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
    17f8:	9f 5f       	subi	r25, 0xFF	; 255
    17fa:	97 70       	andi	r25, 0x07	; 7
    17fc:	9d 8f       	std	Y+29, r25	; 0x1d

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
    17fe:	e8 81       	ld	r30, Y
    1800:	f9 81       	ldd	r31, Y+1	; 0x01
    1802:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
    1804:	9c 7f       	andi	r25, 0xFC	; 252
    1806:	2a 81       	ldd	r18, Y+2	; 0x02
    1808:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
    180a:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	1f 91       	pop	r17
    1812:	08 95       	ret

00001814 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    1814:	fc 01       	movw	r30, r24
    1816:	23 8d       	ldd	r18, Z+27	; 0x1b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    1818:	94 8d       	ldd	r25, Z+28	; 0x1c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	29 13       	cpse	r18, r25
    181e:	01 c0       	rjmp	.+2      	; 0x1822 <USART_RXBufferData_Available+0xe>
    1820:	80 e0       	ldi	r24, 0x00	; 0
}
    1822:	08 95       	ret

00001824 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
    1824:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    1826:	84 8d       	ldd	r24, Z+28	; 0x1c
    1828:	df 01       	movw	r26, r30
    182a:	a8 0f       	add	r26, r24
    182c:	b1 1d       	adc	r27, r1
    182e:	13 96       	adiw	r26, 0x03	; 3
    1830:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    1832:	94 8d       	ldd	r25, Z+28	; 0x1c
    1834:	9f 5f       	subi	r25, 0xFF	; 255
    1836:	9f 70       	andi	r25, 0x0F	; 15
    1838:	94 8f       	std	Z+28, r25	; 0x1c

	return ans;
}
    183a:	08 95       	ret

0000183c <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
    183c:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
    183e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1840:	8f 5f       	subi	r24, 0xFF	; 255
    1842:	8f 70       	andi	r24, 0x0F	; 15

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
    1844:	94 8d       	ldd	r25, Z+28	; 0x1c
	uint8_t data = usart_data->usart->DATA;
    1846:	a0 81       	ld	r26, Z
    1848:	b1 81       	ldd	r27, Z+1	; 0x01
    184a:	2c 91       	ld	r18, X

	if (tempRX_Head == tempRX_Tail) {
    184c:	89 17       	cp	r24, r25
    184e:	49 f0       	breq	.+18     	; 0x1862 <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    1850:	93 8d       	ldd	r25, Z+27	; 0x1b
    1852:	df 01       	movw	r26, r30
    1854:	a9 0f       	add	r26, r25
    1856:	b1 1d       	adc	r27, r1
    1858:	13 96       	adiw	r26, 0x03	; 3
    185a:	2c 93       	st	X, r18
		usart_data->buffer.RX_Head = tempRX_Head;
    185c:	83 8f       	std	Z+27, r24	; 0x1b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
    1862:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
    1864:	08 95       	ret

00001866 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    1866:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    1868:	86 8d       	ldd	r24, Z+30	; 0x1e
	if (bufPtr->TX_Head == tempTX_Tail){
    186a:	95 8d       	ldd	r25, Z+29	; 0x1d
    186c:	98 13       	cpse	r25, r24
    186e:	07 c0       	rjmp	.+14     	; 0x187e <USART_DataRegEmpty+0x18>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    1870:	01 90       	ld	r0, Z+
    1872:	f0 81       	ld	r31, Z
    1874:	e0 2d       	mov	r30, r0
    1876:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    1878:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
    187a:	83 83       	std	Z+3, r24	; 0x03
    187c:	08 95       	ret

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    187e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1880:	df 01       	movw	r26, r30
    1882:	a8 0f       	add	r26, r24
    1884:	b1 1d       	adc	r27, r1
    1886:	53 96       	adiw	r26, 0x13	; 19
    1888:	8c 91       	ld	r24, X
		usart_data->usart->DATA = data;
    188a:	a0 81       	ld	r26, Z
    188c:	b1 81       	ldd	r27, Z+1	; 0x01
    188e:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    1890:	86 8d       	ldd	r24, Z+30	; 0x1e
    1892:	8f 5f       	subi	r24, 0xFF	; 255
    1894:	87 70       	andi	r24, 0x07	; 7
    1896:	86 8f       	std	Z+30, r24	; 0x1e
    1898:	08 95       	ret

0000189a <xmega_tcca_clk_freq_sel>:

unsigned char clk_sel = 0;


void xmega_tcca_clk_freq_sel(unsigned char select){
	clk_sel = select;
    189a:	80 93 04 20 	sts	0x2004, r24
    189e:	08 95       	ret

000018a0 <xmega_freq_cntr_init>:


// Connect Event Chan to the input pin EVENT_SYSTEM_INPUT PIN to TCCA's clock input pin.


    EVSYS.CH0MUX = EVENT_SYSTEM_INPUT_PIN; 
    18a0:	e0 e8       	ldi	r30, 0x80	; 128
    18a2:	f1 e0       	ldi	r31, 0x01	; 1
    18a4:	88 e6       	ldi	r24, 0x68	; 104
    18a6:	80 83       	st	Z, r24


// Set Event Chan 1 to trigger on CNTRA OVF causing an Input Capture on CNTB  
	
	EVSYS.CH1MUX = EVSYS_CHMUX_TCCA_OVF_gc; 
    18a8:	80 ed       	ldi	r24, 0xD0	; 208
    18aa:	81 83       	std	Z+1, r24	; 0x01

//Select event channel 0 as clock source for TCCB

	TCCB.CTRLA = TC_CLKSEL_EVCH0_gc; 
    18ac:	e0 e0       	ldi	r30, 0x00	; 0
    18ae:	fb e0       	ldi	r31, 0x0B	; 11
    18b0:	88 e0       	ldi	r24, 0x08	; 8
    18b2:	80 83       	st	Z, r24

// Select Event Action 0001 => Input Capture, and Event Source select = 0b1001 => 

	TCCB.CTRLD = (TC1_EVACT_gm & TCB_EVACT0_bm) | (TCB_EVSEL_gm & (TCB_EVSEL3_bm | TCB_EVSEL0_bm));
    18b4:	89 e2       	ldi	r24, 0x29	; 41
    18b6:	83 83       	std	Z+3, r24	; 0x03

#endif

//Select Event Chan1 as TCCB Input Capture enable to Capt Channel A

	TCCB.CTRLB = TCB_CCAEN_bm; // Capture enable
    18b8:	80 e1       	ldi	r24, 0x10	; 16
    18ba:	81 83       	std	Z+1, r24	; 0x01
    18bc:	08 95       	ret

000018be <xmega_freq_cntr_start_meas>:
} 

void  xmega_freq_cntr_start_meas(void){ 

/*	Clear input signal counter CCCB (Timer B) */
	TCCB.CNTL =	0;
    18be:	e0 e0       	ldi	r30, 0x00	; 0
    18c0:	fb e0       	ldi	r31, 0x0B	; 11
    18c2:	10 a2       	std	Z+32, r1	; 0x20
	TCCB.CNTH =	0;
    18c4:	11 a2       	std	Z+33, r1	; 0x21
	ic_result = 0;
    18c6:	10 92 05 20 	sts	0x2005, r1
    18ca:	10 92 06 20 	sts	0x2006, r1
	TCCB_INTFLAGS |= TCCB_OVFIF_bm;
    18ce:	ec e0       	ldi	r30, 0x0C	; 12
    18d0:	fb e0       	ldi	r31, 0x0B	; 11
    18d2:	80 81       	ld	r24, Z
    18d4:	80 83       	st	Z, r24
 *	results are ready.
 *
 */


	TCCA_INTFLAGS |= TCCA_OVFIF_bm;
    18d6:	ec e0       	ldi	r30, 0x0C	; 12
    18d8:	f9 e0       	ldi	r31, 0x09	; 9
    18da:	80 81       	ld	r24, Z
    18dc:	81 60       	ori	r24, 0x01	; 1
    18de:	80 83       	st	Z, r24

/*	Load CCCA (timer A) with gate count to OVF value (nominally  125 msec)*/

	TCCA.CNT = TCCA_CNT_TO_OVF;
    18e0:	e0 e0       	ldi	r30, 0x00	; 0
    18e2:	f9 e0       	ldi	r31, 0x09	; 9
    18e4:	8b ed       	ldi	r24, 0xDB	; 219
    18e6:	9b e0       	ldi	r25, 0x0B	; 11
    18e8:	80 a3       	std	Z+32, r24	; 0x20
    18ea:	91 a3       	std	Z+33, r25	; 0x21
/*  Set TCCA interrupt priority level to Medium */

	TCCA.INTCTRLA = TC_OVFINTLVL_MED_gc;
    18ec:	82 e0       	ldi	r24, 0x02	; 2
    18ee:	86 83       	std	Z+6, r24	; 0x06

/*  Set Prog Interrupt Ctrlr to mid-level Ints enabled for TCCA */

	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
    18f0:	a0 ea       	ldi	r26, 0xA0	; 160
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	12 96       	adiw	r26, 0x02	; 2
    18f6:	8c 91       	ld	r24, X
    18f8:	12 97       	sbiw	r26, 0x02	; 2
    18fa:	82 60       	ori	r24, 0x02	; 2
    18fc:	12 96       	adiw	r26, 0x02	; 2
    18fe:	8c 93       	st	X, r24


// TimerA set clock input based on divider to clk_sel.

	TCCA.CTRLA =  (clk_sel & TC0_CLKSEL_gm);
    1900:	80 91 04 20 	lds	r24, 0x2004
    1904:	8f 70       	andi	r24, 0x0F	; 15
    1906:	80 83       	st	Z, r24
    1908:	08 95       	ret

0000190a <xmega_get_result>:
#if !EXPAND_TO_32_BITS

unsigned int xmega_get_result(void){ 
	
	return	ic_result;
}
    190a:	80 91 05 20 	lds	r24, 0x2005
    190e:	90 91 06 20 	lds	r25, 0x2006
    1912:	08 95       	ret

00001914 <xmega_freq_cntr_clr_result>:
#endif


void	xmega_freq_cntr_clr_result(void){

		ic_result = 0;
    1914:	10 92 05 20 	sts	0x2005, r1
    1918:	10 92 06 20 	sts	0x2006, r1
    191c:	08 95       	ret

0000191e <__vector_77>:
/*!  The following ISR is executed when TCCA overflows.  This will stop the clock to TCCA 
 *  and combine the upper and lower 8 bits of the TCCB capture register into ic_result
 */


ISR(TCCA_OVF_vect){
    191e:	1f 92       	push	r1
    1920:	0f 92       	push	r0
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	0f 92       	push	r0
    1926:	11 24       	eor	r1, r1
    1928:	0b b6       	in	r0, 0x3b	; 59
    192a:	0f 92       	push	r0
    192c:	2f 93       	push	r18
    192e:	3f 93       	push	r19
    1930:	8f 93       	push	r24
    1932:	9f 93       	push	r25
    1934:	ef 93       	push	r30
    1936:	ff 93       	push	r31
/* Stop TCCA timer */
		TCCA.CTRLA = ( TCCA.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    1938:	e0 e0       	ldi	r30, 0x00	; 0
    193a:	f9 e0       	ldi	r31, 0x09	; 9
    193c:	80 81       	ld	r24, Z
    193e:	80 7f       	andi	r24, 0xF0	; 240
    1940:	80 83       	st	Z, r24

#if !EXPAND_TO_32_BITS
		{																						;
		if((TCCB_INTFLAGS & 0x01) != 0)	ic_result = 0xffff; //return TCCB OVF via 0xffff
    1942:	80 91 0c 0b 	lds	r24, 0x0B0C
    1946:	80 ff       	sbrs	r24, 0
    1948:	07 c0       	rjmp	.+14     	; 0x1958 <__vector_77+0x3a>
    194a:	8f ef       	ldi	r24, 0xFF	; 255
    194c:	9f ef       	ldi	r25, 0xFF	; 255
    194e:	80 93 05 20 	sts	0x2005, r24
    1952:	90 93 06 20 	sts	0x2006, r25
    1956:	0c c0       	rjmp	.+24     	; 0x1970 <__vector_77+0x52>
		else 	ic_result= TCCB.CCABUFL + (TCCB.CCABUFH<<8);
    1958:	e0 e0       	ldi	r30, 0x00	; 0
    195a:	fb e0       	ldi	r31, 0x0B	; 11
    195c:	20 ad       	ldd	r18, Z+56	; 0x38
    195e:	31 ad       	ldd	r19, Z+57	; 0x39
    1960:	93 2f       	mov	r25, r19
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	82 0f       	add	r24, r18
    1966:	91 1d       	adc	r25, r1
    1968:	80 93 05 20 	sts	0x2005, r24
    196c:	90 93 06 20 	sts	0x2006, r25
			ic_result= (TCCC.CCABUFL*65536) + (0xffff&(unsigned long)(TCCB.CCABUFL + (TCCB.CCABUFH<<8)));
		}

#endif

}
    1970:	ff 91       	pop	r31
    1972:	ef 91       	pop	r30
    1974:	9f 91       	pop	r25
    1976:	8f 91       	pop	r24
    1978:	3f 91       	pop	r19
    197a:	2f 91       	pop	r18
    197c:	0f 90       	pop	r0
    197e:	0b be       	out	0x3b, r0	; 59
    1980:	0f 90       	pop	r0
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	0f 90       	pop	r0
    1986:	1f 90       	pop	r1
    1988:	18 95       	reti

0000198a <__subsf3>:
    198a:	50 58       	subi	r21, 0x80	; 128

0000198c <__addsf3>:
    198c:	bb 27       	eor	r27, r27
    198e:	aa 27       	eor	r26, r26
    1990:	0e d0       	rcall	.+28     	; 0x19ae <__addsf3x>
    1992:	0d c1       	rjmp	.+538    	; 0x1bae <__fp_round>
    1994:	fe d0       	rcall	.+508    	; 0x1b92 <__fp_pscA>
    1996:	30 f0       	brcs	.+12     	; 0x19a4 <__addsf3+0x18>
    1998:	03 d1       	rcall	.+518    	; 0x1ba0 <__fp_pscB>
    199a:	20 f0       	brcs	.+8      	; 0x19a4 <__addsf3+0x18>
    199c:	31 f4       	brne	.+12     	; 0x19aa <__addsf3+0x1e>
    199e:	9f 3f       	cpi	r25, 0xFF	; 255
    19a0:	11 f4       	brne	.+4      	; 0x19a6 <__addsf3+0x1a>
    19a2:	1e f4       	brtc	.+6      	; 0x19aa <__addsf3+0x1e>
    19a4:	f3 c0       	rjmp	.+486    	; 0x1b8c <__fp_nan>
    19a6:	0e f4       	brtc	.+2      	; 0x19aa <__addsf3+0x1e>
    19a8:	e0 95       	com	r30
    19aa:	e7 fb       	bst	r30, 7
    19ac:	e9 c0       	rjmp	.+466    	; 0x1b80 <__fp_inf>

000019ae <__addsf3x>:
    19ae:	e9 2f       	mov	r30, r25
    19b0:	0f d1       	rcall	.+542    	; 0x1bd0 <__fp_split3>
    19b2:	80 f3       	brcs	.-32     	; 0x1994 <__addsf3+0x8>
    19b4:	ba 17       	cp	r27, r26
    19b6:	62 07       	cpc	r22, r18
    19b8:	73 07       	cpc	r23, r19
    19ba:	84 07       	cpc	r24, r20
    19bc:	95 07       	cpc	r25, r21
    19be:	18 f0       	brcs	.+6      	; 0x19c6 <__addsf3x+0x18>
    19c0:	71 f4       	brne	.+28     	; 0x19de <__addsf3x+0x30>
    19c2:	9e f5       	brtc	.+102    	; 0x1a2a <__addsf3x+0x7c>
    19c4:	27 c1       	rjmp	.+590    	; 0x1c14 <__fp_zero>
    19c6:	0e f4       	brtc	.+2      	; 0x19ca <__addsf3x+0x1c>
    19c8:	e0 95       	com	r30
    19ca:	0b 2e       	mov	r0, r27
    19cc:	ba 2f       	mov	r27, r26
    19ce:	a0 2d       	mov	r26, r0
    19d0:	0b 01       	movw	r0, r22
    19d2:	b9 01       	movw	r22, r18
    19d4:	90 01       	movw	r18, r0
    19d6:	0c 01       	movw	r0, r24
    19d8:	ca 01       	movw	r24, r20
    19da:	a0 01       	movw	r20, r0
    19dc:	11 24       	eor	r1, r1
    19de:	ff 27       	eor	r31, r31
    19e0:	59 1b       	sub	r21, r25
    19e2:	99 f0       	breq	.+38     	; 0x1a0a <__addsf3x+0x5c>
    19e4:	59 3f       	cpi	r21, 0xF9	; 249
    19e6:	50 f4       	brcc	.+20     	; 0x19fc <__addsf3x+0x4e>
    19e8:	50 3e       	cpi	r21, 0xE0	; 224
    19ea:	68 f1       	brcs	.+90     	; 0x1a46 <__addsf3x+0x98>
    19ec:	1a 16       	cp	r1, r26
    19ee:	f0 40       	sbci	r31, 0x00	; 0
    19f0:	a2 2f       	mov	r26, r18
    19f2:	23 2f       	mov	r18, r19
    19f4:	34 2f       	mov	r19, r20
    19f6:	44 27       	eor	r20, r20
    19f8:	58 5f       	subi	r21, 0xF8	; 248
    19fa:	f3 cf       	rjmp	.-26     	; 0x19e2 <__addsf3x+0x34>
    19fc:	46 95       	lsr	r20
    19fe:	37 95       	ror	r19
    1a00:	27 95       	ror	r18
    1a02:	a7 95       	ror	r26
    1a04:	f0 40       	sbci	r31, 0x00	; 0
    1a06:	53 95       	inc	r21
    1a08:	c9 f7       	brne	.-14     	; 0x19fc <__addsf3x+0x4e>
    1a0a:	7e f4       	brtc	.+30     	; 0x1a2a <__addsf3x+0x7c>
    1a0c:	1f 16       	cp	r1, r31
    1a0e:	ba 0b       	sbc	r27, r26
    1a10:	62 0b       	sbc	r22, r18
    1a12:	73 0b       	sbc	r23, r19
    1a14:	84 0b       	sbc	r24, r20
    1a16:	ba f0       	brmi	.+46     	; 0x1a46 <__addsf3x+0x98>
    1a18:	91 50       	subi	r25, 0x01	; 1
    1a1a:	a1 f0       	breq	.+40     	; 0x1a44 <__addsf3x+0x96>
    1a1c:	ff 0f       	add	r31, r31
    1a1e:	bb 1f       	adc	r27, r27
    1a20:	66 1f       	adc	r22, r22
    1a22:	77 1f       	adc	r23, r23
    1a24:	88 1f       	adc	r24, r24
    1a26:	c2 f7       	brpl	.-16     	; 0x1a18 <__addsf3x+0x6a>
    1a28:	0e c0       	rjmp	.+28     	; 0x1a46 <__addsf3x+0x98>
    1a2a:	ba 0f       	add	r27, r26
    1a2c:	62 1f       	adc	r22, r18
    1a2e:	73 1f       	adc	r23, r19
    1a30:	84 1f       	adc	r24, r20
    1a32:	48 f4       	brcc	.+18     	; 0x1a46 <__addsf3x+0x98>
    1a34:	87 95       	ror	r24
    1a36:	77 95       	ror	r23
    1a38:	67 95       	ror	r22
    1a3a:	b7 95       	ror	r27
    1a3c:	f7 95       	ror	r31
    1a3e:	9e 3f       	cpi	r25, 0xFE	; 254
    1a40:	08 f0       	brcs	.+2      	; 0x1a44 <__addsf3x+0x96>
    1a42:	b3 cf       	rjmp	.-154    	; 0x19aa <__addsf3+0x1e>
    1a44:	93 95       	inc	r25
    1a46:	88 0f       	add	r24, r24
    1a48:	08 f0       	brcs	.+2      	; 0x1a4c <__addsf3x+0x9e>
    1a4a:	99 27       	eor	r25, r25
    1a4c:	ee 0f       	add	r30, r30
    1a4e:	97 95       	ror	r25
    1a50:	87 95       	ror	r24
    1a52:	08 95       	ret

00001a54 <__cmpsf2>:
    1a54:	71 d0       	rcall	.+226    	; 0x1b38 <__fp_cmp>
    1a56:	08 f4       	brcc	.+2      	; 0x1a5a <__cmpsf2+0x6>
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	08 95       	ret

00001a5c <__fixsfsi>:
    1a5c:	04 d0       	rcall	.+8      	; 0x1a66 <__fixunssfsi>
    1a5e:	68 94       	set
    1a60:	b1 11       	cpse	r27, r1
    1a62:	d9 c0       	rjmp	.+434    	; 0x1c16 <__fp_szero>
    1a64:	08 95       	ret

00001a66 <__fixunssfsi>:
    1a66:	bc d0       	rcall	.+376    	; 0x1be0 <__fp_splitA>
    1a68:	88 f0       	brcs	.+34     	; 0x1a8c <__fixunssfsi+0x26>
    1a6a:	9f 57       	subi	r25, 0x7F	; 127
    1a6c:	90 f0       	brcs	.+36     	; 0x1a92 <__fixunssfsi+0x2c>
    1a6e:	b9 2f       	mov	r27, r25
    1a70:	99 27       	eor	r25, r25
    1a72:	b7 51       	subi	r27, 0x17	; 23
    1a74:	a0 f0       	brcs	.+40     	; 0x1a9e <__fixunssfsi+0x38>
    1a76:	d1 f0       	breq	.+52     	; 0x1aac <__fixunssfsi+0x46>
    1a78:	66 0f       	add	r22, r22
    1a7a:	77 1f       	adc	r23, r23
    1a7c:	88 1f       	adc	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	1a f0       	brmi	.+6      	; 0x1a88 <__fixunssfsi+0x22>
    1a82:	ba 95       	dec	r27
    1a84:	c9 f7       	brne	.-14     	; 0x1a78 <__fixunssfsi+0x12>
    1a86:	12 c0       	rjmp	.+36     	; 0x1aac <__fixunssfsi+0x46>
    1a88:	b1 30       	cpi	r27, 0x01	; 1
    1a8a:	81 f0       	breq	.+32     	; 0x1aac <__fixunssfsi+0x46>
    1a8c:	c3 d0       	rcall	.+390    	; 0x1c14 <__fp_zero>
    1a8e:	b1 e0       	ldi	r27, 0x01	; 1
    1a90:	08 95       	ret
    1a92:	c0 c0       	rjmp	.+384    	; 0x1c14 <__fp_zero>
    1a94:	67 2f       	mov	r22, r23
    1a96:	78 2f       	mov	r23, r24
    1a98:	88 27       	eor	r24, r24
    1a9a:	b8 5f       	subi	r27, 0xF8	; 248
    1a9c:	39 f0       	breq	.+14     	; 0x1aac <__fixunssfsi+0x46>
    1a9e:	b9 3f       	cpi	r27, 0xF9	; 249
    1aa0:	cc f3       	brlt	.-14     	; 0x1a94 <__fixunssfsi+0x2e>
    1aa2:	86 95       	lsr	r24
    1aa4:	77 95       	ror	r23
    1aa6:	67 95       	ror	r22
    1aa8:	b3 95       	inc	r27
    1aaa:	d9 f7       	brne	.-10     	; 0x1aa2 <__fixunssfsi+0x3c>
    1aac:	3e f4       	brtc	.+14     	; 0x1abc <__fixunssfsi+0x56>
    1aae:	90 95       	com	r25
    1ab0:	80 95       	com	r24
    1ab2:	70 95       	com	r23
    1ab4:	61 95       	neg	r22
    1ab6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aba:	9f 4f       	sbci	r25, 0xFF	; 255
    1abc:	08 95       	ret

00001abe <__floatunsisf>:
    1abe:	e8 94       	clt
    1ac0:	09 c0       	rjmp	.+18     	; 0x1ad4 <__floatsisf+0x12>

00001ac2 <__floatsisf>:
    1ac2:	97 fb       	bst	r25, 7
    1ac4:	3e f4       	brtc	.+14     	; 0x1ad4 <__floatsisf+0x12>
    1ac6:	90 95       	com	r25
    1ac8:	80 95       	com	r24
    1aca:	70 95       	com	r23
    1acc:	61 95       	neg	r22
    1ace:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad4:	99 23       	and	r25, r25
    1ad6:	a9 f0       	breq	.+42     	; 0x1b02 <__floatsisf+0x40>
    1ad8:	f9 2f       	mov	r31, r25
    1ada:	96 e9       	ldi	r25, 0x96	; 150
    1adc:	bb 27       	eor	r27, r27
    1ade:	93 95       	inc	r25
    1ae0:	f6 95       	lsr	r31
    1ae2:	87 95       	ror	r24
    1ae4:	77 95       	ror	r23
    1ae6:	67 95       	ror	r22
    1ae8:	b7 95       	ror	r27
    1aea:	f1 11       	cpse	r31, r1
    1aec:	f8 cf       	rjmp	.-16     	; 0x1ade <__floatsisf+0x1c>
    1aee:	fa f4       	brpl	.+62     	; 0x1b2e <__floatsisf+0x6c>
    1af0:	bb 0f       	add	r27, r27
    1af2:	11 f4       	brne	.+4      	; 0x1af8 <__floatsisf+0x36>
    1af4:	60 ff       	sbrs	r22, 0
    1af6:	1b c0       	rjmp	.+54     	; 0x1b2e <__floatsisf+0x6c>
    1af8:	6f 5f       	subi	r22, 0xFF	; 255
    1afa:	7f 4f       	sbci	r23, 0xFF	; 255
    1afc:	8f 4f       	sbci	r24, 0xFF	; 255
    1afe:	9f 4f       	sbci	r25, 0xFF	; 255
    1b00:	16 c0       	rjmp	.+44     	; 0x1b2e <__floatsisf+0x6c>
    1b02:	88 23       	and	r24, r24
    1b04:	11 f0       	breq	.+4      	; 0x1b0a <__floatsisf+0x48>
    1b06:	96 e9       	ldi	r25, 0x96	; 150
    1b08:	11 c0       	rjmp	.+34     	; 0x1b2c <__floatsisf+0x6a>
    1b0a:	77 23       	and	r23, r23
    1b0c:	21 f0       	breq	.+8      	; 0x1b16 <__floatsisf+0x54>
    1b0e:	9e e8       	ldi	r25, 0x8E	; 142
    1b10:	87 2f       	mov	r24, r23
    1b12:	76 2f       	mov	r23, r22
    1b14:	05 c0       	rjmp	.+10     	; 0x1b20 <__floatsisf+0x5e>
    1b16:	66 23       	and	r22, r22
    1b18:	71 f0       	breq	.+28     	; 0x1b36 <__floatsisf+0x74>
    1b1a:	96 e8       	ldi	r25, 0x86	; 134
    1b1c:	86 2f       	mov	r24, r22
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	2a f0       	brmi	.+10     	; 0x1b2e <__floatsisf+0x6c>
    1b24:	9a 95       	dec	r25
    1b26:	66 0f       	add	r22, r22
    1b28:	77 1f       	adc	r23, r23
    1b2a:	88 1f       	adc	r24, r24
    1b2c:	da f7       	brpl	.-10     	; 0x1b24 <__floatsisf+0x62>
    1b2e:	88 0f       	add	r24, r24
    1b30:	96 95       	lsr	r25
    1b32:	87 95       	ror	r24
    1b34:	97 f9       	bld	r25, 7
    1b36:	08 95       	ret

00001b38 <__fp_cmp>:
    1b38:	99 0f       	add	r25, r25
    1b3a:	00 08       	sbc	r0, r0
    1b3c:	55 0f       	add	r21, r21
    1b3e:	aa 0b       	sbc	r26, r26
    1b40:	e0 e8       	ldi	r30, 0x80	; 128
    1b42:	fe ef       	ldi	r31, 0xFE	; 254
    1b44:	16 16       	cp	r1, r22
    1b46:	17 06       	cpc	r1, r23
    1b48:	e8 07       	cpc	r30, r24
    1b4a:	f9 07       	cpc	r31, r25
    1b4c:	c0 f0       	brcs	.+48     	; 0x1b7e <__fp_cmp+0x46>
    1b4e:	12 16       	cp	r1, r18
    1b50:	13 06       	cpc	r1, r19
    1b52:	e4 07       	cpc	r30, r20
    1b54:	f5 07       	cpc	r31, r21
    1b56:	98 f0       	brcs	.+38     	; 0x1b7e <__fp_cmp+0x46>
    1b58:	62 1b       	sub	r22, r18
    1b5a:	73 0b       	sbc	r23, r19
    1b5c:	84 0b       	sbc	r24, r20
    1b5e:	95 0b       	sbc	r25, r21
    1b60:	39 f4       	brne	.+14     	; 0x1b70 <__fp_cmp+0x38>
    1b62:	0a 26       	eor	r0, r26
    1b64:	61 f0       	breq	.+24     	; 0x1b7e <__fp_cmp+0x46>
    1b66:	23 2b       	or	r18, r19
    1b68:	24 2b       	or	r18, r20
    1b6a:	25 2b       	or	r18, r21
    1b6c:	21 f4       	brne	.+8      	; 0x1b76 <__fp_cmp+0x3e>
    1b6e:	08 95       	ret
    1b70:	0a 26       	eor	r0, r26
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <__fp_cmp+0x3e>
    1b74:	a1 40       	sbci	r26, 0x01	; 1
    1b76:	a6 95       	lsr	r26
    1b78:	8f ef       	ldi	r24, 0xFF	; 255
    1b7a:	81 1d       	adc	r24, r1
    1b7c:	81 1d       	adc	r24, r1
    1b7e:	08 95       	ret

00001b80 <__fp_inf>:
    1b80:	97 f9       	bld	r25, 7
    1b82:	9f 67       	ori	r25, 0x7F	; 127
    1b84:	80 e8       	ldi	r24, 0x80	; 128
    1b86:	70 e0       	ldi	r23, 0x00	; 0
    1b88:	60 e0       	ldi	r22, 0x00	; 0
    1b8a:	08 95       	ret

00001b8c <__fp_nan>:
    1b8c:	9f ef       	ldi	r25, 0xFF	; 255
    1b8e:	80 ec       	ldi	r24, 0xC0	; 192
    1b90:	08 95       	ret

00001b92 <__fp_pscA>:
    1b92:	00 24       	eor	r0, r0
    1b94:	0a 94       	dec	r0
    1b96:	16 16       	cp	r1, r22
    1b98:	17 06       	cpc	r1, r23
    1b9a:	18 06       	cpc	r1, r24
    1b9c:	09 06       	cpc	r0, r25
    1b9e:	08 95       	ret

00001ba0 <__fp_pscB>:
    1ba0:	00 24       	eor	r0, r0
    1ba2:	0a 94       	dec	r0
    1ba4:	12 16       	cp	r1, r18
    1ba6:	13 06       	cpc	r1, r19
    1ba8:	14 06       	cpc	r1, r20
    1baa:	05 06       	cpc	r0, r21
    1bac:	08 95       	ret

00001bae <__fp_round>:
    1bae:	09 2e       	mov	r0, r25
    1bb0:	03 94       	inc	r0
    1bb2:	00 0c       	add	r0, r0
    1bb4:	11 f4       	brne	.+4      	; 0x1bba <__fp_round+0xc>
    1bb6:	88 23       	and	r24, r24
    1bb8:	52 f0       	brmi	.+20     	; 0x1bce <__fp_round+0x20>
    1bba:	bb 0f       	add	r27, r27
    1bbc:	40 f4       	brcc	.+16     	; 0x1bce <__fp_round+0x20>
    1bbe:	bf 2b       	or	r27, r31
    1bc0:	11 f4       	brne	.+4      	; 0x1bc6 <__fp_round+0x18>
    1bc2:	60 ff       	sbrs	r22, 0
    1bc4:	04 c0       	rjmp	.+8      	; 0x1bce <__fp_round+0x20>
    1bc6:	6f 5f       	subi	r22, 0xFF	; 255
    1bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bca:	8f 4f       	sbci	r24, 0xFF	; 255
    1bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bce:	08 95       	ret

00001bd0 <__fp_split3>:
    1bd0:	57 fd       	sbrc	r21, 7
    1bd2:	90 58       	subi	r25, 0x80	; 128
    1bd4:	44 0f       	add	r20, r20
    1bd6:	55 1f       	adc	r21, r21
    1bd8:	59 f0       	breq	.+22     	; 0x1bf0 <__fp_splitA+0x10>
    1bda:	5f 3f       	cpi	r21, 0xFF	; 255
    1bdc:	71 f0       	breq	.+28     	; 0x1bfa <__fp_splitA+0x1a>
    1bde:	47 95       	ror	r20

00001be0 <__fp_splitA>:
    1be0:	88 0f       	add	r24, r24
    1be2:	97 fb       	bst	r25, 7
    1be4:	99 1f       	adc	r25, r25
    1be6:	61 f0       	breq	.+24     	; 0x1c00 <__fp_splitA+0x20>
    1be8:	9f 3f       	cpi	r25, 0xFF	; 255
    1bea:	79 f0       	breq	.+30     	; 0x1c0a <__fp_splitA+0x2a>
    1bec:	87 95       	ror	r24
    1bee:	08 95       	ret
    1bf0:	12 16       	cp	r1, r18
    1bf2:	13 06       	cpc	r1, r19
    1bf4:	14 06       	cpc	r1, r20
    1bf6:	55 1f       	adc	r21, r21
    1bf8:	f2 cf       	rjmp	.-28     	; 0x1bde <__fp_split3+0xe>
    1bfa:	46 95       	lsr	r20
    1bfc:	f1 df       	rcall	.-30     	; 0x1be0 <__fp_splitA>
    1bfe:	08 c0       	rjmp	.+16     	; 0x1c10 <__fp_splitA+0x30>
    1c00:	16 16       	cp	r1, r22
    1c02:	17 06       	cpc	r1, r23
    1c04:	18 06       	cpc	r1, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	f1 cf       	rjmp	.-30     	; 0x1bec <__fp_splitA+0xc>
    1c0a:	86 95       	lsr	r24
    1c0c:	71 05       	cpc	r23, r1
    1c0e:	61 05       	cpc	r22, r1
    1c10:	08 94       	sec
    1c12:	08 95       	ret

00001c14 <__fp_zero>:
    1c14:	e8 94       	clt

00001c16 <__fp_szero>:
    1c16:	bb 27       	eor	r27, r27
    1c18:	66 27       	eor	r22, r22
    1c1a:	77 27       	eor	r23, r23
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	97 f9       	bld	r25, 7
    1c20:	08 95       	ret

00001c22 <__gesf2>:
    1c22:	8a df       	rcall	.-236    	; 0x1b38 <__fp_cmp>
    1c24:	08 f4       	brcc	.+2      	; 0x1c28 <__gesf2+0x6>
    1c26:	8f ef       	ldi	r24, 0xFF	; 255
    1c28:	08 95       	ret

00001c2a <__mulsf3>:
    1c2a:	0b d0       	rcall	.+22     	; 0x1c42 <__mulsf3x>
    1c2c:	c0 cf       	rjmp	.-128    	; 0x1bae <__fp_round>
    1c2e:	b1 df       	rcall	.-158    	; 0x1b92 <__fp_pscA>
    1c30:	28 f0       	brcs	.+10     	; 0x1c3c <__mulsf3+0x12>
    1c32:	b6 df       	rcall	.-148    	; 0x1ba0 <__fp_pscB>
    1c34:	18 f0       	brcs	.+6      	; 0x1c3c <__mulsf3+0x12>
    1c36:	95 23       	and	r25, r21
    1c38:	09 f0       	breq	.+2      	; 0x1c3c <__mulsf3+0x12>
    1c3a:	a2 cf       	rjmp	.-188    	; 0x1b80 <__fp_inf>
    1c3c:	a7 cf       	rjmp	.-178    	; 0x1b8c <__fp_nan>
    1c3e:	11 24       	eor	r1, r1
    1c40:	ea cf       	rjmp	.-44     	; 0x1c16 <__fp_szero>

00001c42 <__mulsf3x>:
    1c42:	c6 df       	rcall	.-116    	; 0x1bd0 <__fp_split3>
    1c44:	a0 f3       	brcs	.-24     	; 0x1c2e <__mulsf3+0x4>

00001c46 <__mulsf3_pse>:
    1c46:	95 9f       	mul	r25, r21
    1c48:	d1 f3       	breq	.-12     	; 0x1c3e <__mulsf3+0x14>
    1c4a:	95 0f       	add	r25, r21
    1c4c:	50 e0       	ldi	r21, 0x00	; 0
    1c4e:	55 1f       	adc	r21, r21
    1c50:	62 9f       	mul	r22, r18
    1c52:	f0 01       	movw	r30, r0
    1c54:	72 9f       	mul	r23, r18
    1c56:	bb 27       	eor	r27, r27
    1c58:	f0 0d       	add	r31, r0
    1c5a:	b1 1d       	adc	r27, r1
    1c5c:	63 9f       	mul	r22, r19
    1c5e:	aa 27       	eor	r26, r26
    1c60:	f0 0d       	add	r31, r0
    1c62:	b1 1d       	adc	r27, r1
    1c64:	aa 1f       	adc	r26, r26
    1c66:	64 9f       	mul	r22, r20
    1c68:	66 27       	eor	r22, r22
    1c6a:	b0 0d       	add	r27, r0
    1c6c:	a1 1d       	adc	r26, r1
    1c6e:	66 1f       	adc	r22, r22
    1c70:	82 9f       	mul	r24, r18
    1c72:	22 27       	eor	r18, r18
    1c74:	b0 0d       	add	r27, r0
    1c76:	a1 1d       	adc	r26, r1
    1c78:	62 1f       	adc	r22, r18
    1c7a:	73 9f       	mul	r23, r19
    1c7c:	b0 0d       	add	r27, r0
    1c7e:	a1 1d       	adc	r26, r1
    1c80:	62 1f       	adc	r22, r18
    1c82:	83 9f       	mul	r24, r19
    1c84:	a0 0d       	add	r26, r0
    1c86:	61 1d       	adc	r22, r1
    1c88:	22 1f       	adc	r18, r18
    1c8a:	74 9f       	mul	r23, r20
    1c8c:	33 27       	eor	r19, r19
    1c8e:	a0 0d       	add	r26, r0
    1c90:	61 1d       	adc	r22, r1
    1c92:	23 1f       	adc	r18, r19
    1c94:	84 9f       	mul	r24, r20
    1c96:	60 0d       	add	r22, r0
    1c98:	21 1d       	adc	r18, r1
    1c9a:	82 2f       	mov	r24, r18
    1c9c:	76 2f       	mov	r23, r22
    1c9e:	6a 2f       	mov	r22, r26
    1ca0:	11 24       	eor	r1, r1
    1ca2:	9f 57       	subi	r25, 0x7F	; 127
    1ca4:	50 40       	sbci	r21, 0x00	; 0
    1ca6:	8a f0       	brmi	.+34     	; 0x1cca <__mulsf3_pse+0x84>
    1ca8:	e1 f0       	breq	.+56     	; 0x1ce2 <__mulsf3_pse+0x9c>
    1caa:	88 23       	and	r24, r24
    1cac:	4a f0       	brmi	.+18     	; 0x1cc0 <__mulsf3_pse+0x7a>
    1cae:	ee 0f       	add	r30, r30
    1cb0:	ff 1f       	adc	r31, r31
    1cb2:	bb 1f       	adc	r27, r27
    1cb4:	66 1f       	adc	r22, r22
    1cb6:	77 1f       	adc	r23, r23
    1cb8:	88 1f       	adc	r24, r24
    1cba:	91 50       	subi	r25, 0x01	; 1
    1cbc:	50 40       	sbci	r21, 0x00	; 0
    1cbe:	a9 f7       	brne	.-22     	; 0x1caa <__mulsf3_pse+0x64>
    1cc0:	9e 3f       	cpi	r25, 0xFE	; 254
    1cc2:	51 05       	cpc	r21, r1
    1cc4:	70 f0       	brcs	.+28     	; 0x1ce2 <__mulsf3_pse+0x9c>
    1cc6:	5c cf       	rjmp	.-328    	; 0x1b80 <__fp_inf>
    1cc8:	a6 cf       	rjmp	.-180    	; 0x1c16 <__fp_szero>
    1cca:	5f 3f       	cpi	r21, 0xFF	; 255
    1ccc:	ec f3       	brlt	.-6      	; 0x1cc8 <__mulsf3_pse+0x82>
    1cce:	98 3e       	cpi	r25, 0xE8	; 232
    1cd0:	dc f3       	brlt	.-10     	; 0x1cc8 <__mulsf3_pse+0x82>
    1cd2:	86 95       	lsr	r24
    1cd4:	77 95       	ror	r23
    1cd6:	67 95       	ror	r22
    1cd8:	b7 95       	ror	r27
    1cda:	f7 95       	ror	r31
    1cdc:	e7 95       	ror	r30
    1cde:	9f 5f       	subi	r25, 0xFF	; 255
    1ce0:	c1 f7       	brne	.-16     	; 0x1cd2 <__mulsf3_pse+0x8c>
    1ce2:	fe 2b       	or	r31, r30
    1ce4:	88 0f       	add	r24, r24
    1ce6:	91 1d       	adc	r25, r1
    1ce8:	96 95       	lsr	r25
    1cea:	87 95       	ror	r24
    1cec:	97 f9       	bld	r25, 7
    1cee:	08 95       	ret

00001cf0 <round>:
    1cf0:	77 df       	rcall	.-274    	; 0x1be0 <__fp_splitA>
    1cf2:	e0 f0       	brcs	.+56     	; 0x1d2c <round+0x3c>
    1cf4:	9e 37       	cpi	r25, 0x7E	; 126
    1cf6:	d8 f0       	brcs	.+54     	; 0x1d2e <round+0x3e>
    1cf8:	96 39       	cpi	r25, 0x96	; 150
    1cfa:	b8 f4       	brcc	.+46     	; 0x1d2a <round+0x3a>
    1cfc:	9e 38       	cpi	r25, 0x8E	; 142
    1cfe:	48 f4       	brcc	.+18     	; 0x1d12 <round+0x22>
    1d00:	67 2f       	mov	r22, r23
    1d02:	78 2f       	mov	r23, r24
    1d04:	88 27       	eor	r24, r24
    1d06:	98 5f       	subi	r25, 0xF8	; 248
    1d08:	f9 cf       	rjmp	.-14     	; 0x1cfc <round+0xc>
    1d0a:	86 95       	lsr	r24
    1d0c:	77 95       	ror	r23
    1d0e:	67 95       	ror	r22
    1d10:	93 95       	inc	r25
    1d12:	95 39       	cpi	r25, 0x95	; 149
    1d14:	d0 f3       	brcs	.-12     	; 0x1d0a <round+0x1a>
    1d16:	b6 2f       	mov	r27, r22
    1d18:	b1 70       	andi	r27, 0x01	; 1
    1d1a:	6b 0f       	add	r22, r27
    1d1c:	71 1d       	adc	r23, r1
    1d1e:	81 1d       	adc	r24, r1
    1d20:	20 f4       	brcc	.+8      	; 0x1d2a <round+0x3a>
    1d22:	87 95       	ror	r24
    1d24:	77 95       	ror	r23
    1d26:	67 95       	ror	r22
    1d28:	93 95       	inc	r25
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <__fp_mintl>
    1d2c:	1c c0       	rjmp	.+56     	; 0x1d66 <__fp_mpack>
    1d2e:	73 cf       	rjmp	.-282    	; 0x1c16 <__fp_szero>

00001d30 <__fp_mintl>:
    1d30:	88 23       	and	r24, r24
    1d32:	71 f4       	brne	.+28     	; 0x1d50 <__fp_mintl+0x20>
    1d34:	77 23       	and	r23, r23
    1d36:	21 f0       	breq	.+8      	; 0x1d40 <__fp_mintl+0x10>
    1d38:	98 50       	subi	r25, 0x08	; 8
    1d3a:	87 2b       	or	r24, r23
    1d3c:	76 2f       	mov	r23, r22
    1d3e:	07 c0       	rjmp	.+14     	; 0x1d4e <__fp_mintl+0x1e>
    1d40:	66 23       	and	r22, r22
    1d42:	11 f4       	brne	.+4      	; 0x1d48 <__fp_mintl+0x18>
    1d44:	99 27       	eor	r25, r25
    1d46:	0d c0       	rjmp	.+26     	; 0x1d62 <__fp_mintl+0x32>
    1d48:	90 51       	subi	r25, 0x10	; 16
    1d4a:	86 2b       	or	r24, r22
    1d4c:	70 e0       	ldi	r23, 0x00	; 0
    1d4e:	60 e0       	ldi	r22, 0x00	; 0
    1d50:	2a f0       	brmi	.+10     	; 0x1d5c <__fp_mintl+0x2c>
    1d52:	9a 95       	dec	r25
    1d54:	66 0f       	add	r22, r22
    1d56:	77 1f       	adc	r23, r23
    1d58:	88 1f       	adc	r24, r24
    1d5a:	da f7       	brpl	.-10     	; 0x1d52 <__fp_mintl+0x22>
    1d5c:	88 0f       	add	r24, r24
    1d5e:	96 95       	lsr	r25
    1d60:	87 95       	ror	r24
    1d62:	97 f9       	bld	r25, 7
    1d64:	08 95       	ret

00001d66 <__fp_mpack>:
    1d66:	9f 3f       	cpi	r25, 0xFF	; 255
    1d68:	31 f0       	breq	.+12     	; 0x1d76 <__fp_mpack_finite+0xc>

00001d6a <__fp_mpack_finite>:
    1d6a:	91 50       	subi	r25, 0x01	; 1
    1d6c:	20 f4       	brcc	.+8      	; 0x1d76 <__fp_mpack_finite+0xc>
    1d6e:	87 95       	ror	r24
    1d70:	77 95       	ror	r23
    1d72:	67 95       	ror	r22
    1d74:	b7 95       	ror	r27
    1d76:	88 0f       	add	r24, r24
    1d78:	91 1d       	adc	r25, r1
    1d7a:	96 95       	lsr	r25
    1d7c:	87 95       	ror	r24
    1d7e:	97 f9       	bld	r25, 7
    1d80:	08 95       	ret

00001d82 <_exit>:
    1d82:	f8 94       	cli

00001d84 <__stop_program>:
    1d84:	ff cf       	rjmp	.-2      	; 0x1d84 <__stop_program>
