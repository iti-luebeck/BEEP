
BEEP_XMega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001656  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00001656  000016ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004b  00802000  00802000  000016ea  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00001db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001e4f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001b0  00000000  00000000  00001e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003df7  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b30  00000000  00000000  00005e25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000bc1  00000000  00000000  00006955  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000474  00000000  00000000  00007518  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000201a  00000000  00000000  0000798c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000011be  00000000  00000000  000099a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001d8  00000000  00000000  0000ab64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__ctors_end>
       4:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
       8:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
       c:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      10:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      14:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      18:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      1c:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      20:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      24:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      28:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      2c:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      30:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      34:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      38:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      3c:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      40:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      44:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      48:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      4c:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      50:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      54:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      58:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      5c:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      60:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      64:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      68:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      6c:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      70:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      74:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      78:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      7c:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      80:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      84:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      88:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      8c:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      90:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      94:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      98:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      9c:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      a0:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      a4:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      a8:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      ac:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      b0:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      b4:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      b8:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      bc:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__vector_47>
      c0:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      c4:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      c8:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      cc:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      d0:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      d4:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      d8:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      dc:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      e0:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      e4:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      e8:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      ec:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      f0:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      f4:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      f8:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
      fc:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     100:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     104:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     108:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     10c:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     110:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     114:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     118:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     11c:	0c 94 04 08 	jmp	0x1008	; 0x1008 <__vector_71>
     120:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     124:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     128:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     12c:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     130:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     134:	0c 94 ff 0a 	jmp	0x15fe	; 0x15fe <__vector_77>
     138:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     13c:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     140:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     144:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     148:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     14c:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     150:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     154:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     158:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     15c:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     160:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__vector_88>
     164:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__vector_89>
     168:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     16c:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     170:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     174:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     178:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     17c:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     180:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     184:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     188:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     18c:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     190:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     194:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     198:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     19c:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     1a0:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     1a4:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     1a8:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     1ac:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     1b0:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     1b4:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     1b8:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     1bc:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     1c0:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>
     1c4:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__bad_interrupt>

000001c8 <rgb_led_lut>:
     1c8:	00 20 10 30 08 28 18 38                             . .0.(.8

000001d0 <PWM_green_ENABLE_gc_lut>:
     1d0:	40 40 40 40 40 40 40 10                             @@@@@@@.

000001d8 <PWM_blue_ENABLE_gc_lut>:
     1d8:	10 20 20 10 10 20 20 40                             .  ..  @

000001e0 <PWM_red_ENABLE_gc_lut>:
     1e0:	20 10 10 20 20 10 10 20                              ..  .. 

000001e8 <green_channel_lut>:
     1e8:	2c 0a 2c 0a 2c 0a 2c 0a 2c 0a 2c 0a 2c 0a 28 0a     ,.,.,.,.,.,.,.(.

000001f8 <blue_channel_lut>:
     1f8:	28 0a 2a 0a 2a 0a 28 0a 28 0a 2a 0a 2a 0a 2c 0a     (.*.*.(.(.*.*.,.

00000208 <red_channel_lut>:
     208:	2a 0a 28 0a 28 0a 2a 0a 2a 0a 28 0a 28 0a 2a 0a     *.(.(.*.*.(.(.*.

00000218 <pwmtable_12>:
     218:	00 00 01 00 01 00 01 00 01 00 01 00 01 00 01 00     ................
     228:	01 00 01 00 01 00 01 00 02 00 02 00 02 00 02 00     ................
     238:	02 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00     ................
     248:	02 00 02 00 02 00 02 00 03 00 03 00 03 00 03 00     ................
     258:	03 00 03 00 03 00 03 00 03 00 03 00 04 00 04 00     ................
     268:	04 00 04 00 04 00 04 00 04 00 04 00 05 00 05 00     ................
     278:	05 00 05 00 05 00 05 00 06 00 06 00 06 00 06 00     ................
     288:	06 00 07 00 07 00 07 00 07 00 07 00 08 00 08 00     ................
     298:	08 00 09 00 09 00 09 00 09 00 0a 00 0a 00 0a 00     ................
     2a8:	0b 00 0b 00 0b 00 0c 00 0c 00 0d 00 0d 00 0d 00     ................
     2b8:	0e 00 0e 00 0f 00 0f 00 10 00 10 00 11 00 11 00     ................
     2c8:	12 00 13 00 13 00 14 00 15 00 15 00 16 00 17 00     ................
     2d8:	17 00 18 00 19 00 1a 00 1b 00 1b 00 1c 00 1d 00     ................
     2e8:	1e 00 1f 00 20 00 21 00 23 00 24 00 25 00 26 00     .... .!.#.$.%.&.
     2f8:	27 00 29 00 2a 00 2b 00 2d 00 2e 00 30 00 31 00     '.).*.+.-...0.1.
     308:	33 00 35 00 36 00 38 00 3a 00 3c 00 3e 00 40 00     3.5.6.8.:.<.>.@.
     318:	42 00 44 00 47 00 49 00 4b 00 4e 00 50 00 53 00     B.D.G.I.K.N.P.S.
     328:	56 00 59 00 5b 00 5f 00 62 00 65 00 68 00 6c 00     V.Y.[._.b.e.h.l.
     338:	6f 00 73 00 77 00 7b 00 7f 00 83 00 87 00 8c 00     o.s.w.{.........
     348:	90 00 95 00 9a 00 9f 00 a4 00 aa 00 af 00 b5 00     ................
     358:	bb 00 c1 00 c8 00 ce 00 d5 00 dc 00 e3 00 eb 00     ................
     368:	f2 00 fa 00 03 01 0b 01 14 01 1d 01 27 01 30 01     ............'.0.
     378:	3a 01 45 01 50 01 5b 01 66 01 72 01 7e 01 8b 01     :.E.P.[.f.r.~...
     388:	98 01 a5 01 b3 01 c2 01 d0 01 e0 01 f0 01 00 02     ................
     398:	11 02 22 02 34 02 47 02 5a 02 6e 02 83 02 98 02     ..".4.G.Z.n.....
     3a8:	ae 02 c4 02 dc 02 f4 02 0d 03 27 03 41 03 5d 03     ..........'.A.].
     3b8:	79 03 97 03 b5 03 d4 03 f5 03 16 04 39 04 5c 04     y...........9.\.
     3c8:	81 04 a7 04 cf 04 f7 04 21 05 4d 05 7a 05 a8 05     ........!.M.z...
     3d8:	d8 05 09 06 3c 06 71 06 a7 06 df 06 1a 07 56 07     ....<.q.......V.
     3e8:	94 07 d4 07 16 08 5a 08 a1 08 ea 08 35 09 83 09     ......Z.....5...
     3f8:	d3 09 26 0a 7c 0a d5 0a 30 0b 8f 0b f1 0b 56 0c     ..&.|...0.....V.
     408:	be 0c 2a 0d 99 0d 0c 0e 83 0e fd 0e 7c 0f ff 0f     ..*.........|...

00000418 <ir_led_lut>:
     418:	00 01 02 03 05 06 07 04                             ........

00000420 <scaleIRTable>:
     420:	00 00 17 25 2e 36 3c 41 46 49 4d 50 53 56 58 5b     ...%.6<AFIMPSVX[
     430:	5d 5f 61 62 64 66 67 69 6a 6c 6d 6e 6f 71 72 73     ]_abdfgijlmnoqrs
     440:	74 75 76 77 78 79 7a 7b 7b 7c 7d 7e 7f 7f 80 81     tuvwxyz{{|}~....
     450:	81 82 83 84 84 85 85 86 87 87 88 88 89 89 8a 8b     ................
     460:	8b 8c 8c 8d 8d 8e 8e 8f 8f 90 90 90 91 91 92 92     ................
     470:	93 93 93 94 94 95 95 95 96 96 97 97 97 98 98 98     ................
     480:	99 99 99 9a 9a 9a 9b 9b 9b 9c 9c 9c 9d 9d 9d 9e     ................
     490:	9e 9e 9e 9f 9f 9f a0 a0 a0 a0 a1 a1 a1 a1 a2 a2     ................
     4a0:	a2 a3 a3 a3 a3 a4 a4 a4 a4 a5 a5 a5 a5 a6 a6 a6     ................
     4b0:	a6 a6 a7 a7 a7 a7 a8 a8 a8 a8 a8 a9 a9 a9 a9 aa     ................
     4c0:	aa aa aa aa ab ab ab ab ab ac ac ac ac ac ad ad     ................
     4d0:	ad ad ad ad ae ae ae ae ae af af af af af af b0     ................
     4e0:	b0 b0 b0 b0 b1 b1 b1 b1 b1 b1 b2 b2 b2 b2 b2 b2     ................
     4f0:	b3 b3 b3 b3 b3 b3 b3 b4 b4 b4 b4 b4 b4 b5 b5 b5     ................
     500:	b5 b5 b5 b5 b6 b6 b6 b6 b6 b6 b6 b7 b7 b7 b7 b7     ................
     510:	b7 b7 b8 b8 b8 b8 b8 b8 b8 b9 b9 b9 b9 b9 b9 b9     ................
     520:	b9 ba ba ba ba ba ba ba ba bb bb bb bb bb bb bb     ................
     530:	bb bc bc bc bc bc bc bc bc bd bd bd bd bd bd bd     ................
     540:	bd be be be be be be be be be bf bf bf bf bf bf     ................
     550:	bf bf bf c0 c0 c0 c0 c0 c0 c0 c0 c0 c1 c1 c1 c1     ................
     560:	c1 c1 c1 c1 c1 c1 c2 c2 c2 c2 c2 c2 c2 c2 c2 c2     ................
     570:	c3 c3 c3 c3 c3 c3 c3 c3 c3 c3 c4 c4 c4 c4 c4 c4     ................
     580:	c4 c4 c4 c4 c4 c5 c5 c5 c5 c5 c5 c5 c5 c5 c5 c6     ................
     590:	c6 c6 c6 c6 c6 c6 c6 c6 c6 c6 c7 c7 c7 c7 c7 c7     ................
     5a0:	c7 c7 c7 c7 c7 c7 c8 c8 c8 c8 c8 c8 c8 c8 c8 c8     ................
     5b0:	c8 c8 c9 c9 c9 c9 c9 c9 c9 c9 c9 c9 c9 c9 ca ca     ................
     5c0:	ca ca ca ca ca ca ca ca ca ca ca cb cb cb cb cb     ................
     5d0:	cb cb cb cb cb cb cb cc cc cc cc cc cc cc cc cc     ................
     5e0:	cc cc cc cc cc cd cd cd cd cd cd cd cd cd cd cd     ................
     5f0:	cd cd ce ce ce ce ce ce ce ce ce ce ce ce ce ce     ................
     600:	ce cf cf cf cf cf cf cf cf cf cf cf cf cf cf d0     ................
     610:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d1 d1     ................
     620:	d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d2 d2     ................
     630:	d2 d2 d2 d2 d2 d2 d2 d2 d2 d2 d2 d2 d2 d2 d3 d3     ................
     640:	d3 d3 d3 d3 d3 d3 d3 d3 d3 d3 d3 d3 d3 d3 d4 d4     ................
     650:	d4 d4 d4 d4 d4 d4 d4 d4 d4 d4 d4 d4 d4 d4 d4 d5     ................
     660:	d5 d5 d5 d5 d5 d5 d5 d5 d5 d5 d5 d5 d5 d5 d5 d5     ................
     670:	d6 d6 d6 d6 d6 d6 d6 d6 d6 d6 d6 d6 d6 d6 d6 d6     ................
     680:	d6 d6 d7 d7 d7 d7 d7 d7 d7 d7 d7 d7 d7 d7 d7 d7     ................
     690:	d7 d7 d7 d7 d7 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
     6a0:	d8 d8 d8 d8 d8 d8 d8 d8 d9 d9 d9 d9 d9 d9 d9 d9     ................
     6b0:	d9 d9 d9 d9 d9 d9 d9 d9 d9 d9 d9 d9 da da da da     ................
     6c0:	da da da da da da da da da da da da da da da da     ................
     6d0:	db db db db db db db db db db db db db db db db     ................
     6e0:	db db db db db dc dc dc dc dc dc dc dc dc dc dc     ................
     6f0:	dc dc dc dc dc dc dc dc dc dc dd dd dd dd dd dd     ................
     700:	dd dd dd dd dd dd dd dd dd dd dd dd dd dd dd dd     ................
     710:	de de de de de de de de de de de de de de de de     ................
     720:	de de de de de de de df df df df df df df df df     ................
     730:	df df df df df df df df df df df df df df df e0     ................
     740:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
     750:	e0 e0 e0 e0 e0 e0 e0 e1 e1 e1 e1 e1 e1 e1 e1 e1     ................
     760:	e1 e1 e1 e1 e1 e1 e1 e1 e1 e1 e1 e1 e1 e1 e1 e1     ................
     770:	e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e2     ................
     780:	e2 e2 e2 e2 e2 e2 e2 e2 e2 e2 e3 e3 e3 e3 e3 e3     ................
     790:	e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3     ................
     7a0:	e3 e3 e3 e3 e4 e4 e4 e4 e4 e4 e4 e4 e4 e4 e4 e4     ................
     7b0:	e4 e4 e4 e4 e4 e4 e4 e4 e4 e4 e4 e4 e4 e4 e4 e5     ................
     7c0:	e5 e5 e5 e5 e5 e5 e5 e5 e5 e5 e5 e5 e5 e5 e5 e5     ................
     7d0:	e5 e5 e5 e5 e5 e5 e5 e5 e5 e5 e5 e5 e6 e6 e6 e6     ................
     7e0:	e6 e6 e6 e6 e6 e6 e6 e6 e6 e6 e6 e6 e6 e6 e6 e6     ................
     7f0:	e6 e6 e6 e6 e6 e6 e6 e6 e7 e7 e7 e7 e7 e7 e7 e7     ................
     800:	e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7 e7     ................
     810:	e7 e7 e7 e7 e7 e7 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
     820:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
     830:	e8 e8 e8 e8 e8 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9     ................
     840:	e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9 e9     ................
     850:	e9 e9 e9 e9 e9 ea ea ea ea ea ea ea ea ea ea ea     ................
     860:	ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea     ................
     870:	ea ea ea ea ea eb eb eb eb eb eb eb eb eb eb eb     ................
     880:	eb eb eb eb eb eb eb eb eb eb eb eb eb eb eb eb     ................
     890:	eb eb eb eb eb eb eb ec ec ec ec ec ec ec ec ec     ................
     8a0:	ec ec ec ec ec ec ec ec ec ec ec ec ec ec ec ec     ................
     8b0:	ec ec ec ec ec ec ec ec ec ec ed ed ed ed ed ed     ................
     8c0:	ed ed ed ed ed ed ed ed ed ed ed ed ed ed ed ed     ................
     8d0:	ed ed ed ed ed ed ed ed ed ed ed ed ed ed ee ee     ................
     8e0:	ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee     ................
     8f0:	ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee     ................
     900:	ee ee ef ef ef ef ef ef ef ef ef ef ef ef ef ef     ................
     910:	ef ef ef ef ef ef ef ef ef ef ef ef ef ef ef ef     ................
     920:	ef ef ef ef ef ef ef ef f0 f0 f0 f0 f0 f0 f0 f0     ................
     930:	f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
     940:	f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f1     ................
     950:	f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1     ................
     960:	f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1 f1     ................
     970:	f1 f1 f1 f1 f1 f1 f1 f1 f2 f2 f2 f2 f2 f2 f2 f2     ................
     980:	f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2     ................
     990:	f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2     ................
     9a0:	f2 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3     ................
     9b0:	f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3     ................
     9c0:	f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f4 f4 f4 f4     ................
     9d0:	f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4     ................
     9e0:	f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4     ................
     9f0:	f4 f4 f4 f4 f4 f4 f4 f4 f5 f5 f5 f5 f5 f5 f5 f5     ................
     a00:	f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5     ................
     a10:	f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5     ................
     a20:	f5 f5 f5 f5 f5 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     a30:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     a40:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     a50:	f6 f6 f6 f6 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     a60:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     a70:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     a80:	f7 f7 f7 f7 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
     a90:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
     aa0:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
     ab0:	f8 f8 f8 f8 f8 f8 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9     ................
     ac0:	f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9     ................
     ad0:	f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9     ................
     ae0:	f9 f9 f9 f9 f9 f9 f9 f9 f9 fa fa fa fa fa fa fa     ................
     af0:	fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa     ................
     b00:	fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa     ................
     b10:	fa fa fa fa fa fa fa fa fa fa fa fa fa fa fb fb     ................
     b20:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
     b30:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
     b40:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
     b50:	fb fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc     ................
     b60:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc     ................
     b70:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc     ................
     b80:	fc fc fc fc fc fc fc fc fc fc fc fc fd fd fd fd     ................
     b90:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
     ba0:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
     bb0:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
     bc0:	fd fd fd fd fd fd fe fe fe fe fe fe fe fe fe fe     ................
     bd0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
     be0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
     bf0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
     c00:	fe ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

00000c20 <__ctors_end>:
     c20:	11 24       	eor	r1, r1
     c22:	1f be       	out	0x3f, r1	; 63
     c24:	cf ef       	ldi	r28, 0xFF	; 255
     c26:	df e2       	ldi	r29, 0x2F	; 47
     c28:	de bf       	out	0x3e, r29	; 62
     c2a:	cd bf       	out	0x3d, r28	; 61

00000c2c <__do_clear_bss>:
     c2c:	20 e2       	ldi	r18, 0x20	; 32
     c2e:	a0 e0       	ldi	r26, 0x00	; 0
     c30:	b0 e2       	ldi	r27, 0x20	; 32
     c32:	01 c0       	rjmp	.+2      	; 0xc36 <.do_clear_bss_start>

00000c34 <.do_clear_bss_loop>:
     c34:	1d 92       	st	X+, r1

00000c36 <.do_clear_bss_start>:
     c36:	ab 34       	cpi	r26, 0x4B	; 75
     c38:	b2 07       	cpc	r27, r18
     c3a:	e1 f7       	brne	.-8      	; 0xc34 <.do_clear_bss_loop>
     c3c:	0e 94 94 06 	call	0xd28	; 0xd28 <main>
     c40:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <_exit>

00000c44 <__bad_interrupt>:
     c44:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000c48 <init_enable_32mhz>:
	}Command_Buffer_t;



void init_enable_32mhz(void){
		OSC.CTRL |= OSC_RC32MEN_bm; //Enable 32 Mhz oscillator
     c48:	80 91 50 00 	lds	r24, 0x0050
     c4c:	82 60       	ori	r24, 0x02	; 2
     c4e:	80 93 50 00 	sts	0x0050, r24
		while(!(OSC.STATUS & OSC_RC32MRDY_bm)); //Wait until 32 Mhz oscillator is ready
     c52:	80 91 51 00 	lds	r24, 0x0051
     c56:	81 ff       	sbrs	r24, 1
     c58:	fc cf       	rjmp	.-8      	; 0xc52 <init_enable_32mhz+0xa>
		CCP = CCP_IOREG_gc; //Disable configuration change protection for four cycles
     c5a:	88 ed       	ldi	r24, 0xD8	; 216
     c5c:	84 bf       	out	0x34, r24	; 52
		CLK.CTRL = CLK_SCLKSEL_RC32M_gc; //Set 32Mhz as main clock
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	80 93 40 00 	sts	0x0040, r24
		OSC.CTRL &= ~OSC_RC2MEN_bm; //Disable 2 Mhz oscillator
     c64:	80 91 50 00 	lds	r24, 0x0050
     c68:	8e 7f       	andi	r24, 0xFE	; 254
     c6a:	80 93 50 00 	sts	0x0050, r24
     c6e:	08 95       	ret

00000c70 <init_usart>:
}

void init_usart(void){
	// Output TX
	PORTD.DIRSET = PIN3_bm;
     c70:	e0 e6       	ldi	r30, 0x60	; 96
     c72:	f6 e0       	ldi	r31, 0x06	; 6
     c74:	88 e0       	ldi	r24, 0x08	; 8
     c76:	81 83       	std	Z+1, r24	; 0x01
	// Input RX
	PORTD.DIRCLR = PIN2_bm;
     c78:	84 e0       	ldi	r24, 0x04	; 4
     c7a:	82 83       	std	Z+2, r24	; 0x02
	
	// init Buffers using USARTD0
	USART_InterruptDriver_Initialize(&USART_data, &USARTD0, USART_DREINTLVL_LO_gc);
     c7c:	41 e0       	ldi	r20, 0x01	; 1
     c7e:	60 ea       	ldi	r22, 0xA0	; 160
     c80:	79 e0       	ldi	r23, 0x09	; 9
     c82:	8f e1       	ldi	r24, 0x1F	; 31
     c84:	90 e2       	ldi	r25, 0x20	; 32
     c86:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <USART_InterruptDriver_Initialize>
	
	/* USARTD0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(USART_data.usart, USART_CHSIZE_8BIT_gc,
     c8a:	e0 91 1f 20 	lds	r30, 0x201F
     c8e:	f0 91 20 20 	lds	r31, 0x2020
     c92:	83 e0       	ldi	r24, 0x03	; 3
     c94:	85 83       	std	Z+5, r24	; 0x05
                     USART_PMODE_DISABLED_gc, false);

	/* Enable RXC interrupt. */
	USART_RxdInterruptLevel_Set(USART_data.usart, USART_RXCINTLVL_LO_gc);
     c96:	83 81       	ldd	r24, Z+3	; 0x03
     c98:	8f 7c       	andi	r24, 0xCF	; 207
     c9a:	80 61       	ori	r24, 0x10	; 16
     c9c:	83 83       	std	Z+3, r24	; 0x03

	/* Set Baudrate to baudrate bps:
	 * Do not use the baudrate scale factor (factor = 0)
	 * Baudrate ((I/O clock frequency)/(2^(ScaleFactor)*16*Baudrate))-1
	 */	
	USART_Baudrate_Set(&USARTD0, ((F_CPU/(16*USART_BAUDRATE))-1) , 0);
     c9e:	a0 ea       	ldi	r26, 0xA0	; 160
     ca0:	b9 e0       	ldi	r27, 0x09	; 9
     ca2:	83 e3       	ldi	r24, 0x33	; 51
     ca4:	16 96       	adiw	r26, 0x06	; 6
     ca6:	8c 93       	st	X, r24
     ca8:	16 97       	sbiw	r26, 0x06	; 6
     caa:	17 96       	adiw	r26, 0x07	; 7
     cac:	1c 92       	st	X, r1
	
	//USART_Baudrate_Set(&USARTD0, 1/(16*((F_CPU/baudrate)-1)) , 0);

	/* Enable both RX and TX. */
	USART_Rx_Enable(USART_data.usart);
     cae:	84 81       	ldd	r24, Z+4	; 0x04
     cb0:	80 61       	ori	r24, 0x10	; 16
     cb2:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_data.usart);
     cb4:	84 81       	ldd	r24, Z+4	; 0x04
     cb6:	88 60       	ori	r24, 0x08	; 8
     cb8:	84 83       	std	Z+4, r24	; 0x04
     cba:	08 95       	ret

00000cbc <init_rgb_led>:
}


void init_rgb_led(void){
	PORTF.DIRSET = PIN3_bm | PIN4_bm | PIN5_bm; //LED multiplexer Pins as output
     cbc:	88 e3       	ldi	r24, 0x38	; 56
     cbe:	e0 ea       	ldi	r30, 0xA0	; 160
     cc0:	f6 e0       	ldi	r31, 0x06	; 6
     cc2:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm; //Set LED PWM as output
     cc4:	87 e0       	ldi	r24, 0x07	; 7
     cc6:	e0 e8       	ldi	r30, 0x80	; 128
     cc8:	f6 e0       	ldi	r31, 0x06	; 6
     cca:	81 83       	std	Z+1, r24	; 0x01
	//only for inverted driver
	//PORTE.PIN0CTRL = PORT_INVEN_bm;
	//PORTE.PIN1CTRL = PORT_INVEN_bm;
	//PORTE.PIN2CTRL = PORT_INVEN_bm;

	TCE0.CTRLB = PWM_CH0_ENABLE_gc|PWM_CH2_ENABLE_gc|PWM_CH1_ENABLE_gc| TC_WGMODE_SS_gc; //enable pwm output, Single slope pwm
     ccc:	e0 e0       	ldi	r30, 0x00	; 0
     cce:	fa e0       	ldi	r31, 0x0A	; 10
     cd0:	83 e7       	ldi	r24, 0x73	; 115
     cd2:	81 83       	std	Z+1, r24	; 0x01
	
	TCE0.PER = 0xfff; //12 Bit resolution per period
     cd4:	8f ef       	ldi	r24, 0xFF	; 255
     cd6:	9f e0       	ldi	r25, 0x0F	; 15
     cd8:	86 a3       	std	Z+38, r24	; 0x26
     cda:	97 a3       	std	Z+39, r25	; 0x27
	
	//Enable overflow interrupt for Timer 0 on Port C to swich rgb LED
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc;
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	86 83       	std	Z+6, r24	; 0x06
     ce0:	08 95       	ret

00000ce2 <set_beepmotor_speed>:
*	
*	\param motor motor that shall receive ne speed value
*	\param speed speed for the motor. (-128 to 127)
*/

void set_beepmotor_speed(motor_t motor, int8_t speed){
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	c8 2f       	mov	r28, r24
     ce8:	d6 2f       	mov	r29, r22
	motor_op_mode_t op = motor_stop;
	// calculate rotation direction
	if (speed<0){
     cea:	67 ff       	sbrs	r22, 7
     cec:	0a c0       	rjmp	.+20     	; 0xd02 <set_beepmotor_speed+0x20>
		if(speed == INT8_MIN){
     cee:	60 38       	cpi	r22, 0x80	; 128
     cf0:	11 f0       	breq	.+4      	; 0xcf6 <set_beepmotor_speed+0x14>
			speed = INT8_MAX;
		}else{
			speed = -speed;
     cf2:	d1 95       	neg	r29
     cf4:	01 c0       	rjmp	.+2      	; 0xcf8 <set_beepmotor_speed+0x16>
void set_beepmotor_speed(motor_t motor, int8_t speed){
	motor_op_mode_t op = motor_stop;
	// calculate rotation direction
	if (speed<0){
		if(speed == INT8_MIN){
			speed = INT8_MAX;
     cf6:	df e7       	ldi	r29, 0x7F	; 127
		}else{
			speed = -speed;
		}		
		if(motor == motor_l){
     cf8:	c6 30       	cpi	r28, 0x06	; 6
     cfa:	59 f0       	breq	.+22     	; 0xd12 <set_beepmotor_speed+0x30>
			op = motor_cw;
		}else if(motor == motor_r){
     cfc:	c4 30       	cpi	r28, 0x04	; 4
     cfe:	39 f0       	breq	.+14     	; 0xd0e <set_beepmotor_speed+0x2c>
     d00:	04 c0       	rjmp	.+8      	; 0xd0a <set_beepmotor_speed+0x28>
			op = motor_ccw;
		}
	}else{
		if(motor == motor_l){
     d02:	86 30       	cpi	r24, 0x06	; 6
     d04:	21 f0       	breq	.+8      	; 0xd0e <set_beepmotor_speed+0x2c>
			op = motor_ccw;
		}else if(motor == motor_r){
     d06:	84 30       	cpi	r24, 0x04	; 4
     d08:	21 f0       	breq	.+8      	; 0xd12 <set_beepmotor_speed+0x30>
*	\param motor motor that shall receive ne speed value
*	\param speed speed for the motor. (-128 to 127)
*/

void set_beepmotor_speed(motor_t motor, int8_t speed){
	motor_op_mode_t op = motor_stop;
     d0a:	63 e0       	ldi	r22, 0x03	; 3
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <set_beepmotor_speed+0x32>
		}else if(motor == motor_r){
			op = motor_ccw;
		}
	}else{
		if(motor == motor_l){
			op = motor_ccw;
     d0e:	62 e0       	ldi	r22, 0x02	; 2
     d10:	01 c0       	rjmp	.+2      	; 0xd14 <set_beepmotor_speed+0x32>
		}else if(motor == motor_r){
			op = motor_cw;
     d12:	61 e0       	ldi	r22, 0x01	; 1
		}
	}
	//scale to uint8 value
	uint8_t new_speed = speed * (UINT8_MAX / INT8_MAX);
	//activate motor
	set_motor_operation_mode(motor, op);
     d14:	8c 2f       	mov	r24, r28
     d16:	0e 94 26 0a 	call	0x144c	; 0x144c <set_motor_operation_mode>
		}else if(motor == motor_r){
			op = motor_cw;
		}
	}
	//scale to uint8 value
	uint8_t new_speed = speed * (UINT8_MAX / INT8_MAX);
     d1a:	6d 2f       	mov	r22, r29
     d1c:	66 0f       	add	r22, r22
	//activate motor
	set_motor_operation_mode(motor, op);
	set_motor_speed(motor, new_speed);
     d1e:	8c 2f       	mov	r24, r28
	
}
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
	}
	//scale to uint8 value
	uint8_t new_speed = speed * (UINT8_MAX / INT8_MAX);
	//activate motor
	set_motor_operation_mode(motor, op);
	set_motor_speed(motor, new_speed);
     d24:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <set_motor_speed>

00000d28 <main>:
	} else{
		return (int) in;
	}
}

int main(void){
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	28 97       	sbiw	r28, 0x08	; 8
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	de bf       	out	0x3e, r29	; 62
	
	init_enable_32mhz();
     d36:	0e 94 24 06 	call	0xc48	; 0xc48 <init_enable_32mhz>
	init_usart();
     d3a:	0e 94 38 06 	call	0xc70	; 0xc70 <init_usart>
	init_motor();
     d3e:	0e 94 37 0a 	call	0x146e	; 0x146e <init_motor>
	init_ir_driver();
     d42:	0e 94 1a 09 	call	0x1234	; 0x1234 <init_ir_driver>
	
	init_rgb_led();
     d46:	0e 94 5e 06 	call	0xcbc	; 0xcbc <init_rgb_led>

inline void enable_rgb_leds(bool enable);
void enable_rgb_leds(bool enable){
	if (enable){
		//reset counter
		TCE0.CNT = 0x00;
     d4a:	10 92 20 0a 	sts	0x0A20, r1
     d4e:	10 92 21 0a 	sts	0x0A21, r1
		//restart counter
		TCE0.CTRLA = TC_CLKSEL_DIV1_gc;
     d52:	11 e0       	ldi	r17, 0x01	; 1
     d54:	10 93 00 0a 	sts	0x0A00, r17
	
	init_rgb_led();
	enable_rgb_leds(true);

	/* Enable PMIC interrupt level low. */
	PMIC.CTRL |= PMIC_LOLVLEX_bm;
     d58:	80 91 a2 00 	lds	r24, 0x00A2
     d5c:	81 60       	ori	r24, 0x01	; 1
     d5e:	80 93 a2 00 	sts	0x00A2, r24

	/* Enable global interrupts. */
	sei();
     d62:	78 94       	sei

	// set some colors
	myColors[0].red = 0x00;
     d64:	10 92 07 20 	sts	0x2007, r1
	myColors[0].green = 0xFF;
     d68:	8f ef       	ldi	r24, 0xFF	; 255
     d6a:	80 93 08 20 	sts	0x2008, r24
	myColors[0].blue = 0x00;
     d6e:	10 92 09 20 	sts	0x2009, r1
	
	myColors[1].red = 0x00;
     d72:	10 92 0a 20 	sts	0x200A, r1
	myColors[1].green = 0xFF;
     d76:	80 93 0b 20 	sts	0x200B, r24
	myColors[1].blue = 0x00;	
     d7a:	10 92 0c 20 	sts	0x200C, r1
	
	myColors[2].red = 0x00;
     d7e:	10 92 0d 20 	sts	0x200D, r1
	myColors[2].green = 0xFF;
     d82:	80 93 0e 20 	sts	0x200E, r24
	myColors[2].blue = 0x00;
     d86:	10 92 0f 20 	sts	0x200F, r1
	
	myColors[3].red = 0x00;
     d8a:	10 92 10 20 	sts	0x2010, r1
	myColors[3].green = 0xFF;
     d8e:	80 93 11 20 	sts	0x2011, r24
	myColors[3].blue = 0x00;
     d92:	10 92 12 20 	sts	0x2012, r1
	
	myColors[4].red = 0x00;
     d96:	10 92 13 20 	sts	0x2013, r1
	myColors[4].green = 0xFF;
     d9a:	80 93 14 20 	sts	0x2014, r24
	myColors[4].blue = 0x00;
     d9e:	10 92 15 20 	sts	0x2015, r1
	
	myColors[5].red = 0x00;
     da2:	10 92 16 20 	sts	0x2016, r1
	myColors[5].green = 0xFF;
     da6:	80 93 17 20 	sts	0x2017, r24
	myColors[5].blue = 0x00;
     daa:	10 92 18 20 	sts	0x2018, r1
	
	myColors[6].red = 0x00;
     dae:	10 92 19 20 	sts	0x2019, r1
	myColors[6].green = 0xFF;
     db2:	80 93 1a 20 	sts	0x201A, r24
	myColors[6].blue = 0x00;
     db6:	10 92 1b 20 	sts	0x201B, r1
	
	myColors[7].red = 0x00;
     dba:	10 92 1c 20 	sts	0x201C, r1
	myColors[7].green = 0xFF;
     dbe:	80 93 1d 20 	sts	0x201D, r24
	myColors[7].blue = 0x00;
     dc2:	10 92 1e 20 	sts	0x201E, r1
	
		
	int8_t led_swich_workaround = 0;
	
	
	set_motor_on(true);
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <set_motor_on>
	next_command.data_missing =- 1;
	next_command.head = 0;
	next_command.command = 0;
	next_command.device = 0;
	
	set_motor_on(true);
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <set_motor_on>
	set_beepmotor_speed(motor_l, 0);
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	86 e0       	ldi	r24, 0x06	; 6
     dd6:	0e 94 71 06 	call	0xce2	; 0xce2 <set_beepmotor_speed>
	set_beepmotor_speed(motor_r, 0);	
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	84 e0       	ldi	r24, 0x04	; 4
     dde:	0e 94 71 06 	call	0xce2	; 0xce2 <set_beepmotor_speed>
	
	//set IO for color sensors
	PORTD.DIRSET = PIN1_bm|PIN4_bm|PIN5_bm|PIN6_bm|PIN7_bm;
     de2:	82 ef       	ldi	r24, 0xF2	; 242
     de4:	80 93 61 06 	sts	0x0661, r24
	PORTD.DIRCLR = PIN0_bm;
     de8:	10 93 62 06 	sts	0x0662, r17
	PORTE.DIRSET = PIN3_bm;
     dec:	88 e0       	ldi	r24, 0x08	; 8
     dee:	80 93 81 06 	sts	0x0681, r24
	PORTE.OUTSET = PIN3_bm;
     df2:	80 93 85 06 	sts	0x0685, r24

	
	xmega_freq_cntr_init();				// Initializes XMEGA timer/counters and Event System
     df6:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <xmega_freq_cntr_init>
	xmega_tcca_clk_freq_sel(TC_CLKSEL_DIV8_gc);
     dfa:	84 e0       	ldi	r24, 0x04	; 4
     dfc:	0e 94 ed 0a 	call	0x15da	; 0x15da <xmega_tcca_clk_freq_sel>

	Command_Buffer_t next_command;
	next_command.data_missing =- 1;
	next_command.head = 0;
	next_command.command = 0;
	next_command.device = 0;
     e00:	e1 2c       	mov	r14, r1
	set_motor_on(true);

	Command_Buffer_t next_command;
	next_command.data_missing =- 1;
	next_command.head = 0;
	next_command.command = 0;
     e02:	10 e0       	ldi	r17, 0x00	; 0
	
	set_motor_on(true);

	Command_Buffer_t next_command;
	next_command.data_missing =- 1;
	next_command.head = 0;
     e04:	f1 2c       	mov	r15, r1
	
	
	set_motor_on(true);

	Command_Buffer_t next_command;
	next_command.data_missing =- 1;
     e06:	0f ef       	ldi	r16, 0xFF	; 255


    while(1){
		//temp
		//enable audio amplifier
		PORTF.DIRSET = PIN6_bm;
     e08:	30 e4       	ldi	r19, 0x40	; 64
     e0a:	d3 2e       	mov	r13, r19
void enable_rgb_leds(bool enable){
	if (enable){
		//reset counter
		TCE0.CNT = 0x00;
		//restart counter
		TCE0.CTRLA = TC_CLKSEL_DIV1_gc;
     e0c:	cc 24       	eor	r12, r12
     e0e:	c3 94       	inc	r12
	}else{
		TCE0.CTRLA = 0; // disable pwm output
		PORTE.OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm; // clear outputs
     e10:	47 e0       	ldi	r20, 0x07	; 7
     e12:	b4 2e       	mov	r11, r20
     e14:	08 c0       	rjmp	.+16     	; 0xe26 <main+0xfe>
					//get number of missing data to execute command
					if(next_command.device == BEEP_DEV_MOTORS){
						if(next_command.command == BEEP_COM_LEFT_MOTOR){
							next_command.data_missing = 1;
						}else if (next_command.command == BEEP_COM_RIGHT_MOTOR){
							next_command.data_missing = 1;
     e16:	01 e0       	ldi	r16, 0x01	; 1
     e18:	06 c0       	rjmp	.+12     	; 0xe26 <main+0xfe>
						}else if (next_command.command == BEEP_COM_BOTH_MOTORS){
							next_command.data_missing = 2;
     e1a:	02 e0       	ldi	r16, 0x02	; 2
     e1c:	04 c0       	rjmp	.+8      	; 0xe26 <main+0xfe>
						if(next_command.command == BEEP_COM_LEDS_OFF){
							enable_rgb_leds(false);
						}else if(next_command.command == BEEP_COM_LEDS_ON){
							enable_rgb_leds(true);
						}else if(next_command.command < 8){
							next_command.data_missing = 3;
     e1e:	03 e0       	ldi	r16, 0x03	; 3
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <main+0xfe>
								myColors[next_command.command].blue = next_command.data[2];
							}
						}
					
						//command executed, prepare for new command
						next_command.head = 0;
     e22:	f1 2c       	mov	r15, r1
						next_command.data_missing =- 1;
     e24:	0f ef       	ldi	r16, 0xFF	; 255


    while(1){
		//temp
		//enable audio amplifier
		PORTF.DIRSET = PIN6_bm;
     e26:	d0 92 a1 06 	sts	0x06A1, r13
		PORTF.OUTCLR = PIN6_bm;
     e2a:	d0 92 a6 06 	sts	0x06A6, r13
 		myColors[1].green = green;
 		myColors[1].blue = blue;
		//temp end
		*/
		
		if(ir_driver_is_measuring() == false){
     e2e:	0e 94 88 09 	call	0x1310	; 0x1310 <ir_driver_is_measuring>
     e32:	81 11       	cpse	r24, r1
     e34:	f8 cf       	rjmp	.-16     	; 0xe26 <main+0xfe>
			//TODO delete workaround when hardware fixed
			led_swich_workaround++;
			led_swich_workaround &= 8;
			
			ir_led_enable(led_swich_workaround);
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 2c 09 	call	0x1258	; 0x1258 <ir_led_enable>
			
			if(USART_RXBufferData_Available(&USART_data)){
     e3e:	8f e1       	ldi	r24, 0x1F	; 31
     e40:	90 e2       	ldi	r25, 0x20	; 32
     e42:	0e 94 a7 0a 	call	0x154e	; 0x154e <USART_RXBufferData_Available>
     e46:	88 23       	and	r24, r24
     e48:	71 f3       	breq	.-36     	; 0xe26 <main+0xfe>
				uint8_t data = USART_RXBuffer_GetByte(&USART_data);
     e4a:	8f e1       	ldi	r24, 0x1F	; 31
     e4c:	90 e2       	ldi	r25, 0x20	; 32
     e4e:	0e 94 af 0a 	call	0x155e	; 0x155e <USART_RXBuffer_GetByte>
				if(next_command.data_missing == -1){
     e52:	0f 3f       	cpi	r16, 0xFF	; 255
     e54:	09 f0       	breq	.+2      	; 0xe58 <main+0x130>
     e56:	4b c0       	rjmp	.+150    	; 0xeee <main+0x1c6>
					next_command.device = data & beep_dev_mask;
     e58:	20 ef       	ldi	r18, 0xF0	; 240
     e5a:	e2 2e       	mov	r14, r18
     e5c:	e8 22       	and	r14, r24
					next_command.command = data & beep_command_mask;
     e5e:	18 2f       	mov	r17, r24
     e60:	1f 70       	andi	r17, 0x0F	; 15
					//get number of missing data to execute command
					if(next_command.device == BEEP_DEV_MOTORS){
     e62:	80 e4       	ldi	r24, 0x40	; 64
     e64:	e8 12       	cpse	r14, r24
     e66:	10 c0       	rjmp	.+32     	; 0xe88 <main+0x160>
						if(next_command.command == BEEP_COM_LEFT_MOTOR){
     e68:	11 30       	cpi	r17, 0x01	; 1
     e6a:	a9 f2       	breq	.-86     	; 0xe16 <main+0xee>
							next_command.data_missing = 1;
						}else if (next_command.command == BEEP_COM_RIGHT_MOTOR){
     e6c:	12 30       	cpi	r17, 0x02	; 2
     e6e:	99 f2       	breq	.-90     	; 0xe16 <main+0xee>
							next_command.data_missing = 1;
						}else if (next_command.command == BEEP_COM_BOTH_MOTORS){
     e70:	13 30       	cpi	r17, 0x03	; 3
     e72:	99 f2       	breq	.-90     	; 0xe1a <main+0xf2>
							next_command.data_missing = 2;
						}else if (next_command.command == beep_com_motor_enable){
     e74:	1e 30       	cpi	r17, 0x0E	; 14
     e76:	11 f4       	brne	.+4      	; 0xe7c <main+0x154>
							set_motor_on(true);
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	03 c0       	rjmp	.+6      	; 0xe82 <main+0x15a>
							//next_command.data_missing = -1;
						}else if (next_command.command == beep_com_motor_shutdown){
     e7c:	1f 30       	cpi	r17, 0x0F	; 15
     e7e:	99 f6       	brne	.-90     	; 0xe26 <main+0xfe>
							set_motor_on(false);
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <set_motor_on>
     e86:	cf cf       	rjmp	.-98     	; 0xe26 <main+0xfe>
							//next_command.data_missing = -1;
						}
					}else if(next_command.device == BEEP_DEV_IR){			
     e88:	e1 10       	cpse	r14, r1
     e8a:	08 c0       	rjmp	.+16     	; 0xe9c <main+0x174>
						if(next_command.command <= 7){
     e8c:	18 30       	cpi	r17, 0x08	; 8
     e8e:	10 f4       	brcc	.+4      	; 0xe94 <main+0x16c>
							measure_ir_distances(next_command.command, 1, false);
     e90:	40 e0       	ldi	r20, 0x00	; 0
     e92:	0a c0       	rjmp	.+20     	; 0xea8 <main+0x180>
						}else if (next_command.command == BEEP_COM_IR_ALL){							
     e94:	1f 30       	cpi	r17, 0x0F	; 15
     e96:	39 f6       	brne	.-114    	; 0xe26 <main+0xfe>
							measure_ir_distances(0, 8, false);
     e98:	40 e0       	ldi	r20, 0x00	; 0
     e9a:	0d c0       	rjmp	.+26     	; 0xeb6 <main+0x18e>
						}
						//next_command.data_missing = -1;
					}else if(next_command.device == BEEP_DEV_IR_FILTERED){
     e9c:	80 e1       	ldi	r24, 0x10	; 16
     e9e:	e8 12       	cpse	r14, r24
     ea0:	0f c0       	rjmp	.+30     	; 0xec0 <main+0x198>
						if(next_command.command <= 7){
     ea2:	18 30       	cpi	r17, 0x08	; 8
     ea4:	20 f4       	brcc	.+8      	; 0xeae <main+0x186>
							measure_ir_distances(next_command.command, 1, true);
     ea6:	41 e0       	ldi	r20, 0x01	; 1
     ea8:	61 e0       	ldi	r22, 0x01	; 1
     eaa:	81 2f       	mov	r24, r17
     eac:	06 c0       	rjmp	.+12     	; 0xeba <main+0x192>
						}else if (next_command.command == BEEP_COM_IR_ALL){
     eae:	1f 30       	cpi	r17, 0x0F	; 15
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <main+0x18c>
     eb2:	b9 cf       	rjmp	.-142    	; 0xe26 <main+0xfe>
							measure_ir_distances(0, 8, true);
     eb4:	41 e0       	ldi	r20, 0x01	; 1
     eb6:	68 e0       	ldi	r22, 0x08	; 8
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	0e 94 48 09 	call	0x1290	; 0x1290 <measure_ir_distances>
     ebe:	b3 cf       	rjmp	.-154    	; 0xe26 <main+0xfe>
						}
					}else if(next_command.device == BEEP_DEV_RGB_LED){
     ec0:	80 e5       	ldi	r24, 0x50	; 80
     ec2:	e8 12       	cpse	r14, r24
     ec4:	b0 cf       	rjmp	.-160    	; 0xe26 <main+0xfe>
						if(next_command.command == BEEP_COM_LEDS_OFF){
     ec6:	1f 30       	cpi	r17, 0x0F	; 15
     ec8:	29 f4       	brne	.+10     	; 0xed4 <main+0x1ac>
		//reset counter
		TCE0.CNT = 0x00;
		//restart counter
		TCE0.CTRLA = TC_CLKSEL_DIV1_gc;
	}else{
		TCE0.CTRLA = 0; // disable pwm output
     eca:	10 92 00 0a 	sts	0x0A00, r1
		PORTE.OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm; // clear outputs
     ece:	b0 92 86 06 	sts	0x0686, r11
     ed2:	a9 cf       	rjmp	.-174    	; 0xe26 <main+0xfe>
							measure_ir_distances(0, 8, true);
						}
					}else if(next_command.device == BEEP_DEV_RGB_LED){
						if(next_command.command == BEEP_COM_LEDS_OFF){
							enable_rgb_leds(false);
						}else if(next_command.command == BEEP_COM_LEDS_ON){
     ed4:	1e 30       	cpi	r17, 0x0E	; 14
     ed6:	39 f4       	brne	.+14     	; 0xee6 <main+0x1be>

inline void enable_rgb_leds(bool enable);
void enable_rgb_leds(bool enable){
	if (enable){
		//reset counter
		TCE0.CNT = 0x00;
     ed8:	10 92 20 0a 	sts	0x0A20, r1
     edc:	10 92 21 0a 	sts	0x0A21, r1
		//restart counter
		TCE0.CTRLA = TC_CLKSEL_DIV1_gc;
     ee0:	c0 92 00 0a 	sts	0x0A00, r12
     ee4:	a0 cf       	rjmp	.-192    	; 0xe26 <main+0xfe>
					}else if(next_command.device == BEEP_DEV_RGB_LED){
						if(next_command.command == BEEP_COM_LEDS_OFF){
							enable_rgb_leds(false);
						}else if(next_command.command == BEEP_COM_LEDS_ON){
							enable_rgb_leds(true);
						}else if(next_command.command < 8){
     ee6:	18 30       	cpi	r17, 0x08	; 8
     ee8:	08 f4       	brcc	.+2      	; 0xeec <main+0x1c4>
     eea:	99 cf       	rjmp	.-206    	; 0xe1e <main+0xf6>
     eec:	9c cf       	rjmp	.-200    	; 0xe26 <main+0xfe>
							next_command.data_missing = 3;
						}
					}
				}else{
					next_command.data[next_command.head] = data;
     eee:	e4 e0       	ldi	r30, 0x04	; 4
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	ec 0f       	add	r30, r28
     ef4:	fd 1f       	adc	r31, r29
     ef6:	ef 0d       	add	r30, r15
     ef8:	f1 1d       	adc	r31, r1
     efa:	80 83       	st	Z, r24
					next_command.head += 1;
					next_command.data_missing -= 1;
     efc:	01 50       	subi	r16, 0x01	; 1
					if (next_command.data_missing == 0){					
     efe:	11 f0       	breq	.+4      	; 0xf04 <main+0x1dc>
							next_command.data_missing = 3;
						}
					}
				}else{
					next_command.data[next_command.head] = data;
					next_command.head += 1;
     f00:	f3 94       	inc	r15
     f02:	91 cf       	rjmp	.-222    	; 0xe26 <main+0xfe>
					next_command.data_missing -= 1;
					if (next_command.data_missing == 0){					
						if(next_command.device==BEEP_DEV_MOTORS){
     f04:	80 e4       	ldi	r24, 0x40	; 64
     f06:	e8 12       	cpse	r14, r24
     f08:	15 c0       	rjmp	.+42     	; 0xf34 <main+0x20c>
							if(next_command.command == BEEP_COM_LEFT_MOTOR){
     f0a:	11 30       	cpi	r17, 0x01	; 1
     f0c:	19 f4       	brne	.+6      	; 0xf14 <main+0x1ec>
								set_beepmotor_speed(motor_l, next_command.data[0]);
     f0e:	6c 81       	ldd	r22, Y+4	; 0x04
     f10:	86 e0       	ldi	r24, 0x06	; 6
     f12:	0d c0       	rjmp	.+26     	; 0xf2e <main+0x206>
							}else if(next_command.command == BEEP_COM_RIGHT_MOTOR){
     f14:	12 30       	cpi	r17, 0x02	; 2
     f16:	11 f4       	brne	.+4      	; 0xf1c <main+0x1f4>
								set_beepmotor_speed(motor_r, next_command.data[0]);
     f18:	6c 81       	ldd	r22, Y+4	; 0x04
     f1a:	08 c0       	rjmp	.+16     	; 0xf2c <main+0x204>
							}else if(next_command.command == BEEP_COM_BOTH_MOTORS){
     f1c:	13 30       	cpi	r17, 0x03	; 3
     f1e:	09 f0       	breq	.+2      	; 0xf22 <main+0x1fa>
     f20:	80 cf       	rjmp	.-256    	; 0xe22 <main+0xfa>
								set_beepmotor_speed(motor_l, next_command.data[0]);
     f22:	6c 81       	ldd	r22, Y+4	; 0x04
     f24:	86 e0       	ldi	r24, 0x06	; 6
     f26:	0e 94 71 06 	call	0xce2	; 0xce2 <set_beepmotor_speed>
								set_beepmotor_speed(motor_r, next_command.data[1]);
     f2a:	6d 81       	ldd	r22, Y+5	; 0x05
     f2c:	84 e0       	ldi	r24, 0x04	; 4
     f2e:	0e 94 71 06 	call	0xce2	; 0xce2 <set_beepmotor_speed>
     f32:	77 cf       	rjmp	.-274    	; 0xe22 <main+0xfa>
							}
						}else if(next_command.device == BEEP_DEV_RGB_LED){
     f34:	80 e5       	ldi	r24, 0x50	; 80
     f36:	e8 12       	cpse	r14, r24
     f38:	74 cf       	rjmp	.-280    	; 0xe22 <main+0xfa>
							if (next_command.command < 8){
     f3a:	18 30       	cpi	r17, 0x08	; 8
     f3c:	08 f0       	brcs	.+2      	; 0xf40 <main+0x218>
     f3e:	71 cf       	rjmp	.-286    	; 0xe22 <main+0xfa>
								myColors[next_command.command].red = next_command.data[0];
     f40:	21 2f       	mov	r18, r17
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	8c 81       	ldd	r24, Y+4	; 0x04
     f46:	f9 01       	movw	r30, r18
     f48:	ee 0f       	add	r30, r30
     f4a:	ff 1f       	adc	r31, r31
     f4c:	e2 0f       	add	r30, r18
     f4e:	f3 1f       	adc	r31, r19
     f50:	e9 5f       	subi	r30, 0xF9	; 249
     f52:	ff 4d       	sbci	r31, 0xDF	; 223
     f54:	80 83       	st	Z, r24
								myColors[next_command.command].green = next_command.data[1];
     f56:	8d 81       	ldd	r24, Y+5	; 0x05
     f58:	81 83       	std	Z+1, r24	; 0x01
								myColors[next_command.command].blue = next_command.data[2];
     f5a:	8e 81       	ldd	r24, Y+6	; 0x06
     f5c:	82 83       	std	Z+2, r24	; 0x02
     f5e:	61 cf       	rjmp	.-318    	; 0xe22 <main+0xfa>

00000f60 <__vector_88>:
		}
    }
}


ISR(USARTD0_RXC_vect){
     f60:	1f 92       	push	r1
     f62:	0f 92       	push	r0
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	0f 92       	push	r0
     f68:	11 24       	eor	r1, r1
     f6a:	0b b6       	in	r0, 0x3b	; 59
     f6c:	0f 92       	push	r0
     f6e:	2f 93       	push	r18
     f70:	3f 93       	push	r19
     f72:	4f 93       	push	r20
     f74:	5f 93       	push	r21
     f76:	6f 93       	push	r22
     f78:	7f 93       	push	r23
     f7a:	8f 93       	push	r24
     f7c:	9f 93       	push	r25
     f7e:	af 93       	push	r26
     f80:	bf 93       	push	r27
     f82:	ef 93       	push	r30
     f84:	ff 93       	push	r31
	USART_RXComplete(&USART_data);
     f86:	8f e1       	ldi	r24, 0x1F	; 31
     f88:	90 e2       	ldi	r25, 0x20	; 32
     f8a:	0e 94 bb 0a 	call	0x1576	; 0x1576 <USART_RXComplete>
}
     f8e:	ff 91       	pop	r31
     f90:	ef 91       	pop	r30
     f92:	bf 91       	pop	r27
     f94:	af 91       	pop	r26
     f96:	9f 91       	pop	r25
     f98:	8f 91       	pop	r24
     f9a:	7f 91       	pop	r23
     f9c:	6f 91       	pop	r22
     f9e:	5f 91       	pop	r21
     fa0:	4f 91       	pop	r20
     fa2:	3f 91       	pop	r19
     fa4:	2f 91       	pop	r18
     fa6:	0f 90       	pop	r0
     fa8:	0b be       	out	0x3b, r0	; 59
     faa:	0f 90       	pop	r0
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	0f 90       	pop	r0
     fb0:	1f 90       	pop	r1
     fb2:	18 95       	reti

00000fb4 <__vector_89>:


ISR(USARTD0_DRE_vect){
     fb4:	1f 92       	push	r1
     fb6:	0f 92       	push	r0
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	0f 92       	push	r0
     fbc:	11 24       	eor	r1, r1
     fbe:	0b b6       	in	r0, 0x3b	; 59
     fc0:	0f 92       	push	r0
     fc2:	2f 93       	push	r18
     fc4:	3f 93       	push	r19
     fc6:	4f 93       	push	r20
     fc8:	5f 93       	push	r21
     fca:	6f 93       	push	r22
     fcc:	7f 93       	push	r23
     fce:	8f 93       	push	r24
     fd0:	9f 93       	push	r25
     fd2:	af 93       	push	r26
     fd4:	bf 93       	push	r27
     fd6:	ef 93       	push	r30
     fd8:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_data);
     fda:	8f e1       	ldi	r24, 0x1F	; 31
     fdc:	90 e2       	ldi	r25, 0x20	; 32
     fde:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <USART_DataRegEmpty>
}
     fe2:	ff 91       	pop	r31
     fe4:	ef 91       	pop	r30
     fe6:	bf 91       	pop	r27
     fe8:	af 91       	pop	r26
     fea:	9f 91       	pop	r25
     fec:	8f 91       	pop	r24
     fee:	7f 91       	pop	r23
     ff0:	6f 91       	pop	r22
     ff2:	5f 91       	pop	r21
     ff4:	4f 91       	pop	r20
     ff6:	3f 91       	pop	r19
     ff8:	2f 91       	pop	r18
     ffa:	0f 90       	pop	r0
     ffc:	0b be       	out	0x3b, r0	; 59
     ffe:	0f 90       	pop	r0
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	0f 90       	pop	r0
    1004:	1f 90       	pop	r1
    1006:	18 95       	reti

00001008 <__vector_71>:


ISR(ADCA_CH0_vect){
    1008:	1f 92       	push	r1
    100a:	0f 92       	push	r0
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	0f 92       	push	r0
    1010:	11 24       	eor	r1, r1
    1012:	0b b6       	in	r0, 0x3b	; 59
    1014:	0f 92       	push	r0
    1016:	2f 93       	push	r18
    1018:	3f 93       	push	r19
    101a:	4f 93       	push	r20
    101c:	5f 93       	push	r21
    101e:	6f 93       	push	r22
    1020:	7f 93       	push	r23
    1022:	8f 93       	push	r24
    1024:	9f 93       	push	r25
    1026:	af 93       	push	r26
    1028:	bf 93       	push	r27
    102a:	ef 93       	push	r30
    102c:	ff 93       	push	r31
		
	ISR_adc_ir_driver();
    102e:	0e 94 8f 09 	call	0x131e	; 0x131e <ISR_adc_ir_driver>
	
}
    1032:	ff 91       	pop	r31
    1034:	ef 91       	pop	r30
    1036:	bf 91       	pop	r27
    1038:	af 91       	pop	r26
    103a:	9f 91       	pop	r25
    103c:	8f 91       	pop	r24
    103e:	7f 91       	pop	r23
    1040:	6f 91       	pop	r22
    1042:	5f 91       	pop	r21
    1044:	4f 91       	pop	r20
    1046:	3f 91       	pop	r19
    1048:	2f 91       	pop	r18
    104a:	0f 90       	pop	r0
    104c:	0b be       	out	0x3b, r0	; 59
    104e:	0f 90       	pop	r0
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	0f 90       	pop	r0
    1054:	1f 90       	pop	r1
    1056:	18 95       	reti

00001058 <__vector_47>:

//RGB LED multiplexing
ISR(TCE0_OVF_vect){
    1058:	1f 92       	push	r1
    105a:	0f 92       	push	r0
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	0f 92       	push	r0
    1060:	11 24       	eor	r1, r1
    1062:	0b b6       	in	r0, 0x3b	; 59
    1064:	0f 92       	push	r0
    1066:	2f 93       	push	r18
    1068:	3f 93       	push	r19
    106a:	4f 93       	push	r20
    106c:	5f 93       	push	r21
    106e:	6f 93       	push	r22
    1070:	7f 93       	push	r23
    1072:	8f 93       	push	r24
    1074:	9f 93       	push	r25
    1076:	af 93       	push	r26
    1078:	bf 93       	push	r27
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	ef 93       	push	r30
    1080:	ff 93       	push	r31
	static uint8_t led_multiplex_counter = 0; //software prescale
	static uint8_t led = 0; //next led number
	if(led_multiplex_counter++ > 0x5){
    1082:	80 91 00 20 	lds	r24, 0x2000
    1086:	86 30       	cpi	r24, 0x06	; 6
    1088:	20 f4       	brcc	.+8      	; 0x1092 <__vector_47+0x3a>
    108a:	8f 5f       	subi	r24, 0xFF	; 255
    108c:	80 93 00 20 	sts	0x2000, r24
    1090:	b1 c0       	rjmp	.+354    	; 0x11f4 <__vector_47+0x19c>
		led_multiplex_counter=0;
    1092:	10 92 00 20 	sts	0x2000, r1
		//disable LED OUTPUT
		TCE0.CTRLB = TC_WGMODE_SS_gc; //disable pwm output, leave Single slope on
    1096:	83 e0       	ldi	r24, 0x03	; 3
    1098:	80 93 01 0a 	sts	0x0A01, r24
		PORTE.OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm; // clear outputs
    109c:	87 e0       	ldi	r24, 0x07	; 7
    109e:	80 93 86 06 	sts	0x0686, r24
		TCE0.CTRLA = 0; // disable counter
    10a2:	10 92 00 0a 	sts	0x0A00, r1
		//reset counter
		TCE0.CNT = 0x00;
		//restart counter
		TCE0.CTRLA = TC_CLKSEL_DIV1_gc;
	}else{
		TCE0.CTRLA = 0; // disable pwm output
    10a6:	10 92 00 0a 	sts	0x0A00, r1
		PORTE.OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm; // clear outputs
    10aa:	80 93 86 06 	sts	0x0686, r24


		enable_rgb_leds(false);
		
		//choose LED on multiplexer
		PORTF.OUTCLR = (0b111 << 3);
    10ae:	88 e3       	ldi	r24, 0x38	; 56
    10b0:	80 93 a6 06 	sts	0x06A6, r24
		PORTF.OUTSET = (pgm_read_word (&rgb_led_lut[led]));
    10b4:	20 91 01 20 	lds	r18, 0x2001
    10b8:	82 2f       	mov	r24, r18
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	fc 01       	movw	r30, r24
    10be:	e8 53       	subi	r30, 0x38	; 56
    10c0:	fe 4f       	sbci	r31, 0xFE	; 254
    10c2:	45 91       	lpm	r20, Z+
    10c4:	54 91       	lpm	r21, Z
    10c6:	40 93 a5 06 	sts	0x06A5, r20
		
		//set pwm values
		if(pgm_read_word (&pwmtable_12[myColors[led].red])){
    10ca:	ac 01       	movw	r20, r24
    10cc:	44 0f       	add	r20, r20
    10ce:	55 1f       	adc	r21, r21
    10d0:	da 01       	movw	r26, r20
    10d2:	a8 0f       	add	r26, r24
    10d4:	b9 1f       	adc	r27, r25
    10d6:	a9 5f       	subi	r26, 0xF9	; 249
    10d8:	bf 4d       	sbci	r27, 0xDF	; 223
    10da:	ec 91       	ld	r30, X
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	ee 0f       	add	r30, r30
    10e0:	ff 1f       	adc	r31, r31
    10e2:	e8 5e       	subi	r30, 0xE8	; 232
    10e4:	fd 4f       	sbci	r31, 0xFD	; 253
    10e6:	65 91       	lpm	r22, Z+
    10e8:	74 91       	lpm	r23, Z
    10ea:	67 2b       	or	r22, r23
    10ec:	d1 f0       	breq	.+52     	; 0x1122 <__vector_47+0xca>
			//TODO finish to implement LUT
			//uint16_t
			volatile uint16_t* adress = (uint16_t*) pgm_read_word(&red_channel_lut[led]);
    10ee:	fa 01       	movw	r30, r20
    10f0:	e8 5f       	subi	r30, 0xF8	; 248
    10f2:	fd 4f       	sbci	r31, 0xFD	; 253
    10f4:	45 91       	lpm	r20, Z+
    10f6:	54 91       	lpm	r21, Z
    10f8:	c4 2f       	mov	r28, r20
    10fa:	d5 2f       	mov	r29, r21
			*adress = pgm_read_word(&pwmtable_12[myColors[led].red]);
    10fc:	ec 91       	ld	r30, X
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	ee 0f       	add	r30, r30
    1102:	ff 1f       	adc	r31, r31
    1104:	e8 5e       	subi	r30, 0xE8	; 232
    1106:	fd 4f       	sbci	r31, 0xFD	; 253
    1108:	45 91       	lpm	r20, Z+
    110a:	54 91       	lpm	r21, Z
    110c:	48 83       	st	Y, r20
    110e:	59 83       	std	Y+1, r21	; 0x01
			TCE0.CTRLB |= pgm_read_byte(&PWM_red_ENABLE_gc_lut[led]);
    1110:	30 91 01 0a 	lds	r19, 0x0A01
    1114:	fc 01       	movw	r30, r24
    1116:	e0 52       	subi	r30, 0x20	; 32
    1118:	fe 4f       	sbci	r31, 0xFE	; 254
    111a:	e4 91       	lpm	r30, Z
    111c:	e3 2b       	or	r30, r19
    111e:	e0 93 01 0a 	sts	0x0A01, r30
		}

		if(pgm_read_word(&pwmtable_12[myColors[led].blue])){
    1122:	ac 01       	movw	r20, r24
    1124:	44 0f       	add	r20, r20
    1126:	55 1f       	adc	r21, r21
    1128:	da 01       	movw	r26, r20
    112a:	a8 0f       	add	r26, r24
    112c:	b9 1f       	adc	r27, r25
    112e:	a9 5f       	subi	r26, 0xF9	; 249
    1130:	bf 4d       	sbci	r27, 0xDF	; 223
    1132:	12 96       	adiw	r26, 0x02	; 2
    1134:	ec 91       	ld	r30, X
    1136:	12 97       	sbiw	r26, 0x02	; 2
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	ee 0f       	add	r30, r30
    113c:	ff 1f       	adc	r31, r31
    113e:	e8 5e       	subi	r30, 0xE8	; 232
    1140:	fd 4f       	sbci	r31, 0xFD	; 253
    1142:	65 91       	lpm	r22, Z+
    1144:	74 91       	lpm	r23, Z
    1146:	67 2b       	or	r22, r23
    1148:	d9 f0       	breq	.+54     	; 0x1180 <__vector_47+0x128>
			volatile uint16_t* adress = (uint16_t*) pgm_read_word(&blue_channel_lut[led]);
    114a:	fa 01       	movw	r30, r20
    114c:	e8 50       	subi	r30, 0x08	; 8
    114e:	fe 4f       	sbci	r31, 0xFE	; 254
    1150:	45 91       	lpm	r20, Z+
    1152:	54 91       	lpm	r21, Z
    1154:	c4 2f       	mov	r28, r20
    1156:	d5 2f       	mov	r29, r21
			*adress = pgm_read_word(&pwmtable_12[myColors[led].blue]);
    1158:	12 96       	adiw	r26, 0x02	; 2
    115a:	ec 91       	ld	r30, X
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	ee 0f       	add	r30, r30
    1160:	ff 1f       	adc	r31, r31
    1162:	e8 5e       	subi	r30, 0xE8	; 232
    1164:	fd 4f       	sbci	r31, 0xFD	; 253
    1166:	45 91       	lpm	r20, Z+
    1168:	54 91       	lpm	r21, Z
    116a:	48 83       	st	Y, r20
    116c:	59 83       	std	Y+1, r21	; 0x01
			TCE0.CTRLB |= pgm_read_byte(&PWM_blue_ENABLE_gc_lut[led]);
    116e:	30 91 01 0a 	lds	r19, 0x0A01
    1172:	fc 01       	movw	r30, r24
    1174:	e8 52       	subi	r30, 0x28	; 40
    1176:	fe 4f       	sbci	r31, 0xFE	; 254
    1178:	e4 91       	lpm	r30, Z
    117a:	e3 2b       	or	r30, r19
    117c:	e0 93 01 0a 	sts	0x0A01, r30
		}
		
		if(pgm_read_word (&pwmtable_12[myColors[led].green])){
    1180:	ac 01       	movw	r20, r24
    1182:	44 0f       	add	r20, r20
    1184:	55 1f       	adc	r21, r21
    1186:	da 01       	movw	r26, r20
    1188:	a8 0f       	add	r26, r24
    118a:	b9 1f       	adc	r27, r25
    118c:	a9 5f       	subi	r26, 0xF9	; 249
    118e:	bf 4d       	sbci	r27, 0xDF	; 223
    1190:	11 96       	adiw	r26, 0x01	; 1
    1192:	ec 91       	ld	r30, X
    1194:	11 97       	sbiw	r26, 0x01	; 1
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	ee 0f       	add	r30, r30
    119a:	ff 1f       	adc	r31, r31
    119c:	e8 5e       	subi	r30, 0xE8	; 232
    119e:	fd 4f       	sbci	r31, 0xFD	; 253
    11a0:	65 91       	lpm	r22, Z+
    11a2:	74 91       	lpm	r23, Z
    11a4:	67 2b       	or	r22, r23
    11a6:	d9 f0       	breq	.+54     	; 0x11de <__vector_47+0x186>
			volatile uint16_t* adress = (uint16_t*) pgm_read_word(&green_channel_lut[led]);
    11a8:	fa 01       	movw	r30, r20
    11aa:	e8 51       	subi	r30, 0x18	; 24
    11ac:	fe 4f       	sbci	r31, 0xFE	; 254
    11ae:	45 91       	lpm	r20, Z+
    11b0:	54 91       	lpm	r21, Z
    11b2:	c4 2f       	mov	r28, r20
    11b4:	d5 2f       	mov	r29, r21
			*adress = pgm_read_word(&pwmtable_12[myColors[led].green]);
    11b6:	11 96       	adiw	r26, 0x01	; 1
    11b8:	ec 91       	ld	r30, X
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	ee 0f       	add	r30, r30
    11be:	ff 1f       	adc	r31, r31
    11c0:	e8 5e       	subi	r30, 0xE8	; 232
    11c2:	fd 4f       	sbci	r31, 0xFD	; 253
    11c4:	45 91       	lpm	r20, Z+
    11c6:	54 91       	lpm	r21, Z
    11c8:	48 83       	st	Y, r20
    11ca:	59 83       	std	Y+1, r21	; 0x01
			TCE0.CTRLB |= pgm_read_byte(&PWM_green_ENABLE_gc_lut[led]);
    11cc:	30 91 01 0a 	lds	r19, 0x0A01
    11d0:	fc 01       	movw	r30, r24
    11d2:	e0 53       	subi	r30, 0x30	; 48
    11d4:	fe 4f       	sbci	r31, 0xFE	; 254
    11d6:	84 91       	lpm	r24, Z
    11d8:	83 2b       	or	r24, r19
    11da:	80 93 01 0a 	sts	0x0A01, r24
		}

		//reset counter, start counter
		TCE0.CNT = 0x00;
    11de:	10 92 20 0a 	sts	0x0A20, r1
    11e2:	10 92 21 0a 	sts	0x0A21, r1
		TCE0.CTRLA = TC_CLKSEL_DIV1_gc;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	80 93 00 0a 	sts	0x0A00, r24
		
		//select next LED
		led++;
    11ec:	2f 5f       	subi	r18, 0xFF	; 255
		led &= 0b111;
    11ee:	27 70       	andi	r18, 0x07	; 7
    11f0:	20 93 01 20 	sts	0x2001, r18
	}
    11f4:	ff 91       	pop	r31
    11f6:	ef 91       	pop	r30
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	bf 91       	pop	r27
    11fe:	af 91       	pop	r26
    1200:	9f 91       	pop	r25
    1202:	8f 91       	pop	r24
    1204:	7f 91       	pop	r23
    1206:	6f 91       	pop	r22
    1208:	5f 91       	pop	r21
    120a:	4f 91       	pop	r20
    120c:	3f 91       	pop	r19
    120e:	2f 91       	pop	r18
    1210:	0f 90       	pop	r0
    1212:	0b be       	out	0x3b, r0	; 59
    1214:	0f 90       	pop	r0
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	0f 90       	pop	r0
    121a:	1f 90       	pop	r1
    121c:	18 95       	reti

0000121e <init_adc>:
extern const uint8_t ir_led_lut[8] PROGMEM;
	

/*! \brief ADC enabled, signed mode, 12 bit resolution, 512 clock divider, interupts enabled*/
void init_adc(void){
	ADCA.CTRLA = ADC_ENABLE_bm; //enable adc
    121e:	e0 e0       	ldi	r30, 0x00	; 0
    1220:	f2 e0       	ldi	r31, 0x02	; 2
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	80 83       	st	Z, r24
	ADCA.CTRLB = ADC_CONMODE_bm | ADC_RESOLUTION_12BIT_gc; //signed mode, no current limit, no freerun, 12 bit resolution (max value: 2047)
    1226:	90 e1       	ldi	r25, 0x10	; 16
    1228:	91 83       	std	Z+1, r25	; 0x01
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc; //Set 512 clock divider
    122a:	97 e0       	ldi	r25, 0x07	; 7
    122c:	94 83       	std	Z+4, r25	; 0x04
	ADCA.REFCTRL = ADC_REFSEL_INT1V_gc; // use internal 1V ref
    122e:	12 82       	std	Z+2, r1	; 0x02
	
	ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc|ADC_CH_INTLVL_LO_gc; //low priority interrupt on conv complete
    1230:	82 a3       	std	Z+34, r24	; 0x22
    1232:	08 95       	ret

00001234 <init_ir_driver>:
void init_ir_led(void){
	PORTF.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm;
}

void init_ir_driver(void){
	init_adc();
    1234:	0e 94 0f 09 	call	0x121e	; 0x121e <init_adc>
	ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc|ADC_CH_INTLVL_LO_gc; //low priority interrupt on conv complete
}

/*! \brief init ir leds (set multiplex chanels as outputs)*/
void init_ir_led(void){
	PORTF.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm;
    1238:	87 e0       	ldi	r24, 0x07	; 7
    123a:	e0 ea       	ldi	r30, 0xA0	; 160
    123c:	f6 e0       	ldi	r31, 0x06	; 6
    123e:	81 83       	std	Z+1, r24	; 0x01
    1240:	08 95       	ret

00001242 <start_adc>:
/*! \brief starts adc-conversion on the inputpin input.
*	\param input pin to measure voltage. (values: 0 to 15)
*/
void start_adc(uint8_t input){
	//input between 0 and 15
	ADCA.CH0.MUXCTRL = (input<<3) | ADC_CH_MUXNEG_PIN1_gc; //setup mux: input channel | refference voltage
    1242:	28 e0       	ldi	r18, 0x08	; 8
    1244:	82 9f       	mul	r24, r18
    1246:	c0 01       	movw	r24, r0
    1248:	11 24       	eor	r1, r1
    124a:	81 60       	ori	r24, 0x01	; 1
    124c:	e0 e0       	ldi	r30, 0x00	; 0
    124e:	f2 e0       	ldi	r31, 0x02	; 2
    1250:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH0.CTRL = ADC_CH_START_bm | ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc; //start conv with 1x gain, diff mode
    1252:	82 e8       	ldi	r24, 0x82	; 130
    1254:	80 a3       	std	Z+32, r24	; 0x20
    1256:	08 95       	ret

00001258 <ir_led_enable>:

/*! \brief enable led of ir distance sensor
*	\param led index of led
*/
void ir_led_enable(uint8_t led){
	PORTF.OUTCLR = 0b111;
    1258:	a0 ea       	ldi	r26, 0xA0	; 160
    125a:	b6 e0       	ldi	r27, 0x06	; 6
    125c:	97 e0       	ldi	r25, 0x07	; 7
    125e:	16 96       	adiw	r26, 0x06	; 6
    1260:	9c 93       	st	X, r25
    1262:	16 97       	sbiw	r26, 0x06	; 6
	PORTF.OUTSET = pgm_read_word(&ir_led_lut[led]);
    1264:	e8 2f       	mov	r30, r24
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	e8 5e       	subi	r30, 0xE8	; 232
    126a:	fb 4f       	sbci	r31, 0xFB	; 251
    126c:	85 91       	lpm	r24, Z+
    126e:	94 91       	lpm	r25, Z
    1270:	15 96       	adiw	r26, 0x05	; 5
    1272:	8c 93       	st	X, r24
    1274:	08 95       	ret

00001276 <measure_ir_distance>:

/*! \brief Measures distance
*	Starts measurement of ir distance.
*	led can be turned on or off (off: different led is turned on. WORKAROUND)
*/
void measure_ir_distance(uint8_t ir_led, bool led_enabled){
    1276:	cf 93       	push	r28
    1278:	c8 2f       	mov	r28, r24
	if (led_enabled){
    127a:	61 11       	cpse	r22, r1
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <measure_ir_distance+0xc>
		ir_led_enable(ir_led);
		}else{
		ir_led_enable((ir_led + 1) % 8);
    127e:	8f 5f       	subi	r24, 0xFF	; 255
    1280:	87 70       	andi	r24, 0x07	; 7
    1282:	0e 94 2c 09 	call	0x1258	; 0x1258 <ir_led_enable>
	}
	start_adc(ir_led + 8);
    1286:	8c 2f       	mov	r24, r28
    1288:	88 5f       	subi	r24, 0xF8	; 248
}
    128a:	cf 91       	pop	r28
	if (led_enabled){
		ir_led_enable(ir_led);
		}else{
		ir_led_enable((ir_led + 1) % 8);
	}
	start_adc(ir_led + 8);
    128c:	0c 94 21 09 	jmp	0x1242	; 0x1242 <start_adc>

00001290 <measure_ir_distances>:
}


void measure_ir_distances(uint8_t start_led, uint8_t count, bool filtered){
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	c8 2f       	mov	r28, r24
    1296:	d6 2f       	mov	r29, r22
	if (count == 1 && filtered){
    1298:	61 30       	cpi	r22, 0x01	; 1
    129a:	b9 f4       	brne	.+46     	; 0x12ca <measure_ir_distances+0x3a>
    129c:	44 23       	and	r20, r20
    129e:	71 f0       	breq	.+28     	; 0x12bc <measure_ir_distances+0x2c>
		adc_task = ADC_TASK_IR_FILTERED_ONCE;
    12a0:	83 e0       	ldi	r24, 0x03	; 3
    12a2:	80 93 3e 20 	sts	0x203E, r24
		ir_raw_stored = false;
    12a6:	10 92 03 20 	sts	0x2003, r1
		ir_led_enable((start_led + 1) % 8); //Enable different LED (Workaround)
    12aa:	8c 2f       	mov	r24, r28
    12ac:	8f 5f       	subi	r24, 0xFF	; 255
    12ae:	87 70       	andi	r24, 0x07	; 7
    12b0:	0e 94 2c 09 	call	0x1258	; 0x1258 <ir_led_enable>
		conv_left = count * 2 * BUFFER_SIZE;
    12b4:	80 e1       	ldi	r24, 0x10	; 16
    12b6:	80 93 02 20 	sts	0x2002, r24
    12ba:	20 c0       	rjmp	.+64     	; 0x12fc <measure_ir_distances+0x6c>
		
		}else if(count == 1 && ~filtered){
		adc_task = ADC_TASK_IR_ONCE;
    12bc:	60 93 3e 20 	sts	0x203E, r22
		conv_left = count;
    12c0:	60 93 02 20 	sts	0x2002, r22
		ir_led_enable(start_led);
    12c4:	0e 94 2c 09 	call	0x1258	; 0x1258 <ir_led_enable>
    12c8:	19 c0       	rjmp	.+50     	; 0x12fc <measure_ir_distances+0x6c>
		
		}else if(count > 1 && filtered){
    12ca:	62 30       	cpi	r22, 0x02	; 2
    12cc:	b8 f0       	brcs	.+46     	; 0x12fc <measure_ir_distances+0x6c>
    12ce:	44 23       	and	r20, r20
    12d0:	69 f0       	breq	.+26     	; 0x12ec <measure_ir_distances+0x5c>
		adc_task = ADC_TASK_IR_FILTERED_CONTINUES;
    12d2:	84 e0       	ldi	r24, 0x04	; 4
    12d4:	80 93 3e 20 	sts	0x203E, r24
		ir_raw_stored = false;
    12d8:	10 92 03 20 	sts	0x2003, r1
		ir_led_enable((start_led + 1) % 8); //Enable different LED (Workaround)
    12dc:	8c 2f       	mov	r24, r28
    12de:	8f 5f       	subi	r24, 0xFF	; 255
    12e0:	87 70       	andi	r24, 0x07	; 7
    12e2:	0e 94 2c 09 	call	0x1258	; 0x1258 <ir_led_enable>
		conv_left = count * 2 * BUFFER_SIZE; //  for each ir sensor measure once with enabled and once with disabled led
    12e6:	d2 95       	swap	r29
    12e8:	d0 7f       	andi	r29, 0xF0	; 240
    12ea:	06 c0       	rjmp	.+12     	; 0x12f8 <measure_ir_distances+0x68>
		
		}else if(count > 1 && ~filtered){
		adc_task = ADC_TASK_IR_CONTINUES;
    12ec:	82 e0       	ldi	r24, 0x02	; 2
    12ee:	80 93 3e 20 	sts	0x203E, r24
		ir_led_enable(start_led);
    12f2:	8c 2f       	mov	r24, r28
    12f4:	0e 94 2c 09 	call	0x1258	; 0x1258 <ir_led_enable>
		conv_left = count; //  for each ir sensor measure once with enabled led
    12f8:	d0 93 02 20 	sts	0x2002, r29
	}
	ir_data_buffer.head = 0;
    12fc:	10 92 47 20 	sts	0x2047, r1
	cur_ir_led = start_led;
    1300:	c0 93 4a 20 	sts	0x204A, r28
	start_adc(start_led + 8);
    1304:	8c 2f       	mov	r24, r28
    1306:	88 5f       	subi	r24, 0xF8	; 248
}
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
		ir_led_enable(start_led);
		conv_left = count; //  for each ir sensor measure once with enabled led
	}
	ir_data_buffer.head = 0;
	cur_ir_led = start_led;
	start_adc(start_led + 8);
    130c:	0c 94 21 09 	jmp	0x1242	; 0x1242 <start_adc>

00001310 <ir_driver_is_measuring>:
}

bool ir_driver_is_measuring(void){
	return conv_left > 0;
    1310:	90 91 02 20 	lds	r25, 0x2002
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	91 11       	cpse	r25, r1
    1318:	01 c0       	rjmp	.+2      	; 0x131c <ir_driver_is_measuring+0xc>
    131a:	80 e0       	ldi	r24, 0x00	; 0
}
    131c:	08 95       	ret

0000131e <ISR_adc_ir_driver>:


void ISR_adc_ir_driver()
{
	conv_left -= 1;
    131e:	80 91 02 20 	lds	r24, 0x2002
    1322:	81 50       	subi	r24, 0x01	; 1
    1324:	80 93 02 20 	sts	0x2002, r24
	
	if (adc_task == ADC_TASK_IR_CONTINUES || adc_task == ADC_TASK_IR_ONCE){
    1328:	80 91 3e 20 	lds	r24, 0x203E
    132c:	82 30       	cpi	r24, 0x02	; 2
    132e:	21 f0       	breq	.+8      	; 0x1338 <ISR_adc_ir_driver+0x1a>
    1330:	80 91 3e 20 	lds	r24, 0x203E
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	c1 f4       	brne	.+48     	; 0x1368 <ISR_adc_ir_driver+0x4a>
		// no filter, transmit result without any manipulation (except scaling to uint8)
		USART_TXBuffer_PutByte(&USART_data, ADCA.CH0.RES / (2047 / 255));
    1338:	60 91 24 02 	lds	r22, 0x0224
    133c:	70 91 25 02 	lds	r23, 0x0225
    1340:	93 e0       	ldi	r25, 0x03	; 3
    1342:	76 95       	lsr	r23
    1344:	67 95       	ror	r22
    1346:	9a 95       	dec	r25
    1348:	e1 f7       	brne	.-8      	; 0x1342 <ISR_adc_ir_driver+0x24>
    134a:	8f e1       	ldi	r24, 0x1F	; 31
    134c:	90 e2       	ldi	r25, 0x20	; 32
    134e:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <USART_TXBuffer_PutByte>
		cur_ir_led += 1;
    1352:	80 91 4a 20 	lds	r24, 0x204A
    1356:	8f 5f       	subi	r24, 0xFF	; 255
    1358:	80 93 4a 20 	sts	0x204A, r24
		if (conv_left>0){
    135c:	80 91 02 20 	lds	r24, 0x2002
    1360:	88 23       	and	r24, r24
    1362:	09 f4       	brne	.+2      	; 0x1366 <ISR_adc_ir_driver+0x48>
    1364:	72 c0       	rjmp	.+228    	; 0x144a <ISR_adc_ir_driver+0x12c>
    1366:	6c c0       	rjmp	.+216    	; 0x1440 <ISR_adc_ir_driver+0x122>
			measure_ir_distance(cur_ir_led, true);
		}
		
		}else if(adc_task == ADC_TASK_IR_FILTERED_CONTINUES || adc_task == ADC_TASK_IR_FILTERED_ONCE){
    1368:	80 91 3e 20 	lds	r24, 0x203E
    136c:	84 30       	cpi	r24, 0x04	; 4
    136e:	29 f0       	breq	.+10     	; 0x137a <ISR_adc_ir_driver+0x5c>
    1370:	80 91 3e 20 	lds	r24, 0x203E
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	09 f0       	breq	.+2      	; 0x137a <ISR_adc_ir_driver+0x5c>
    1378:	68 c0       	rjmp	.+208    	; 0x144a <ISR_adc_ir_driver+0x12c>
		// filter activated
		if (ir_raw_stored){
    137a:	80 91 03 20 	lds	r24, 0x2003
    137e:	88 23       	and	r24, r24
    1380:	09 f4       	brne	.+2      	; 0x1384 <ISR_adc_ir_driver+0x66>
    1382:	53 c0       	rjmp	.+166    	; 0x142a <ISR_adc_ir_driver+0x10c>
			if (ADCA.CH0.RES < last_adc){
    1384:	20 91 24 02 	lds	r18, 0x0224
    1388:	30 91 25 02 	lds	r19, 0x0225
    138c:	80 91 48 20 	lds	r24, 0x2048
    1390:	90 91 49 20 	lds	r25, 0x2049
    1394:	28 17       	cp	r18, r24
    1396:	39 07       	cpc	r19, r25
    1398:	38 f4       	brcc	.+14     	; 0x13a8 <ISR_adc_ir_driver+0x8a>
				ir_data_buffer.data[ir_data_buffer.head] = 0;
    139a:	e0 91 47 20 	lds	r30, 0x2047
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	e1 5c       	subi	r30, 0xC1	; 193
    13a2:	ff 4d       	sbci	r31, 0xDF	; 223
    13a4:	10 82       	st	Z, r1
    13a6:	14 c0       	rjmp	.+40     	; 0x13d0 <ISR_adc_ir_driver+0xb2>
				}else{
				ir_data_buffer.data[ir_data_buffer.head] = pgm_read_word (&scaleIRTable[ADCA.CH0.RES - last_adc]);
    13a8:	e0 91 24 02 	lds	r30, 0x0224
    13ac:	f0 91 25 02 	lds	r31, 0x0225
    13b0:	80 91 48 20 	lds	r24, 0x2048
    13b4:	90 91 49 20 	lds	r25, 0x2049
    13b8:	e8 1b       	sub	r30, r24
    13ba:	f9 0b       	sbc	r31, r25
    13bc:	e0 5e       	subi	r30, 0xE0	; 224
    13be:	fb 4f       	sbci	r31, 0xFB	; 251
    13c0:	85 91       	lpm	r24, Z+
    13c2:	94 91       	lpm	r25, Z
    13c4:	e0 91 47 20 	lds	r30, 0x2047
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	e1 5c       	subi	r30, 0xC1	; 193
    13cc:	ff 4d       	sbci	r31, 0xDF	; 223
    13ce:	80 83       	st	Z, r24
			}
			ir_data_buffer.head += 1;
    13d0:	80 91 47 20 	lds	r24, 0x2047
    13d4:	8f 5f       	subi	r24, 0xFF	; 255
			
			if (ir_data_buffer.head == BUFFER_SIZE){
    13d6:	88 30       	cpi	r24, 0x08	; 8
    13d8:	19 f0       	breq	.+6      	; 0x13e0 <ISR_adc_ir_driver+0xc2>
			if (ADCA.CH0.RES < last_adc){
				ir_data_buffer.data[ir_data_buffer.head] = 0;
				}else{
				ir_data_buffer.data[ir_data_buffer.head] = pgm_read_word (&scaleIRTable[ADCA.CH0.RES - last_adc]);
			}
			ir_data_buffer.head += 1;
    13da:	80 93 47 20 	sts	0x2047, r24
    13de:	1b c0       	rjmp	.+54     	; 0x1416 <ISR_adc_ir_driver+0xf8>
			
			if (ir_data_buffer.head == BUFFER_SIZE){
				// enough measurements stored, calculate average
				ir_data_buffer.head = 0;
    13e0:	10 92 47 20 	sts	0x2047, r1
    13e4:	ef e3       	ldi	r30, 0x3F	; 63
    13e6:	f0 e2       	ldi	r31, 0x20	; 32
				uint16_t avr_ir = 0;
    13e8:	60 e0       	ldi	r22, 0x00	; 0
    13ea:	70 e0       	ldi	r23, 0x00	; 0
				for (uint8_t i = 0;  i < BUFFER_SIZE; i++){
					avr_ir += ir_data_buffer.data[i];
    13ec:	81 91       	ld	r24, Z+
    13ee:	68 0f       	add	r22, r24
    13f0:	71 1d       	adc	r23, r1
			
			if (ir_data_buffer.head == BUFFER_SIZE){
				// enough measurements stored, calculate average
				ir_data_buffer.head = 0;
				uint16_t avr_ir = 0;
				for (uint8_t i = 0;  i < BUFFER_SIZE; i++){
    13f2:	80 e2       	ldi	r24, 0x20	; 32
    13f4:	e7 34       	cpi	r30, 0x47	; 71
    13f6:	f8 07       	cpc	r31, r24
    13f8:	c9 f7       	brne	.-14     	; 0x13ec <ISR_adc_ir_driver+0xce>
					avr_ir += ir_data_buffer.data[i];
				}
				avr_ir /= BUFFER_SIZE;
    13fa:	83 e0       	ldi	r24, 0x03	; 3
    13fc:	76 95       	lsr	r23
    13fe:	67 95       	ror	r22
    1400:	8a 95       	dec	r24
    1402:	e1 f7       	brne	.-8      	; 0x13fc <ISR_adc_ir_driver+0xde>
				USART_TXBuffer_PutByte(&USART_data, avr_ir);
    1404:	8f e1       	ldi	r24, 0x1F	; 31
    1406:	90 e2       	ldi	r25, 0x20	; 32
    1408:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <USART_TXBuffer_PutByte>
				cur_ir_led += 1;
    140c:	80 91 4a 20 	lds	r24, 0x204A
    1410:	8f 5f       	subi	r24, 0xFF	; 255
    1412:	80 93 4a 20 	sts	0x204A, r24
			}
			ir_raw_stored = false;
    1416:	10 92 03 20 	sts	0x2003, r1
			if (conv_left>0){
    141a:	80 91 02 20 	lds	r24, 0x2002
    141e:	88 23       	and	r24, r24
    1420:	a1 f0       	breq	.+40     	; 0x144a <ISR_adc_ir_driver+0x12c>
				measure_ir_distance(cur_ir_led, false);
    1422:	80 91 4a 20 	lds	r24, 0x204A
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	0e c0       	rjmp	.+28     	; 0x1446 <ISR_adc_ir_driver+0x128>
			}
			}else{
			//store daylight value and measure value with turned on led again
			ir_raw_stored = true;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	80 93 03 20 	sts	0x2003, r24
			last_adc = ADCA.CH0.RES;
    1430:	80 91 24 02 	lds	r24, 0x0224
    1434:	90 91 25 02 	lds	r25, 0x0225
    1438:	80 93 48 20 	sts	0x2048, r24
    143c:	90 93 49 20 	sts	0x2049, r25
			measure_ir_distance(cur_ir_led, true);
    1440:	80 91 4a 20 	lds	r24, 0x204A
    1444:	61 e0       	ldi	r22, 0x01	; 1
    1446:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <measure_ir_distance>
    144a:	08 95       	ret

0000144c <set_motor_operation_mode>:
#include "motor_driver.h"

void set_motor_operation_mode(motor_t motor, motor_op_mode_t op){
	PORTE.OUTCLR = 0b11 << motor;
    144c:	23 e0       	ldi	r18, 0x03	; 3
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	08 2e       	mov	r0, r24
    1452:	01 c0       	rjmp	.+2      	; 0x1456 <set_motor_operation_mode+0xa>
    1454:	22 0f       	add	r18, r18
    1456:	0a 94       	dec	r0
    1458:	ea f7       	brpl	.-6      	; 0x1454 <set_motor_operation_mode+0x8>
    145a:	e0 e8       	ldi	r30, 0x80	; 128
    145c:	f6 e0       	ldi	r31, 0x06	; 6
    145e:	26 83       	std	Z+6, r18	; 0x06
	PORTE.OUTSET = op << motor;
    1460:	08 2e       	mov	r0, r24
    1462:	01 c0       	rjmp	.+2      	; 0x1466 <set_motor_operation_mode+0x1a>
    1464:	66 0f       	add	r22, r22
    1466:	0a 94       	dec	r0
    1468:	ea f7       	brpl	.-6      	; 0x1464 <set_motor_operation_mode+0x18>
    146a:	65 83       	std	Z+5, r22	; 0x05
    146c:	08 95       	ret

0000146e <init_motor>:
}

void init_motor(void){
 	PORTE.DIRSET = PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm; //Set Motor control as output
    146e:	80 ef       	ldi	r24, 0xF0	; 240
    1470:	e0 e8       	ldi	r30, 0x80	; 128
    1472:	f6 e0       	ldi	r31, 0x06	; 6
    1474:	81 83       	std	Z+1, r24	; 0x01
 	PORTA.DIRSET = PIN6_bm; // Standby as output
    1476:	80 e4       	ldi	r24, 0x40	; 64
    1478:	e0 e0       	ldi	r30, 0x00	; 0
    147a:	f6 e0       	ldi	r31, 0x06	; 6
    147c:	81 83       	std	Z+1, r24	; 0x01
 	PORTC.DIRSET = PIN2_bm | PIN3_bm; //PWM as output
    147e:	8c e0       	ldi	r24, 0x0C	; 12
    1480:	e0 e4       	ldi	r30, 0x40	; 64
    1482:	f6 e0       	ldi	r31, 0x06	; 6
    1484:	81 83       	std	Z+1, r24	; 0x01
 	
 	TCC0.CTRLA = TC_CLKSEL_DIV1_gc; //prescaler: Clk/1
    1486:	e0 e0       	ldi	r30, 0x00	; 0
    1488:	f8 e0       	ldi	r31, 0x08	; 8
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	80 83       	st	Z, r24
 	TCC0.CTRLB = TC0_CCCEN_bm|TC0_CCDEN_bm| TC_WGMODE_SS_gc; //enable pwm output, Single slope pwm
    148e:	83 ec       	ldi	r24, 0xC3	; 195
    1490:	81 83       	std	Z+1, r24	; 0x01
 	
 	TCC0.PER = 0xff;
    1492:	8f ef       	ldi	r24, 0xFF	; 255
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	86 a3       	std	Z+38, r24	; 0x26
    1498:	97 a3       	std	Z+39, r25	; 0x27
    149a:	08 95       	ret

0000149c <set_motor_speed>:
	

}

void set_motor_speed(motor_t motor, uint8_t speed){
    149c:	6b 3a       	cpi	r22, 0xAB	; 171
    149e:	08 f0       	brcs	.+2      	; 0x14a2 <set_motor_speed+0x6>
    14a0:	6a ea       	ldi	r22, 0xAA	; 170
	if(speed > 0xaa){//ensure 5V average
		speed = 0xaa;
	}
	
	if(motor == motor_l){
    14a2:	86 30       	cpi	r24, 0x06	; 6
    14a4:	31 f4       	brne	.+12     	; 0x14b2 <set_motor_speed+0x16>
		TCC0.CCC = speed;
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	60 93 2c 08 	sts	0x082C, r22
    14ac:	70 93 2d 08 	sts	0x082D, r23
    14b0:	08 95       	ret
	} else if(motor == motor_r){
    14b2:	84 30       	cpi	r24, 0x04	; 4
    14b4:	29 f4       	brne	.+10     	; 0x14c0 <set_motor_speed+0x24>
		TCC0.CCD = speed;
    14b6:	70 e0       	ldi	r23, 0x00	; 0
    14b8:	60 93 2e 08 	sts	0x082E, r22
    14bc:	70 93 2f 08 	sts	0x082F, r23
    14c0:	08 95       	ret

000014c2 <set_motor_on>:
	}
}

void set_motor_on(bool b){
	if(b){
    14c2:	88 23       	and	r24, r24
    14c4:	21 f0       	breq	.+8      	; 0x14ce <set_motor_on+0xc>
		PORTA.OUTSET = PIN6_bm;
    14c6:	80 e4       	ldi	r24, 0x40	; 64
    14c8:	80 93 05 06 	sts	0x0605, r24
    14cc:	08 95       	ret
	}else{
		PORTA.OUTCLR = PIN6_bm;
    14ce:	80 e4       	ldi	r24, 0x40	; 64
    14d0:	80 93 06 06 	sts	0x0606, r24
    14d4:	08 95       	ret

000014d6 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
    14d6:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
    14d8:	60 83       	st	Z, r22
    14da:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
    14dc:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
    14de:	14 8e       	std	Z+28, r1	; 0x1c
	usart_data->buffer.RX_Head = 0;
    14e0:	13 8e       	std	Z+27, r1	; 0x1b
	usart_data->buffer.TX_Tail = 0;
    14e2:	16 8e       	std	Z+30, r1	; 0x1e
	usart_data->buffer.TX_Head = 0;
    14e4:	15 8e       	std	Z+29, r1	; 0x1d
    14e6:	08 95       	ret

000014e8 <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
    14e8:	fc 01       	movw	r30, r24
    14ea:	25 8d       	ldd	r18, Z+29	; 0x1d
	uint8_t tempTail = usart_data->buffer.TX_Tail;
    14ec:	96 8d       	ldd	r25, Z+30	; 0x1e
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
    14ee:	2f 5f       	subi	r18, 0xFF	; 255
    14f0:	27 70       	andi	r18, 0x07	; 7
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	29 13       	cpse	r18, r25
    14f6:	01 c0       	rjmp	.+2      	; 0x14fa <USART_TXBuffer_FreeSpace+0x12>
    14f8:	80 e0       	ldi	r24, 0x00	; 0
}
    14fa:	08 95       	ret

000014fc <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	1f 92       	push	r1
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	8c 01       	movw	r16, r24
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
    150c:	69 83       	std	Y+1, r22	; 0x01
    150e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
    1512:	69 81       	ldd	r22, Y+1	; 0x01
    1514:	88 23       	and	r24, r24
    1516:	a9 f0       	breq	.+42     	; 0x1542 <USART_TXBuffer_PutByte+0x46>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
    1518:	d8 01       	movw	r26, r16
    151a:	5d 96       	adiw	r26, 0x1d	; 29
    151c:	9c 91       	ld	r25, X
    151e:	5d 97       	sbiw	r26, 0x1d	; 29
	  	TXbufPtr->TX[tempTX_Head]= data;
    1520:	f8 01       	movw	r30, r16
    1522:	e9 0f       	add	r30, r25
    1524:	f1 1d       	adc	r31, r1
    1526:	63 8b       	std	Z+19, r22	; 0x13
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
    1528:	9f 5f       	subi	r25, 0xFF	; 255
    152a:	97 70       	andi	r25, 0x07	; 7
    152c:	f8 01       	movw	r30, r16
    152e:	95 8f       	std	Z+29, r25	; 0x1d

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
    1530:	01 90       	ld	r0, Z+
    1532:	f0 81       	ld	r31, Z
    1534:	e0 2d       	mov	r30, r0
    1536:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
    1538:	9c 7f       	andi	r25, 0xFC	; 252
    153a:	12 96       	adiw	r26, 0x02	; 2
    153c:	2c 91       	ld	r18, X
    153e:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
    1540:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
    1542:	0f 90       	pop	r0
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	08 95       	ret

0000154e <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    154e:	fc 01       	movw	r30, r24
    1550:	23 8d       	ldd	r18, Z+27	; 0x1b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    1552:	94 8d       	ldd	r25, Z+28	; 0x1c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	29 13       	cpse	r18, r25
    1558:	01 c0       	rjmp	.+2      	; 0x155c <USART_RXBufferData_Available+0xe>
    155a:	80 e0       	ldi	r24, 0x00	; 0
}
    155c:	08 95       	ret

0000155e <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
    155e:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    1560:	84 8d       	ldd	r24, Z+28	; 0x1c
    1562:	df 01       	movw	r26, r30
    1564:	a8 0f       	add	r26, r24
    1566:	b1 1d       	adc	r27, r1
    1568:	13 96       	adiw	r26, 0x03	; 3
    156a:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    156c:	94 8d       	ldd	r25, Z+28	; 0x1c
    156e:	9f 5f       	subi	r25, 0xFF	; 255
    1570:	9f 70       	andi	r25, 0x0F	; 15
    1572:	94 8f       	std	Z+28, r25	; 0x1c

	return ans;
}
    1574:	08 95       	ret

00001576 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
    1576:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
    1578:	83 8d       	ldd	r24, Z+27	; 0x1b
    157a:	8f 5f       	subi	r24, 0xFF	; 255
    157c:	8f 70       	andi	r24, 0x0F	; 15

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
    157e:	24 8d       	ldd	r18, Z+28	; 0x1c
	uint8_t data = usart_data->usart->DATA;
    1580:	a0 81       	ld	r26, Z
    1582:	b1 81       	ldd	r27, Z+1	; 0x01
    1584:	9c 91       	ld	r25, X

	if (tempRX_Head == tempRX_Tail) {
    1586:	82 17       	cp	r24, r18
    1588:	49 f0       	breq	.+18     	; 0x159c <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    158a:	23 8d       	ldd	r18, Z+27	; 0x1b
    158c:	df 01       	movw	r26, r30
    158e:	a2 0f       	add	r26, r18
    1590:	b1 1d       	adc	r27, r1
    1592:	13 96       	adiw	r26, 0x03	; 3
    1594:	9c 93       	st	X, r25
		usart_data->buffer.RX_Head = tempRX_Head;
    1596:	83 8f       	std	Z+27, r24	; 0x1b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
    159c:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
    159e:	08 95       	ret

000015a0 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    15a6:	86 8d       	ldd	r24, Z+30	; 0x1e
	if (bufPtr->TX_Head == tempTX_Tail){
    15a8:	95 8d       	ldd	r25, Z+29	; 0x1d
    15aa:	a0 81       	ld	r26, Z
    15ac:	b1 81       	ldd	r27, Z+1	; 0x01
    15ae:	98 13       	cpse	r25, r24
    15b0:	07 c0       	rjmp	.+14     	; 0x15c0 <USART_DataRegEmpty+0x20>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    15b2:	13 96       	adiw	r26, 0x03	; 3
    15b4:	8c 91       	ld	r24, X
    15b6:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    15b8:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
    15ba:	13 96       	adiw	r26, 0x03	; 3
    15bc:	8c 93       	st	X, r24
    15be:	0a c0       	rjmp	.+20     	; 0x15d4 <USART_DataRegEmpty+0x34>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    15c0:	86 8d       	ldd	r24, Z+30	; 0x1e
    15c2:	ef 01       	movw	r28, r30
    15c4:	c8 0f       	add	r28, r24
    15c6:	d1 1d       	adc	r29, r1
    15c8:	8b 89       	ldd	r24, Y+19	; 0x13
		usart_data->usart->DATA = data;
    15ca:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    15cc:	86 8d       	ldd	r24, Z+30	; 0x1e
    15ce:	8f 5f       	subi	r24, 0xFF	; 255
    15d0:	87 70       	andi	r24, 0x07	; 7
    15d2:	86 8f       	std	Z+30, r24	; 0x1e
	}
}
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	08 95       	ret

000015da <xmega_tcca_clk_freq_sel>:

unsigned char clk_sel = 0;


void xmega_tcca_clk_freq_sel(unsigned char select){
	clk_sel = select;
    15da:	80 93 04 20 	sts	0x2004, r24
    15de:	08 95       	ret

000015e0 <xmega_freq_cntr_init>:


// Connect Event Chan to the input pin EVENT_SYSTEM_INPUT PIN to TCCA's clock input pin.


    EVSYS.CH0MUX = EVENT_SYSTEM_INPUT_PIN; 
    15e0:	e0 e8       	ldi	r30, 0x80	; 128
    15e2:	f1 e0       	ldi	r31, 0x01	; 1
    15e4:	88 e6       	ldi	r24, 0x68	; 104
    15e6:	80 83       	st	Z, r24


// Set Event Chan 1 to trigger on CNTRA OVF causing an Input Capture on CNTB  
	
	EVSYS.CH1MUX = EVSYS_CHMUX_TCCA_OVF_gc; 
    15e8:	80 ed       	ldi	r24, 0xD0	; 208
    15ea:	81 83       	std	Z+1, r24	; 0x01

//Select event channel 0 as clock source for TCCB

	TCCB.CTRLA = TC_CLKSEL_EVCH0_gc; 
    15ec:	e0 e0       	ldi	r30, 0x00	; 0
    15ee:	fb e0       	ldi	r31, 0x0B	; 11
    15f0:	88 e0       	ldi	r24, 0x08	; 8
    15f2:	80 83       	st	Z, r24

// Select Event Action 0001 => Input Capture, and Event Source select = 0b1001 => 

	TCCB.CTRLD = (TC1_EVACT_gm & TCB_EVACT0_bm) | (TCB_EVSEL_gm & (TCB_EVSEL3_bm | TCB_EVSEL0_bm));
    15f4:	89 e2       	ldi	r24, 0x29	; 41
    15f6:	83 83       	std	Z+3, r24	; 0x03

#endif

//Select Event Chan1 as TCCB Input Capture enable to Capt Channel A

	TCCB.CTRLB = TCB_CCAEN_bm; // Capture enable
    15f8:	80 e1       	ldi	r24, 0x10	; 16
    15fa:	81 83       	std	Z+1, r24	; 0x01
    15fc:	08 95       	ret

000015fe <__vector_77>:
/*!  The following ISR is executed when TCCA overflows.  This will stop the clock to TCCA 
 *  and combine the upper and lower 8 bits of the TCCB capture register into ic_result
 */


ISR(TCCA_OVF_vect){
    15fe:	1f 92       	push	r1
    1600:	0f 92       	push	r0
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	0f 92       	push	r0
    1606:	11 24       	eor	r1, r1
    1608:	2f 93       	push	r18
    160a:	3f 93       	push	r19
    160c:	8f 93       	push	r24
    160e:	9f 93       	push	r25
/* Stop TCCA timer */
		TCCA.CTRLA = ( TCCA.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    1610:	80 91 00 09 	lds	r24, 0x0900
    1614:	80 7f       	andi	r24, 0xF0	; 240
    1616:	80 93 00 09 	sts	0x0900, r24

#if !EXPAND_TO_32_BITS
		{																						;
		if((TCCB_INTFLAGS & 0x01) != 0)	ic_result = 0xffff; //return TCCB OVF via 0xffff
    161a:	80 91 0c 0b 	lds	r24, 0x0B0C
    161e:	80 ff       	sbrs	r24, 0
    1620:	03 c0       	rjmp	.+6      	; 0x1628 <__vector_77+0x2a>
    1622:	8f ef       	ldi	r24, 0xFF	; 255
    1624:	9f ef       	ldi	r25, 0xFF	; 255
    1626:	08 c0       	rjmp	.+16     	; 0x1638 <__vector_77+0x3a>
		else 	ic_result= TCCB.CCABUFL + (TCCB.CCABUFH<<8);
    1628:	20 91 38 0b 	lds	r18, 0x0B38
    162c:	30 91 39 0b 	lds	r19, 0x0B39
    1630:	93 2f       	mov	r25, r19
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	82 0f       	add	r24, r18
    1636:	91 1d       	adc	r25, r1
    1638:	80 93 05 20 	sts	0x2005, r24
    163c:	90 93 06 20 	sts	0x2006, r25
			ic_result= (TCCC.CCABUFL*65536) + (0xffff&(unsigned long)(TCCB.CCABUFL + (TCCB.CCABUFH<<8)));
		}

#endif

}
    1640:	9f 91       	pop	r25
    1642:	8f 91       	pop	r24
    1644:	3f 91       	pop	r19
    1646:	2f 91       	pop	r18
    1648:	0f 90       	pop	r0
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	0f 90       	pop	r0
    164e:	1f 90       	pop	r1
    1650:	18 95       	reti

00001652 <_exit>:
    1652:	f8 94       	cli

00001654 <__stop_program>:
    1654:	ff cf       	rjmp	.-2      	; 0x1654 <__stop_program>
