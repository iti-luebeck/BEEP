
tiny10_power_switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800040  0000006c  000000e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000000e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000843  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000872  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000a8  00000000  00000000  0000089a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000006b  00000000  00000000  00000942  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000fd  00000000  00000000  000009ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000040  00000000  00000000  00000aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000ce  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000002f  00000000  00000000  00000bba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000be9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16 <__ctors_end>
   2:	11 c0       	rjmp	.+34     	; 0x26 <__bad_interrupt>
   4:	10 c0       	rjmp	.+32     	; 0x26 <__bad_interrupt>
   6:	0f c0       	rjmp	.+30     	; 0x26 <__bad_interrupt>
   8:	0e c0       	rjmp	.+28     	; 0x26 <__bad_interrupt>
   a:	23 c0       	rjmp	.+70     	; 0x52 <__vector_5>
   c:	0c c0       	rjmp	.+24     	; 0x26 <__bad_interrupt>
   e:	0b c0       	rjmp	.+22     	; 0x26 <__bad_interrupt>
  10:	0a c0       	rjmp	.+20     	; 0x26 <__bad_interrupt>
  12:	09 c0       	rjmp	.+18     	; 0x26 <__bad_interrupt>
  14:	08 c0       	rjmp	.+16     	; 0x26 <__bad_interrupt>

00000016 <__ctors_end>:
  16:	11 27       	eor	r17, r17
  18:	1f bf       	out	0x3f, r17	; 63
  1a:	cf e5       	ldi	r28, 0x5F	; 95
  1c:	d0 e0       	ldi	r29, 0x00	; 0
  1e:	de bf       	out	0x3e, r29	; 62
  20:	cd bf       	out	0x3d, r28	; 61
  22:	02 d0       	rcall	.+4      	; 0x28 <main>
  24:	21 c0       	rjmp	.+66     	; 0x68 <_exit>

00000026 <__bad_interrupt>:
  26:	ec cf       	rjmp	.-40     	; 0x0 <__vectors>

00000028 <main>:



int main(void)
{
	CCP = 0xD8; //allow writing to protected registers for 4 cycles
  28:	48 ed       	ldi	r20, 0xD8	; 216
  2a:	4c bf       	out	0x3c, r20	; 60
	CLKPSR = (1<<CLKPS3); // 256 clock divider (31250kHz)
  2c:	48 e0       	ldi	r20, 0x08	; 8
  2e:	46 bf       	out	0x36, r20	; 54
	while(!(PINB & (1<<PINB2))){}; //wait until user stopped pressing button
  30:	02 9b       	sbis	0x00, 2	; 0
  32:	fe cf       	rjmp	.-4      	; 0x30 <main+0x8>
	//_delay_ms(50); // lazy debounce ;)
	OCR0A = 15625; // set compare a to ca 4s
  34:	49 e0       	ldi	r20, 0x09	; 9
  36:	5d e3       	ldi	r21, 0x3D	; 61
  38:	57 bd       	out	0x27, r21	; 39
  3a:	46 bd       	out	0x26, r20	; 38
	TIMSK0 = (1<<OCIE0A); // enable compare match a
  3c:	42 e0       	ldi	r20, 0x02	; 2
  3e:	4b bd       	out	0x2b, r20	; 43
	sei(); // enable interrupts
  40:	78 94       	sei
	
	while(1){
		if(!(PINB & (1<<PINB2))){
  42:	02 99       	sbic	0x00, 2	; 0
  44:	02 c0       	rjmp	.+4      	; 0x4a <__SREG__+0xb>
			//start timer
			TCCR0B = (1<<CS01); //start timer (prescaler 1/8)
  46:	4d bd       	out	0x2d, r20	; 45
  48:	fc cf       	rjmp	.-8      	; 0x42 <__SREG__+0x3>
		} else{
			//stop, reset timer
			TCCR0B = 0;
  4a:	1d bd       	out	0x2d, r17	; 45
			TCNT0 = 0;
  4c:	19 bd       	out	0x29, r17	; 41
  4e:	18 bd       	out	0x28, r17	; 40
  50:	f8 cf       	rjmp	.-16     	; 0x42 <__SREG__+0x3>

00000052 <__vector_5>:
		
	}

}

 ISR(TIM0_COMPA_vect){
  52:	1f 93       	push	r17
  54:	0f 93       	push	r16
  56:	0f b7       	in	r16, 0x3f	; 63
  58:	0f 93       	push	r16
  5a:	10 e0       	ldi	r17, 0x00	; 0
 	DDRB |= (1<<DDB0);
  5c:	08 9a       	sbi	0x01, 0	; 1
}
  5e:	0f 91       	pop	r16
  60:	0f bf       	out	0x3f, r16	; 63
  62:	0f 91       	pop	r16
  64:	1f 91       	pop	r17
  66:	18 95       	reti

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>
