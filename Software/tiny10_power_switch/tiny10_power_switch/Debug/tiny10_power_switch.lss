
tiny10_power_switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000170  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800040  00000170  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800040  00800040  00000204  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000967  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00000996  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000019c  00000000  00000000  000009d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000102  00000000  00000000  00000b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001f2  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c4  00000000  00000000  00000e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000149  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000131  00000000  00000000  00001075  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  000011a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16 <__ctors_end>
   2:	50 c0       	rjmp	.+160    	; 0xa4 <__vector_1>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	6e c0       	rjmp	.+220    	; 0xe8 <__vector_5>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	76 c0       	rjmp	.+236    	; 0xfe <__vector_8>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	8c c0       	rjmp	.+280    	; 0x12e <__vector_10>

00000016 <__ctors_end>:
  16:	11 27       	eor	r17, r17
  18:	1f bf       	out	0x3f, r17	; 63
  1a:	cf e5       	ldi	r28, 0x5F	; 95
  1c:	d0 e0       	ldi	r29, 0x00	; 0
  1e:	de bf       	out	0x3e, r29	; 62
  20:	cd bf       	out	0x3d, r28	; 61

00000022 <__do_clear_bss>:
  22:	20 e0       	ldi	r18, 0x00	; 0
  24:	a0 e4       	ldi	r26, 0x40	; 64
  26:	b0 e0       	ldi	r27, 0x00	; 0
  28:	01 c0       	rjmp	.+2      	; 0x2c <.do_clear_bss_start>

0000002a <.do_clear_bss_loop>:
  2a:	1d 93       	st	X+, r17

0000002c <.do_clear_bss_start>:
  2c:	a1 34       	cpi	r26, 0x41	; 65
  2e:	b2 07       	cpc	r27, r18
  30:	e1 f7       	brne	.-8      	; 0x2a <.do_clear_bss_loop>
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	9b c0       	rjmp	.+310    	; 0x16c <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#define BUTTON_PRESSED_bm 0b10


int main(void)
{
	CCP = 0xD8; //allow writing to protected registers for 4 cycles
  38:	48 ed       	ldi	r20, 0xD8	; 216
  3a:	4c bf       	out	0x3c, r20	; 60
	CLKPSR = (1<<CLKPS3); // 256 clock divider (31250kHz)
  3c:	48 e0       	ldi	r20, 0x08	; 8
  3e:	46 bf       	out	0x36, r20	; 54
	while(!(PINB & (1<<PINB2))){}; //wait until user stopped pressing button
  40:	02 9b       	sbis	0x00, 2	; 0
  42:	fe cf       	rjmp	.-4      	; 0x40 <__SREG__+0x1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  44:	46 e8       	ldi	r20, 0x86	; 134
  46:	51 e0       	ldi	r21, 0x01	; 1
  48:	41 50       	subi	r20, 0x01	; 1
  4a:	50 40       	sbci	r21, 0x00	; 0
  4c:	e9 f7       	brne	.-6      	; 0x48 <__SREG__+0x9>
  4e:	00 c0       	rjmp	.+0      	; 0x50 <__SREG__+0x11>
	_delay_ms(50); // lazy debounce ;)
	OCR0A = 2UL*(F_CPU/8); // set compare a to ca 2s (using clockdevider 8)
  50:	44 e8       	ldi	r20, 0x84	; 132
  52:	5e e1       	ldi	r21, 0x1E	; 30
  54:	57 bd       	out	0x27, r21	; 39
  56:	46 bd       	out	0x26, r20	; 38
	TIMSK0 = (1<<OCIE0A); // enable compare match interrupt
  58:	42 e0       	ldi	r20, 0x02	; 2
  5a:	4b bd       	out	0x2b, r20	; 43
	ADMUX = (1<<MUX0)|(1<<MUX1); //use ADC3 as input (PB3)
  5c:	43 e0       	ldi	r20, 0x03	; 3
  5e:	4b bb       	out	0x1b, r20	; 27
	ADCSRA = (1<<ADIE); //enable adc interrupt, 1/2 adc prescaler
  60:	48 e0       	ldi	r20, 0x08	; 8
  62:	4d bb       	out	0x1d, r20	; 29
	DIDR0 = (1<<ADC3D); //disable digital input for adc3
  64:	47 bb       	out	0x17, r20	; 23
	EICRA = (1<<ISC00); //Any logical change on INT0 generates an interrupt request
  66:	41 e0       	ldi	r20, 0x01	; 1
  68:	45 bb       	out	0x15, r20	; 21
	EIMSK = (1<<INT0); //enable INT0 Interrupt
  6a:	43 bb       	out	0x13, r20	; 19
	WDTCSR = (1<<WDIE)|(1<<WDP2)|(1<<WDP1); //use watchdog in interrupt mode (needs WDTON fuse unprogrammed), 128k cycles @ 128khz (about 1s)
  6c:	46 e4       	ldi	r20, 0x46	; 70
  6e:	41 bf       	out	0x31, r20	; 49
	sleep_enable(); //enable sleep mode (allows cpu to sleep)
  70:	4a b7       	in	r20, 0x3a	; 58
  72:	41 60       	ori	r20, 0x01	; 1
  74:	4a bf       	out	0x3a, r20	; 58

	while(1){
		cli(); //prevent interrupts (any pending interrupt will be executed after sei())
		//select sleep mode, depending on working tasks
		if(state&BUTTON_PRESSED_bm){
  76:	e0 e4       	ldi	r30, 0x40	; 64
  78:	f0 e0       	ldi	r31, 0x00	; 0
	EIMSK = (1<<INT0); //enable INT0 Interrupt
	WDTCSR = (1<<WDIE)|(1<<WDP2)|(1<<WDP1); //use watchdog in interrupt mode (needs WDTON fuse unprogrammed), 128k cycles @ 128khz (about 1s)
	sleep_enable(); //enable sleep mode (allows cpu to sleep)

	while(1){
		cli(); //prevent interrupts (any pending interrupt will be executed after sei())
  7a:	f8 94       	cli
		//select sleep mode, depending on working tasks
		if(state&BUTTON_PRESSED_bm){
  7c:	40 81       	ld	r20, Z
  7e:	41 ff       	sbrs	r20, 1
  80:	03 c0       	rjmp	.+6      	; 0x88 <__stack+0x29>
			set_sleep_mode(SLEEP_MODE_IDLE);
  82:	4a b7       	in	r20, 0x3a	; 58
  84:	41 7f       	andi	r20, 0xF1	; 241
  86:	0a c0       	rjmp	.+20     	; 0x9c <__stack+0x3d>
		}else if(state&ADC_IN_PROGRESS_bm){
  88:	40 81       	ld	r20, Z
  8a:	40 ff       	sbrs	r20, 0
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__stack+0x37>
			set_sleep_mode(SLEEP_MODE_ADC);
  8e:	4a b7       	in	r20, 0x3a	; 58
  90:	41 7f       	andi	r20, 0xF1	; 241
  92:	42 60       	ori	r20, 0x02	; 2
  94:	03 c0       	rjmp	.+6      	; 0x9c <__stack+0x3d>
		}else{
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  96:	4a b7       	in	r20, 0x3a	; 58
  98:	41 7f       	andi	r20, 0xF1	; 241
  9a:	44 60       	ori	r20, 0x04	; 4
  9c:	4a bf       	out	0x3a, r20	; 58
		}
		sei(); //re enable interrupts (we need to wake up)
  9e:	78 94       	sei
		sleep_cpu(); //sleep now (is guaranteed to be executed before next interrupt)
  a0:	88 95       	sleep
	}
  a2:	eb cf       	rjmp	.-42     	; 0x7a <__stack+0x1b>

000000a4 <__vector_1>:

}

//count the timer of the button press
ISR(INT0_vect){
  a4:	1f 93       	push	r17
  a6:	0f 93       	push	r16
  a8:	0f b7       	in	r16, 0x3f	; 63
  aa:	0f 93       	push	r16
  ac:	10 e0       	ldi	r17, 0x00	; 0
  ae:	4f 93       	push	r20
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	if(!(PINB & (1<<PINB2))){ //button pressed
  b4:	02 99       	sbic	0x00, 2	; 0
  b6:	08 c0       	rjmp	.+16     	; 0xc8 <__vector_1+0x24>
		state |= BUTTON_PRESSED_bm;
  b8:	e0 e4       	ldi	r30, 0x40	; 64
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	40 81       	ld	r20, Z
  be:	42 60       	ori	r20, 0x02	; 2
  c0:	40 83       	st	Z, r20
		//start timer
		TCCR0B = (1<<CS01); //start timer (prescaler 1/8)
  c2:	42 e0       	ldi	r20, 0x02	; 2
  c4:	4d bd       	out	0x2d, r20	; 45
  c6:	08 c0       	rjmp	.+16     	; 0xd8 <__vector_1+0x34>
	} else{ //button released
		//stop, reset timer
		TCCR0B = 0;
  c8:	1d bd       	out	0x2d, r17	; 45
		TCNT0 = 0;
  ca:	19 bd       	out	0x29, r17	; 41
  cc:	18 bd       	out	0x28, r17	; 40
		state &= ~BUTTON_PRESSED_bm;
  ce:	e0 e4       	ldi	r30, 0x40	; 64
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	40 81       	ld	r20, Z
  d4:	4d 7f       	andi	r20, 0xFD	; 253
  d6:	40 83       	st	Z, r20
	}
}
  d8:	ff 91       	pop	r31
  da:	ef 91       	pop	r30
  dc:	4f 91       	pop	r20
  de:	0f 91       	pop	r16
  e0:	0f bf       	out	0x3f, r16	; 63
  e2:	0f 91       	pop	r16
  e4:	1f 91       	pop	r17
  e6:	18 95       	reti

000000e8 <__vector_5>:

//if button was pressed long enough
 ISR(TIM0_COMPA_vect){
  e8:	1f 93       	push	r17
  ea:	0f 93       	push	r16
  ec:	0f b7       	in	r16, 0x3f	; 63
  ee:	0f 93       	push	r16
  f0:	10 e0       	ldi	r17, 0x00	; 0
	//shut down
	DDRB |= (1<<DDB0);
  f2:	08 9a       	sbi	0x01, 0	; 1
}
  f4:	0f 91       	pop	r16
  f6:	0f bf       	out	0x3f, r16	; 63
  f8:	0f 91       	pop	r16
  fa:	1f 91       	pop	r17
  fc:	18 95       	reti

000000fe <__vector_8>:

//use wdt to measure voltage
ISR(WDT_vect){
  fe:	1f 93       	push	r17
 100:	0f 93       	push	r16
 102:	0f b7       	in	r16, 0x3f	; 63
 104:	0f 93       	push	r16
 106:	10 e0       	ldi	r17, 0x00	; 0
 108:	4f 93       	push	r20
 10a:	ef 93       	push	r30
 10c:	ff 93       	push	r31
	state |= ADC_IN_PROGRESS_bm;
 10e:	e0 e4       	ldi	r30, 0x40	; 64
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	40 81       	ld	r20, Z
 114:	41 60       	ori	r20, 0x01	; 1
 116:	40 83       	st	Z, r20
	//measure voltage
	ADCSRA |= (1<<ADEN)|(1<<ADSC); //enable, start conversion
 118:	4d b3       	in	r20, 0x1d	; 29
 11a:	40 6c       	ori	r20, 0xC0	; 192
 11c:	4d bb       	out	0x1d, r20	; 29
}
 11e:	ff 91       	pop	r31
 120:	ef 91       	pop	r30
 122:	4f 91       	pop	r20
 124:	0f 91       	pop	r16
 126:	0f bf       	out	0x3f, r16	; 63
 128:	0f 91       	pop	r16
 12a:	1f 91       	pop	r17
 12c:	18 95       	reti

0000012e <__vector_10>:

//adc result is ready
ISR(ADC_vect){
 12e:	1f 93       	push	r17
 130:	0f 93       	push	r16
 132:	0f b7       	in	r16, 0x3f	; 63
 134:	0f 93       	push	r16
 136:	10 e0       	ldi	r17, 0x00	; 0
 138:	4f 93       	push	r20
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
	if(ADCL < 186){ //2.4V*256/3.3V (see datasheet)
 13e:	49 b3       	in	r20, 0x19	; 25
 140:	4a 3b       	cpi	r20, 0xBA	; 186
 142:	10 f4       	brcc	.+4      	; 0x148 <__vector_10+0x1a>
		//shutdown at 2.4V
		DDRB |= (1<<DDB0);
 144:	08 9a       	sbi	0x01, 0	; 1
 146:	05 c0       	rjmp	.+10     	; 0x152 <__vector_10+0x24>
	} else if(ADCL < 190){ //2.45V*256/3.3V (see datasheet)
 148:	49 b3       	in	r20, 0x19	; 25
 14a:	4e 3b       	cpi	r20, 0xBE	; 190
 14c:	10 f4       	brcc	.+4      	; 0x152 <__vector_10+0x24>
		//Warn LED on
		PORTB |= (1<<PORTB1);
 14e:	11 9a       	sbi	0x02, 1	; 2
		DDRB |= (1<<DDB1);
 150:	09 9a       	sbi	0x01, 1	; 1
	}
	state &= ~ADC_IN_PROGRESS_bm;
 152:	e0 e4       	ldi	r30, 0x40	; 64
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	40 81       	ld	r20, Z
 158:	4e 7f       	andi	r20, 0xFE	; 254
 15a:	40 83       	st	Z, r20
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	4f 91       	pop	r20
 162:	0f 91       	pop	r16
 164:	0f bf       	out	0x3f, r16	; 63
 166:	0f 91       	pop	r16
 168:	1f 91       	pop	r17
 16a:	18 95       	reti

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
